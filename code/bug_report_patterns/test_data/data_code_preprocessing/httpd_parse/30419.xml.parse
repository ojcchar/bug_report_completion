<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bug>
    <id>30419</id>
    <title>Weird caching behaviour of mod_cache and old Cookies</title>
    <description>
        <paragraph id="1">
            <sentence id="1.1">Hi,</sentence>
        </paragraph>
        <paragraph id="2">
            <sentence id="2.1">I found some weird behaviour in mod_cache which I believe to be a bug.</sentence>
            <sentence id="2.2">First
of all my environment:</sentence>
        </paragraph>
        <paragraph id="3">
            <sentence id="3.1">I. Environment</sentence>
        </paragraph>
        <paragraph id="4">
            <sentence id="4.1">Apache: 2.0.50
OS: Linux</sentence>
        </paragraph>
        <paragraph id="5">
            <sentence id="5.1">Excerpt from my Apache configuration:</sentence>
        </paragraph>
        <paragraph id="8">
            <sentence id="8.1">JkMount /* worker_ajp13</sentence>
        </paragraph>
        <paragraph id="10">
            <sentence id="10.1">CacheMaxExpire 60
CacheIgnoreNoLastMod On
CacheIgnoreCacheControl On
CacheDefaultExpire 60</sentence>
        </paragraph>
        <paragraph id="11">
            <sentence id="11.1">&lt;/VirtualHost&gt;</sentence>
        </paragraph>
        <paragraph id="12">
            <sentence id="12.1">II.</sentence>
            <sentence id="12.2">Problem description</sentence>
        </paragraph>
        <paragraph id="13">
            <sentence id="13.1">I try to use mod_cache to cache pages generated by Tomcat and delivered via
Apache / mod_jk.</sentence>
        </paragraph>
        <paragraph id="14">
            <sentence id="14.1">On the Tomcat / mod_jk side I use:</sentence>
        </paragraph>
        <paragraph id="15">
            <sentence id="15.1">mod_jk: 1.2.5
Tomcat: 5.0.18</sentence>
        </paragraph>
        <paragraph id="16">
            <sentence id="16.1">At first glance the configuration above does exactly what I want by caching
the Tomcat generated response, but I noticed the following two weird behaviours:</sentence>
        </paragraph>
        <paragraph id="17">
            <sentence id="17.1">1 If a cached document is outdated because it is expired, it will be requested again from Tomcat, which is completely correct.</sentence>
            <sentence id="17.2">But this response contains two Set-Cookie headers, one from the cached headers (cross checked by a look to the .headers file) and one generated by the actual Tomcat request.</sentence>
            <sentence id="17.3">The following excerpt from Mozilla's livehttpheaders shows this:</sentence>
        </paragraph>
        <paragraph id="18">
            <sentence id="18.1">http://192.168.2.4/test/test.jsp</sentence>
        </paragraph>
        <paragraph id="21">
            <sentence id="21.1">It is worth to note that the first Set-Cookie header is the one from the
previously cached headers and that the second Set-Cookie header is the one
generated by the actual Tomcat request.</sentence>
            <sentence id="21.2">It can be found
alone in the updated .</sentence>
            <sentence id="21.3">headers file after the request has been completed.</sentence>
        </paragraph>
        <paragraph id="22">
            <sentence id="22.1">2 If the next request after 1.</sentence>
            <sentence id="22.2">to the same URL is a request that would</sentence>
            <sentence id="22.3">allow mod_cache to retrieve the cached document because</sentence>
        </paragraph>
        <paragraph id="23">
            <sentence id="23.1">- It contains no Cache-Control header</sentence>
            <sentence id="23.2">- and the request is placed shortly after 1.</sentence>
            <sentence id="23.3">such that the document is</sentence>
            <sentence id="23.4">not expired already</sentence>
        </paragraph>
        <paragraph id="24">
            <sentence id="24.1">mod_cache decides that the cached version of the document is not fresh
   and has to be retrived again from Tomcat.</sentence>
            <sentence id="24.2">Only the next request to this
   URL works correctly and delivers the cached version of this document.</sentence>
        </paragraph>
        <paragraph id="25">
            <sentence id="25.1">III.</sentence>
            <sentence id="25.2">Problem analysis</sentence>
        </paragraph>
        <paragraph id="26">
            <sentence id="26.1">So I set the Loglevel to debug and added the following temporary patch to
cache_util.c to get a better picture of what is going on:</sentence>
        </paragraph>
        <paragraph id="28">
            <sentence id="28.1">/* handle expiration */</sentence>
            <sentence id="28.2">if (((smaxage !</sentence>
            <sentence id="28.3">= -1) &amp;&amp; (age &lt; (smaxage - minfresh))) ||</sentence>
        </paragraph>
        <paragraph id="29">
            <sentence id="29.1">This produced the following logging output:</sentence>
        </paragraph>
        <paragraph id="31">
            <sentence id="31.1">It is notable that the values for expire / date of the 12:44:07 request are
the values of the 12:38:34 request with their microseconds part striped off.</sentence>
            <sentence id="31.2">This is wrong as the 12:38:34 request should have updated expire / date in
the .</sentence>
            <sentence id="31.3">headers file with the values actual during the 12:38:34 request and
not set the values to the striped values of the cache entry expired at
12:38:34.</sentence>
            <sentence id="31.4">One may also notice that the 12:44:07 request reports
cache: Added date header whereas the 12:38:34 request does nothing of this
kind.</sentence>
            <sentence id="31.5">It is also notable that the .</sentence>
            <sentence id="31.6">headers file does not contain a Date: header after
the 12:38:34 request, but it does after the 12:44:07 request.</sentence>
        </paragraph>
        <paragraph id="32">
            <sentence id="32.1">IV.</sentence>
            <sentence id="32.2">Conclusion</sentence>
        </paragraph>
        <paragraph id="33">
            <sentence id="33.1">To cut a long story short: I believe that 1.</sentence>
            <sentence id="33.2">and 2.</sentence>
            <sentence id="33.3">are caused by the same
problem:</sentence>
        </paragraph>
        <paragraph id="34">
            <sentence id="34.1">The function cache_select_url called in line 152 of mod_cache.c already fills</sentence>
            <sentence id="34.2">r-&gt;err_headers_out with the cached headers. If ap_cache_check_freshness called</sentence>
            <sentence id="34.3">in line 167 detects that the cache object has expired this data is kept in</sentence>
            <sentence id="34.4">r-&gt;err_headers_out during the further processing. This leads to the reusing</sentence>
            <sentence id="34.5">of the old date in line 681 of mod_cache.c and explains the removal of the</sentence>
            <sentence id="34.6">microseconds part which is done in line 689.</sentence>
            <sentence id="34.7">During the further processing of the CACHE_IN filter at least mod_disk_cache</sentence>
            <sentence id="34.8">only stores r-&gt;headers_out in the .headers file which explains why the Date</sentence>
            <sentence id="34.9">header is missing in the .headers file after the 12:38:34 request.</sentence>
            <sentence id="34.10">Furthermore r-&gt;err_headers_out and r-&gt;headers_out get merged later on where</sentence>
            <sentence id="34.11">r-&gt;err_headers_out distributes the old (previously cached) Set-Cookie header</sentence>
            <sentence id="34.12">and r-&gt;headers_out distributes the new Tomcat generated Set-Cookie header</sentence>
            <sentence id="34.13">to the reponse.</sentence>
        </paragraph>
        <paragraph id="35">
            <sentence id="35.1">V. Solution proposal</sentence>
        </paragraph>
        <paragraph id="36">
            <sentence id="36.1">From my limited view into Apache I cannot see a reason why the data in
r-&gt;err_headers_out / r-&gt;headers_out should be used any longer if
ap_cache_check_freshness detected that the cache object has expired.</sentence>
            <sentence id="36.2">So I
propose the following patch to mod_cache.</sentence>
            <sentence id="36.3">c which clears the tables
r-&gt;err_headers_out / r-&gt;headers_out:</sentence>
        </paragraph>
        <paragraph id="38">
            <sentence id="38.1">Applying this patch worked for me.</sentence>
            <sentence id="38.2">Of course I do not know if it breaks
something else as I did only limited testing.</sentence>
            <sentence id="38.3">If it turns out that it is
incorrect to clear the tables r-&gt;err_headers_out / r-&gt;headers_out then at
least all "irrelevant data" (however this gets defined) that got added by
cache_select_url must be removed after ap_cache_check_freshness detected
that the cache object has expired.</sentence>
            <sentence id="38.4">From my experience this should be at least
the Set-Cookie and the Date headers.</sentence>
            <sentence id="38.5">Depending on how "irrelevant data" gets
defined this makes a solution and thus a patch more complex.</sentence>
        </paragraph>
        <paragraph id="39">
            <sentence id="39.1">Regards</sentence>
        </paragraph>
        <paragraph id="40">
            <sentence id="40.1">RÃ¼diger PlÃ¼m</sentence>
        </paragraph>
    </description>
</bug>
