Working/VBG on/IN another/DT bug/NN (/-LRB- bug/NN 595943/CD )/-RRB- ,/, I/PRP discovered/VBD that/IN it/PRP 's/VBZ possible/JJ for/IN xul/NN :/: tabs/NNS to/TO have/VB both/DT ./. 

(ROOT (S (S (VP (VBG Working) (PP (IN on) (NP (NP (DT another) (NN bug)) (PRN (-LRB- -LRB-) (NP (NN bug) (CD 595943)) (-RRB- -RRB-)))))) (, ,) (NP (PRP I)) (VP (VBD discovered) (SBAR (IN that) (S (NP (PRP it)) (VP (VBZ 's) (ADJP (JJ possible) (PP (IN for) (NP (NN xul)))) (: :) (S (NP (NNS tabs)) (VP (TO to) (VP (VB have) (NP (DT both))))))))) (. .)))

root(ROOT-0, discovered-11)
vmod(discovered-11, Working-1)
det(bug-4, another-3)
prep_on(Working-1, bug-4)
appos(bug-4, bug-6)
num(bug-6, 595943-7)
nsubj(discovered-11, I-10)
mark(possible-15, that-12)
nsubj(possible-15, it-13)
cop(possible-15, 's-14)
ccomp(discovered-11, possible-15)
prep_for(possible-15, xul-17)
dobj(possible-15, tabs-19)
aux(have-21, to-20)
parataxis(possible-15, have-21)
dobj(have-21, both-22)

pinned/VBN and/CC ./. 

(ROOT (S (VP (VBN pinned) (ADVP (CC and))) (. .)))

root(ROOT-0, pinned-1)
advmod(pinned-1, and-2)

hidden/JJ true/JJ ./. 

(ROOT (S (NP (JJ hidden)) (ADJP (JJ true)) (. .)))

root(ROOT-0, true-2)
dep(true-2, hidden-1)

They/PRP 're/VBP still/RB visible/JJ in/IN this/DT state/NN (/-LRB- evidently/RB pinned/VBN takes/VBZ precedence/NN )/-RRB- ,/, but/CC it/PRP 's/VBZ possible/JJ they/PRP behave/VBP badly/RB in/IN other/JJ ways/NNS ./. 

(ROOT (S (S (NP (PRP They)) (VP (VBP 're) (ADVP (RB still)) (ADJP (JJ visible) (PP (IN in) (NP (NP (DT this) (NN state)) (PRN (-LRB- -LRB-) (VP (ADVP (RB evidently)) (VBN pinned) (S (VP (VBZ takes) (NP (NN precedence))))) (-RRB- -RRB-))))))) (, ,) (CC but) (S (NP (PRP it)) (VP (VBZ 's) (ADJP (JJ possible) (SBAR (S (NP (PRP they)) (VP (VBP behave) (ADVP (RB badly)) (PP (IN in) (NP (JJ other) (NNS ways))))))))) (. .)))

root(ROOT-0, visible-4)
nsubj(visible-4, They-1)
cop(visible-4, 're-2)
advmod(visible-4, still-3)
det(state-7, this-6)
prep_in(visible-4, state-7)
advmod(pinned-10, evidently-9)
dep(state-7, pinned-10)
ccomp(pinned-10, takes-11)
dobj(takes-11, precedence-12)
nsubj(possible-18, it-16)
cop(possible-18, 's-17)
conj_but(visible-4, possible-18)
nsubj(behave-20, they-19)
ccomp(possible-18, behave-20)
advmod(behave-20, badly-21)
amod(ways-24, other-23)
prep_in(behave-20, ways-24)

So/IN I/PRP guess/VBP there/EX 's/VBZ really/RB two/CD issues/NNS here/RB :/: Panorama/NNP should/MD never/RB put/VB tabs/NNS in/IN that/DT state/NN ,/, and/CC also/RB it/PRP probably/RB should/MD n't/RB even/RB be/VB possible/JJ to/TO do/VB so/RB ./. 

(ROOT (S (S (IN So) (NP (PRP I)) (VP (VBP guess) (SBAR (S (NP (EX there)) (VP (VBZ 's) (ADVP (RB really)) (ADVP (NP (CD two) (NNS issues)) (RB here))))))) (: :) (S (NP (NNP Panorama)) (VP (MD should) (ADVP (RB never)) (VP (VB put) (NP (NNS tabs)) (PP (IN in) (NP (DT that) (NN state)))))) (, ,) (CC and) (ADVP (RB also)) (S (NP (PRP it)) (ADVP (RB probably)) (VP (MD should) (RB n't) (ADVP (RB even)) (VP (VB be) (ADJP (JJ possible) (S (VP (TO to) (VP (VB do) (ADVP (RB so))))))))) (. .)))

root(ROOT-0, guess-3)
dep(guess-3, So-1)
nsubj(guess-3, I-2)
expl('s-5, there-4)
ccomp(guess-3, 's-5)
advmod('s-5, really-6)
num(issues-8, two-7)
npadvmod(here-9, issues-8)
advmod('s-5, here-9)
nsubj(put-14, Panorama-11)
aux(put-14, should-12)
neg(put-14, never-13)
conj_and(guess-3, put-14)
dobj(put-14, tabs-15)
det(state-18, that-17)
prep_in(put-14, state-18)
advmod(possible-28, also-21)
nsubj(possible-28, it-22)
advmod(possible-28, probably-23)
aux(possible-28, should-24)
neg(possible-28, n't-25)
advmod(possible-28, even-26)
cop(possible-28, be-27)
conj_and(guess-3, possible-28)
aux(do-30, to-29)
xcomp(possible-28, do-30)
advmod(do-30, so-31)

This/DT bug/NN is/VBZ for/IN the/DT former/JJ ;/: bug/NN 597218/CD is/VBZ for/IN the/DT latter/JJ ./. 

(ROOT (S (S (NP (DT This) (NN bug)) (VP (VBZ is) (PP (IN for) (NP (DT the) (JJ former))))) (: ;) (S (NP (NN bug) (CD 597218)) (VP (VBZ is) (PP (IN for) (NP (DT the) (JJ latter))))) (. .)))

root(ROOT-0, is-3)
det(bug-2, This-1)
nsubj(is-3, bug-2)
det(former-6, the-5)
prep_for(is-3, former-6)
nsubj(is-10, bug-8)
num(bug-8, 597218-9)
parataxis(is-3, is-10)
det(latter-13, the-12)
prep_for(is-10, latter-13)

