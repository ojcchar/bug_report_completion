ResolveKeyword/NNP is/VBZ currently/RB declared/VBN as/IN 

(ROOT (S (NP (NNP ResolveKeyword)) (VP (VBZ is) (ADVP (RB currently)) (VP (VBN declared) (PP (IN as))))))

root(ROOT-0, declared-4)
nsubjpass(declared-4, ResolveKeyword-1)
auxpass(declared-4, is-2)
advmod(declared-4, currently-3)
prep(declared-4, as-5)

string/NN resolveKeyword/NN (/-LRB- in/IN wstring/VBG aName/NN ,/, out/IN wstring/VBG aPostData/NN )/-RRB- 

(ROOT (PRN (S (NP (NP (NN string) (NN resolveKeyword)) (-LRB- -LRB-) (PP (IN in))) (VP (VBG wstring) (NP (NN aName)) (, ,) (PP (IN out) (S (VP (VBG wstring) (NP (NN aPostData))))))) (-RRB- -RRB-)))

root(ROOT-0, wstring-5)
nn(resolveKeyword-2, string-1)
nsubj(wstring-5, resolveKeyword-2)
prep(resolveKeyword-2, in-4)
dobj(wstring-5, aName-6)
prepc_out(wstring-5, wstring-9)
dobj(wstring-9, aPostData-10)

What/WP it/PRP returns/VBZ is/VBZ actually/RB in/IN UTF-8/NN so/IN that/IN we/PRP 'd/MD better/RB declare/VB it/PRP as/IN 

(ROOT (SBAR (WHNP (WP What)) (S (NP (PRP it)) (VP (VBZ returns) (SBAR (S (VP (VBZ is) (ADVP (RB actually)) (PP (IN in) (NP (NN UTF-8))) (SBAR (IN so) (IN that) (S (NP (PRP we)) (VP (MD 'd) (ADVP (RB better)) (VP (VB declare) (NP (PRP it)) (PP (IN as)))))))))))))

root(ROOT-0, returns-3)
dobj(returns-3, What-1)
nsubj(returns-3, it-2)
ccomp(returns-3, is-4)
advmod(is-4, actually-5)
prep_in(is-4, UTF-8-7)
mark(declare-13, so-8)
mark(declare-13, that-9)
nsubj(declare-13, we-10)
aux(declare-13, 'd-11)
advmod(declare-13, better-12)
advcl(is-4, declare-13)
dobj(declare-13, it-14)
prep(declare-13, as-15)

AUTF8String/VBG resolveKeyword/NN (/-LRB- in/IN wstring/VBG aName/NN ,/, out/IN AString/VBG aPostData/NN )/-RRB- 

(ROOT (S (VP (VBG AUTF8String) (NP (NP (NN resolveKeyword)) (PRN (-LRB- -LRB-) (PP (IN in) (S (VP (VBG wstring) (NP (NN aName)) (, ,) (PP (IN out) (S (VP (VBG AString) (NP (NN aPostData)))))))) (-RRB- -RRB-))))))

root(ROOT-0, AUTF8String-1)
dobj(AUTF8String-1, resolveKeyword-2)
prepc_in(resolveKeyword-2, wstring-5)
dobj(wstring-5, aName-6)
prepc_out(wstring-5, AString-9)
dobj(AString-9, aPostData-10)

With/IN that/DT ,/, we/PRP can/MD avoid/VB ToNewUnicode/NNP and/CC ToNewUTF8String/NN in/IN actual/JJ implementations.Moreover/NNP ,/, the/DT string/NN conversion/NN across/IN XPConnect/NN will/MD be/VB done/VBN properly/RB instead/RB of/IN '/`` blind/JJ inflation/NN '/'' ./. 

(ROOT (S (PP (IN With) (NP (DT that))) (PRN (, ,) (S (NP (PRP we)) (VP (MD can) (VP (VB avoid) (NP (NP (NNP ToNewUnicode)) (CC and) (NP (NN ToNewUTF8String))) (PP (IN in) (NP (JJ actual) (NNP implementations.Moreover)))))) (, ,)) (NP (NP (DT the) (NN string) (NN conversion)) (PP (IN across) (NP (NN XPConnect)))) (VP (MD will) (VP (VB be) (VP (VBN done) (ADVP (RB properly)) (PP (RB instead) (PP (IN of) (`` `) (NP (JJ blind) (NN inflation)) ('' ')))))) (. .)))

root(ROOT-0, done-21)
prep_with(done-21, that-2)
nsubj(avoid-6, we-4)
aux(avoid-6, can-5)
parataxis(done-21, avoid-6)
dobj(avoid-6, ToNewUnicode-7)
dobj(avoid-6, ToNewUTF8String-9)
conj_and(ToNewUnicode-7, ToNewUTF8String-9)
amod(implementations.Moreover-12, actual-11)
prep_in(avoid-6, implementations.Moreover-12)
det(conversion-16, the-14)
nn(conversion-16, string-15)
nsubjpass(done-21, conversion-16)
prep_across(conversion-16, XPConnect-18)
aux(done-21, will-19)
auxpass(done-21, be-20)
advmod(done-21, properly-22)
amod(inflation-27, blind-26)
prep_instead_of(done-21, inflation-27)

