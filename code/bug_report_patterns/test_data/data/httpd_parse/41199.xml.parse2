Hi/NN ,/, 

(ROOT (FRAG (PP (NN Hi)) (, ,)))

root(ROOT-0, Hi-1)

When/WRB the/DT following/VBG happens/VBZ in/IN httpd/NN 2.0.52/CD ,/, 

(ROOT (SBARQ (WHADVP (WRB When)) (S (NP (DT the) (VBG following)) (VP (VBZ happens) (PP (IN in) (NP (NN httpd) (CD 2.0.52)) (, ,))))))

root(ROOT-0, happens-4)
advmod(happens-4, When-1)
nsubj(happens-4, the-2)
amod(the-2, following-3)
prep_in(happens-4, httpd-6)
num(httpd-6, 2.0.52-7)

-/: cgi/NN is/VBZ launched/VBN 

(ROOT (PRN (: -) (S (NP (NN cgi)) (VP (VBZ is) (VP (VBN launched))))))

root(ROOT-0, launched-4)
nsubjpass(launched-4, cgi-2)
auxpass(launched-4, is-3)

-/: cgi/NN launches/VBZ a/DT helper/NN process/NN 

(ROOT (PRN (: -) (S (NP (NN cgi)) (VP (VBZ launches) (NP (DT a) (NN helper) (NN process))))))

root(ROOT-0, launches-3)
nsubj(launches-3, cgi-2)
det(process-6, a-4)
nn(process-6, helper-5)
dobj(launches-3, process-6)

-/: helper/NN process/NN does/VBZ stuff/NN for/IN a/DT too/RB long/JJ time/NN 

(ROOT (PRN (: -) (S (NP (NN helper) (NN process)) (VP (VBZ does) (NP (NP (NN stuff)) (PP (IN for) (NP (DT a) (ADJP (RB too) (JJ long)) (NN time))))))))

root(ROOT-0, does-4)
nn(process-3, helper-2)
nsubj(does-4, process-3)
dobj(does-4, stuff-5)
det(time-10, a-7)
advmod(long-9, too-8)
amod(time-10, long-9)
prep_for(stuff-5, time-10)

-/: apache/NN httpd/NN kills/VBZ cgi/NN process/NN 

(ROOT (PRN (: -) (S (NP (NN apache) (NN httpd)) (VP (VBZ kills) (NP (NN cgi) (NN process))))))

root(ROOT-0, kills-4)
nn(httpd-3, apache-2)
nsubj(kills-4, httpd-3)
nn(process-6, cgi-5)
dobj(kills-4, process-6)

then/RB 

(ROOT (ADVP (RB then)))

root(ROOT-0, then-1)

-/: helper/NN process/NN still/RB runs/VBZ (/-LRB- I/PRP 'd/MD expect/VB it/PRP to/TO be/VB dead/JJ ,/, too/RB )/-RRB- 

(ROOT (PRN (: -) (S (NP (NN helper) (NN process)) (ADVP (RB still)) (VP (VP (VBZ runs)) (PRN (-LRB- -LRB-) (S (NP (PRP I)) (VP (MD 'd) (VP (VB expect) (S (NP (PRP it)) (VP (TO to) (VP (VB be) (ADJP (JJ dead)) (, ,) (ADVP (RB too)))))))) (-RRB- -RRB-))))))

root(ROOT-0, runs-5)
nn(process-3, helper-2)
nsubj(runs-5, process-3)
advmod(runs-5, still-4)
nsubj(expect-9, I-7)
aux(expect-9, 'd-8)
parataxis(runs-5, expect-9)
dobj(expect-9, it-10)
aux(dead-13, to-11)
cop(dead-13, be-12)
xcomp(expect-9, dead-13)
advmod(dead-13, too-15)

Maybe/RB it/PRP would/MD make/VB sense/NN to/TO kill/VB the/DT process/NN group/NN instead/RB (/-LRB- using/VBG the/DT cgi/NN pgid/NN )/-RRB- (/-LRB- I/PRP 'm/VBP not/RB sure/JJ about/IN all/PDT the/DT implications/NNS )/-RRB- ./. 

(ROOT (S (ADVP (RB Maybe)) (NP (PRP it)) (VP (MD would) (VP (VB make) (NP (NP (NP (NN sense) (S (VP (TO to) (VP (VB kill) (NP (DT the) (NN process) (NN group)) (ADVP (RB instead)))))) (PRN (-LRB- -LRB-) (VP (VBG using) (NP (DT the) (NN cgi) (NN pgid))) (-RRB- -RRB-))) (PRN (-LRB- -LRB-) (S (NP (PRP I)) (VP (VBP 'm) (RB not) (ADJP (JJ sure) (PP (IN about) (NP (PDT all) (DT the) (NNS implications)))))) (-RRB- -RRB-))))) (. .)))

root(ROOT-0, make-4)
advmod(make-4, Maybe-1)
nsubj(make-4, it-2)
aux(make-4, would-3)
dobj(make-4, sense-5)
aux(kill-7, to-6)
vmod(sense-5, kill-7)
det(group-10, the-8)
nn(group-10, process-9)
dobj(kill-7, group-10)
advmod(kill-7, instead-11)
dep(sense-5, using-13)
det(pgid-16, the-14)
nn(pgid-16, cgi-15)
dobj(using-13, pgid-16)
nsubj(sure-22, I-19)
cop(sure-22, 'm-20)
neg(sure-22, not-21)
dep(sense-5, sure-22)
predet(implications-26, all-24)
det(implications-26, the-25)
prep_about(sure-22, implications-26)

i./NNP e./NNP do/VBP :/: 

(ROOT (S (NP (NNP i.) (NNP e.)) (VP (VBP do)) (: :)))

root(ROOT-0, do-3)
nn(e.-2, i.-1)
nsubj(do-3, e.-2)

This/DT seems/VBZ to/TO be/VB the/DT same/JJ in/IN the/DT httpd/NN 2.2.3/CD source/NN I/PRP just/RB downloaded/VBD and/CC read/VBD :/: 

(ROOT (S (NP (DT This)) (VP (VBZ seems) (S (VP (TO to) (VP (VB be) (NP (NP (DT the) (JJ same)) (PP (IN in) (NP (NP (DT the) (NN httpd) (CD 2.2.3) (NN source)) (SBAR (S (NP (PRP I)) (ADVP (RB just)) (VP (VP (VBD downloaded)) (CC and) (VP (VBD read)))))))))))) (: :)))

root(ROOT-0, seems-2)
nsubj(seems-2, This-1)
aux(same-6, to-3)
cop(same-6, be-4)
det(same-6, the-5)
xcomp(seems-2, same-6)
det(source-11, the-8)
nn(source-11, httpd-9)
num(source-11, 2.2.3-10)
prep_in(same-6, source-11)
nsubj(downloaded-14, I-12)
nsubj(read-16, I-12)
advmod(downloaded-14, just-13)
rcmod(source-11, downloaded-14)
rcmod(source-11, read-16)
conj_and(downloaded-14, read-16)

mod_cgi/NN ./. 

(ROOT (NP (NN mod_cgi) (. .)))

root(ROOT-0, mod_cgi-1)

c/NN :465/CD (/-LRB- in/IN run_cgi_child/NN )/-RRB- calls/VBZ :/: apr_pool_note_subprocess/NN (/-LRB- p/NN ,/, procnew/NN ,/, APR_KILL_AFTER_TIMEOUT/NN )/-RRB- ;/: 

(ROOT (S (NP (NP (NN c) (CD :465)) (PRN (-LRB- -LRB-) (PP (IN in) (NP (NN run_cgi_child))) (-RRB- -RRB-))) (VP (VP (VBZ calls)) (: :) (NP (NP (NN apr_pool_note_subprocess)) (PRN (-LRB- -LRB-) (NP (NN p) (, ,) (NN procnew) (, ,) (NN APR_KILL_AFTER_TIMEOUT)) (-RRB- -RRB-)))) (: ;)))

root(ROOT-0, calls-7)
nsubj(calls-7, c-1)
num(c-1, :465-2)
prep_in(c-1, run_cgi_child-5)
dobj(calls-7, apr_pool_note_subprocess-9)
nn(APR_KILL_AFTER_TIMEOUT-15, p-11)
dep(APR_KILL_AFTER_TIMEOUT-15, procnew-13)
appos(apr_pool_note_subprocess-9, APR_KILL_AFTER_TIMEOUT-15)

srclib/apr/memory/JJ //: unix/apr/JJ _/NN pools.c/NN :2136/CD (/-LRB- in/IN free_proc_chain/NN )/-RRB- calls/VBZ :/: if/IN (/-LRB- apr_proc_kill/NN (/-LRB- pc/NN -/: >/JJR proc/NN ,/, SIGTERM/NN )/-RRB- ==/CD APR_SUCCESS/NN )/-RRB- 

(ROOT (NP (NP (NP (JJ srclib/apr/memory)) (PRN (: /) (NP (NP (JJ unix/apr) (NN _) (NN pools.c)) (SBAR (WHNP (NP (CD :2136)) (PRN (-LRB- -LRB-) (PP (IN in) (NP (NN free_proc_chain))) (-RRB- -RRB-))) (S (VP (VBZ calls))))) (: :))) (PP (PP (IN if)) (PRN (-LRB- -LRB-) (NP (NP (NP (NN apr_proc_kill)) (PRN (-LRB- -LRB-) (NP (NN pc)) (: -) (NP (NP (JJR >) (NN proc)) (, ,) (NP (NN SIGTERM))) (-RRB- -RRB-))) (NP (CD ==) (NN APR_SUCCESS))) (-RRB- -RRB-)))))

root(ROOT-0, srclib/apr/memory-1)
punct(pools.c-5, /-2)
amod(pools.c-5, unix/apr-3)
nn(pools.c-5, _-4)
dep(srclib/apr/memory-1, pools.c-5)
nsubj(calls-11, :2136-6)
dep(:2136-6, in-8)
pobj(in-8, free_proc_chain-9)
rcmod(pools.c-5, calls-11)
prep(srclib/apr/memory-1, if-13)
dep(if-13, apr_proc_kill-15)
dep(apr_proc_kill-15, pc-17)
amod(proc-20, >-19)
dep(pc-17, proc-20)
appos(proc-20, SIGTERM-22)
num(APR_SUCCESS-25, ==-24)
dep(apr_proc_kill-15, APR_SUCCESS-25)

//: srclib/apr/threadproc/NN //: unix/signals/NNS ./. 

(ROOT (PRN (: /) (FRAG (X (NN srclib/apr/threadproc)) (: /) (NP (NNS unix/signals))) (. .)))

root(ROOT-0, unix/signals-4)
punct(unix/signals-4, /-1)
dep(unix/signals-4, srclib/apr/threadproc-2)
punct(unix/signals-4, /-3)

c/NN :48/CD (/-LRB- in/IN apr_proc_kill/NN )/-RRB- calls/VBZ :/: if/IN (/-LRB- kill/NN (/-LRB- proc/NN -/: >/JJR pid/NN ,/, signum/NN )/-RRB- ==/CD -1/CD )/-RRB- {/-LRB- 

(ROOT (S (NP (NP (NN c) (CD :48)) (PRN (-LRB- -LRB-) (PP (IN in) (NP (NN apr_proc_kill))) (-RRB- -RRB-))) (VP (VP (VBZ calls)) (: :) (SBAR (IN if) (S (-LRB- -LRB-) (NP (NP (NP (NN kill)) (PRN (-LRB- -LRB-) (NP (NN proc)) (: -) (NP (NP (JJR >) (NN pid)) (, ,) (NP (NN signum))) (-RRB- -RRB-))) (ADJP (CD ==) (CD -1))) (-RRB- -RRB-) (VP (-LRB- -LCB-)))))))

root(ROOT-0, calls-7)
nsubj(calls-7, c-1)
num(c-1, :48-2)
prep_in(c-1, apr_proc_kill-5)
mark(-LCB--23, if-9)
nsubj(-LCB--23, kill-11)
dep(kill-11, proc-13)
amod(pid-16, >-15)
dep(proc-13, pid-16)
appos(pid-16, signum-18)
number(-1-21, ==-20)
amod(kill-11, -1-21)

Which/WDT means/VBZ if/IN there/EX were/VBD any/DT helper/NN processes/VBZ spawned/VBN by/IN the/DT cgi/NN ,/, they/PRP will/MD survive/VB ./. 

(ROOT (S (SBAR (WHNP (WDT Which)) (S (VP (VBZ means) (SBAR (IN if) (S (NP (EX there)) (VP (VBD were) (NP (NP (DT any) (NN helper)) (SBAR (S (VP (VBZ processes) (VP (VBN spawned) (PP (IN by) (NP (DT the) (NN cgi)))))))))))))) (, ,) (NP (PRP they)) (VP (MD will) (VP (VB survive))) (. .)))

root(ROOT-0, survive-16)
nsubj(means-2, Which-1)
advcl(survive-16, means-2)
mark(were-5, if-3)
expl(were-5, there-4)
advcl(means-2, were-5)
det(helper-7, any-6)
nsubj(were-5, helper-7)
rcmod(helper-7, processes-8)
dep(processes-8, spawned-9)
det(cgi-12, the-11)
prep_by(spawned-9, cgi-12)
nsubj(survive-16, they-14)
aux(survive-16, will-15)

Which/WDT I/PRP find/VBP strange/JJ . . ./: 

(ROOT (SBAR (WHNP (WHNP (WDT Which)) (NP (PRP I))) (S (VP (VBP find) (ADJP (JJ strange)))) (: ...)))

root(ROOT-0, find-3)
nsubj(find-3, Which-1)
dep(Which-1, I-2)
acomp(find-3, strange-4)

kill/NN (/-LRB- )/-RRB- with/IN a/DT negated/VBN pid/NN would/MD kill/VB the/DT entire/JJ process/NN group/NN ,/, which/WDT would/MD be/VB preferrable/JJ ./. 

(ROOT (FRAG (NP (NN kill)) (SBAR (LST (-LRB- -LRB-) (-RRB- -RRB-)) (IN with) (S (NP (DT a) (VBN negated) (NN pid)) (VP (MD would) (VP (VB kill) (NP (NP (DT the) (JJ entire) (NN process) (NN group)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (MD would) (VP (VB be) (ADJP (JJ preferrable)))))))))) (. .))))

root(ROOT-0, kill-1)
mark(kill-9, with-4)
det(pid-7, a-5)
amod(pid-7, negated-6)
nsubj(kill-9, pid-7)
aux(kill-9, would-8)
dep(kill-1, kill-9)
det(group-13, the-10)
amod(group-13, entire-11)
nn(group-13, process-12)
dobj(kill-9, group-13)
nsubj(preferrable-18, which-15)
aux(preferrable-18, would-16)
cop(preferrable-18, be-17)
rcmod(group-13, preferrable-18)

