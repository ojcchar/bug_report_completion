When/WRB I/PRP 'm/VBP compiling/VBG '/`` mod_fastcgi-2/JJ .4.2/NN '/'' in/IN any/DT Apache/NNP v2/NN .2/NN +/CC ,/, I/PRP 'm/VBP getting/VBG error/NN messages/NNS in/IN '/`` mod_fastcgi/NNS ./. 

(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP I)) (VP (VBP 'm) (VP (VBG compiling) (S (NP (NP (`` `) (JJ mod_fastcgi-2) (NN .4.2) ('' ')) (PP (IN in) (NP (DT any) (NNP Apache) (NN v2) (NN .2)))) (NP (CC +))))))) (, ,) (NP (PRP I)) (VP (VBP 'm) (VP (VBG getting) (NP (NN error) (NNS messages)) (PP (IN in) (`` `) (NP (NNS mod_fastcgi))))) (. .)))

root(ROOT-0, getting-18)
advmod(compiling-4, When-1)
nsubj(compiling-4, I-2)
aux(compiling-4, 'm-3)
advcl(getting-18, compiling-4)
amod(.4.2-7, mod_fastcgi-2-6)
nsubj(+-14, .4.2-7)
det(.2-13, any-10)
nn(.2-13, Apache-11)
nn(.2-13, v2-12)
prep_in(.4.2-7, .2-13)
xcomp(compiling-4, +-14)
nsubj(getting-18, I-16)
aux(getting-18, 'm-17)
nn(messages-20, error-19)
dobj(getting-18, messages-20)
prep_in(getting-18, mod_fastcgi-23)

c/NN '/POS like/IN this/DT -/: >/JJR '/`` mod_fastcgi/NNS ./. 

(ROOT (NP (NP (NP (NN c) (POS ')) (PP (IN like) (NP (DT this)))) (: -) (NP (NP (JJR >)) (`` `) (NP (NNS mod_fastcgi))) (. .)))

root(ROOT-0, c-1)
prep_like(c-1, this-4)
dep(c-1, >-6)
dep(>-6, mod_fastcgi-8)

c/NN :270/CD :/: error/NN '/`` ap_null_cleanup/NN '/'' undeclared/JJ (/-LRB- first/JJ use/NN in/IN this/DT function/NN )/-RRB- '/'' ./. 

(ROOT (NP (NP (NP (NN c)) (SBAR (S (NP (NP (CD :270)) (: :) (ADVP (NN error)) (NP (NP (`` `) (NN ap_null_cleanup) ('' ')) (ADJP (ADJP (JJ undeclared)) (PRN (-LRB- -LRB-) (NP (NP (JJ first) (NN use)) (PP (IN in) (NP (DT this) (NN function)))) (-RRB- -RRB-)))) ('' '))))) (. .)))

root(ROOT-0, c-1)
rcmod(c-1, :270-2)
advmod(:270-2, error-4)
dep(:270-2, ap_null_cleanup-6)
amod(ap_null_cleanup-6, undeclared-8)
amod(use-11, first-10)
dep(undeclared-8, use-11)
det(function-14, this-13)
prep_in(use-11, function-14)

I/PRP know/VBP ,/, this/DT is/VBZ n't/RB an/DT Apache/NNP problem/NN ,/, but/CC I/PRP can/MD write/VB solution/NN only/RB here/RB ,/, because/IN many/JJ people/NNS can/MD get/VB this/DT trouble/NN ./. 

(ROOT (S (S (NP (PRP I)) (VP (VBP know))) (PRN (, ,) (S (NP (DT this)) (VP (VBZ is) (RB n't) (NP (DT an) (NNP Apache) (NN problem)))) (, ,)) (CC but) (S (NP (PRP I)) (VP (MD can) (VP (VB write) (NP (NN solution)) (ADVP (RB only)) (ADVP (RB here)) (, ,) (SBAR (IN because) (S (NP (JJ many) (NNS people)) (VP (MD can) (VP (VB get) (NP (DT this) (NN trouble))))))))) (. .)))

root(ROOT-0, know-2)
nsubj(know-2, I-1)
nsubj(problem-9, this-4)
cop(problem-9, is-5)
neg(problem-9, n't-6)
det(problem-9, an-7)
nn(problem-9, Apache-8)
dep(know-2, problem-9)
nsubj(write-14, I-12)
aux(write-14, can-13)
conj_but(know-2, write-14)
dobj(write-14, solution-15)
advmod(write-14, only-16)
advmod(write-14, here-17)
mark(get-23, because-19)
amod(people-21, many-20)
nsubj(get-23, people-21)
aux(get-23, can-22)
advcl(write-14, get-23)
det(trouble-25, this-24)
dobj(get-23, trouble-25)

I/PRP believe/VBP it/PRP is/VBZ suitable/JJ for/IN inclusion/NN in/IN the/DT official/JJ code/NN base/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VBP believe) (SBAR (S (NP (PRP it)) (VP (VBZ is) (ADJP (JJ suitable) (PP (IN for) (NP (NP (NN inclusion)) (PP (IN in) (NP (DT the) (JJ official) (NN code) (NN base)))))))))) (. .)))

root(ROOT-0, believe-2)
nsubj(believe-2, I-1)
nsubj(suitable-5, it-3)
cop(suitable-5, is-4)
ccomp(believe-2, suitable-5)
prep_for(suitable-5, inclusion-7)
det(base-12, the-9)
amod(base-12, official-10)
nn(base-12, code-11)
prep_in(inclusion-7, base-12)

Restore/VB definitions/NNS ,/, I/PRP guess/VBP is/VBZ a/DT most/RBS suitable/JJ way/NN to/TO do/VB this/DT ./. 

(ROOT (S (S (VP (VB Restore) (NP (NNS definitions)))) (, ,) (NP (PRP I)) (VP (VBP guess) (SBAR (S (VP (VBZ is) (NP (DT a) (ADJP (RBS most) (JJ suitable)) (NN way) (S (VP (TO to) (VP (VB do) (NP (DT this)))))))))) (. .)))

root(ROOT-0, guess-5)
ccomp(guess-5, Restore-1)
dobj(Restore-1, definitions-2)
nsubj(guess-5, I-4)
cop(way-10, is-6)
det(way-10, a-7)
advmod(suitable-9, most-8)
amod(way-10, suitable-9)
ccomp(guess-5, way-10)
aux(do-12, to-11)
vmod(way-10, do-12)
dobj(do-12, this-13)

Solution/NN ./. 

(ROOT (NP (NN Solution) (. .)))

root(ROOT-0, Solution-1)

=========/NN 

(ROOT (NP (NN =========)))

root(ROOT-0, =========-1)

As/IN I/PRP see/VBP ,/, in/IN Apache/NNP 2.2/CD and/CC later/RB ,/, previously/RB (/-LRB- in/IN 2.0/CD )/-RRB- deprecated/JJ definitions/NNS 

(ROOT (SBAR (IN As) (S (S (NP (PRP I)) (VP (VBP see) (, ,) (PP (IN in) (NP (NNP Apache) (CD 2.2))))) (CC and) (S (NP (NP (NP (RB later)) (, ,) (ADVP (RB previously))) (PRN (-LRB- -LRB-) (NP (QP (IN in) (CD 2.0))) (-RRB- -RRB-))) (NP (JJ deprecated) (NNS definitions))))))

root(ROOT-0, see-3)
mark(see-3, As-1)
nsubj(see-3, I-2)
prep_in(see-3, Apache-6)
num(Apache-6, 2.2-7)
dep(definitions-17, later-9)
advmod(later-9, previously-11)
quantmod(2.0-14, in-13)
dep(later-9, 2.0-14)
amod(definitions-17, deprecated-16)
conj_and(see-3, definitions-17)

was/VBD dropped/VBN ./. 

(ROOT (S (VP (VBD was) (VP (VBN dropped))) (. .)))

root(ROOT-0, dropped-2)
auxpass(dropped-2, was-1)

But/CC ,/, in/IN the/DT same/JJ time/NN ,/, '/`` mod_fastcgi-2/JJ .4.2/NN '/'' still/RB need/VB it/PRP ./. 

(ROOT (S (CC But) (, ,) (PP (IN in) (NP (DT the) (JJ same) (NN time))) (, ,) (S (NP (`` `) (JJ mod_fastcgi-2) (NN .4.2) ('' ')) (ADVP (RB still)) (VP (VB need) (NP (PRP it)))) (. .)))

root(ROOT-0, need-13)
cc(need-13, But-1)
det(time-6, the-4)
amod(time-6, same-5)
prep_in(need-13, time-6)
amod(.4.2-10, mod_fastcgi-2-9)
nsubj(need-13, .4.2-10)
advmod(need-13, still-12)
dobj(need-13, it-14)

I/PRP solved/VBD a/DT problem/NN bay/NN adding/VBG following/VBG lines/NNS in/IN '/`` fcgi.h/NN '/'' in/IN source/NN code/NN of/IN 

(ROOT (S (NP (PRP I)) (VP (VBD solved) (NP (DT a) (NN problem) (NN bay)) (S (VP (VBG adding) (NP (VBG following) (NNS lines)) (PP (IN in) (`` `) (NP (NN fcgi.h)) ('' ')) (PP (IN in) (NP (NP (NN source) (NN code)) (PP (IN of)))))))))

root(ROOT-0, solved-2)
nsubj(solved-2, I-1)
det(bay-5, a-3)
nn(bay-5, problem-4)
dobj(solved-2, bay-5)
xcomp(solved-2, adding-6)
amod(lines-8, following-7)
dobj(adding-6, lines-8)
prep_in(adding-6, fcgi.h-11)
nn(code-15, source-14)
prep_in(adding-6, code-15)
prep(code-15, of-16)

'/`` mod_fastcgi/NNS '/POS ./. 

(ROOT (S (`` `) (NP (NNS mod_fastcgi)) (VP (POS ')) (. .)))

nsubj('-3, mod_fastcgi-2)

You/PRP should/MD paste/VB this/DT lines/NNS from/IN line/NN 75/CD ,/, after/IN '/'' #define/NN 

(ROOT (S (NP (PRP You)) (VP (MD should) (VP (VB paste) (NP (DT this) (NNS lines)) (PP (IN from) (NP (NN line) (CD 75))) (, ,) (PP (IN after) ('' ') (NP (NN #define)))))))

root(ROOT-0, paste-3)
nsubj(paste-3, You-1)
aux(paste-3, should-2)
det(lines-5, this-4)
dobj(paste-3, lines-5)
prep_from(paste-3, line-7)
num(line-7, 75-8)
prep_after(paste-3, #define-12)

ap_unblock_alarms/NNS (/-LRB- )/-RRB- '/'' in/IN the/DT block/NN of/IN obsolete/JJ function/NN definitions/NNS ./. 

(ROOT (S (NP (NNS ap_unblock_alarms)) (VP (-LRB- -LRB-) (-RRB- -RRB-) ('' ') (PP (IN in)) (NP (NP (DT the) (NN block)) (PP (IN of) (NP (JJ obsolete) (NN function) (NNS definitions))))) (. .)))

root(ROOT-0, block-7)
nsubj(block-7, ap_unblock_alarms-1)
prep(block-7, in-5)
det(block-7, the-6)
amod(definitions-11, obsolete-9)
nn(definitions-11, function-10)
prep_of(block-7, definitions-11)

------------/JJ cut/NN here/RB --------------/CD 

(ROOT (FRAG (NP (JJ ------------) (NN cut)) (NP (RB here) (CD --------------))))

root(ROOT-0, cut-2)
amod(cut-2, -------------1)
advmod(---------------4, here-3)
dep(cut-2, ---------------4)

#ifndef/NN ap_copy_table/JJ 

(ROOT (ADJP (NP (NN #ifndef)) (JJ ap_copy_table)))

root(ROOT-0, ap_copy_table-2)
npadvmod(ap_copy_table-2, #ifndef-1)

#define/JJ ap_copy_table/JJ apr_table_copy/NN 

(ROOT (FRAG (NP (JJ #define) (JJ ap_copy_table) (NN apr_table_copy))))

root(ROOT-0, apr_table_copy-3)
amod(apr_table_copy-3, #define-1)
amod(apr_table_copy-3, ap_copy_table-2)

#define/NN ap_cpystrn/NN apr_cpystrn/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_cpystrn) (NN apr_cpystrn))))

root(ROOT-0, #define-1)
nn(apr_cpystrn-3, ap_cpystrn-2)
dep(#define-1, apr_cpystrn-3)

#define/NN ap_destroy_pool/NN apr_pool_destroy/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_destroy_pool) (NN apr_pool_destroy))))

root(ROOT-0, #define-1)
nn(apr_pool_destroy-3, ap_destroy_pool-2)
dep(#define-1, apr_pool_destroy-3)

#define/NN ap_isspace/NN apr_isspace/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_isspace) (NN apr_isspace))))

root(ROOT-0, #define-1)
nn(apr_isspace-3, ap_isspace-2)
dep(#define-1, apr_isspace-3)

#define/NN ap_make_array/NN apr_array_make/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_make_array) (NN apr_array_make))))

root(ROOT-0, #define-1)
nn(apr_array_make-3, ap_make_array-2)
dep(#define-1, apr_array_make-3)

#define/NN ap_make_table/JJ apr_table_make/NN 

(ROOT (NP (NP (NN #define)) (NP (JJ ap_make_table) (NN apr_table_make))))

root(ROOT-0, #define-1)
amod(apr_table_make-3, ap_make_table-2)
dep(#define-1, apr_table_make-3)

#define/NN ap_null_cleanup/NN apr_pool_cleanup_null/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_null_cleanup) (NN apr_pool_cleanup_null))))

root(ROOT-0, #define-1)
nn(apr_pool_cleanup_null-3, ap_null_cleanup-2)
dep(#define-1, apr_pool_cleanup_null-3)

#define/NN ap_palloc/NN apr_palloc/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_palloc) (NN apr_palloc))))

root(ROOT-0, #define-1)
nn(apr_palloc-3, ap_palloc-2)
dep(#define-1, apr_palloc-3)

#define/NN ap_pcalloc/NN apr_pcalloc/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_pcalloc) (NN apr_pcalloc))))

root(ROOT-0, #define-1)
nn(apr_pcalloc-3, ap_pcalloc-2)
dep(#define-1, apr_pcalloc-3)

#define/NN ap_psprintf/NN apr_psprintf/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_psprintf) (NN apr_psprintf))))

root(ROOT-0, #define-1)
nn(apr_psprintf-3, ap_psprintf-2)
dep(#define-1, apr_psprintf-3)

#define/JJ ap_pstrcat/NN apr_pstrcat/NN 

(ROOT (FRAG (NP (JJ #define) (NN ap_pstrcat) (NN apr_pstrcat))))

root(ROOT-0, apr_pstrcat-3)
amod(apr_pstrcat-3, #define-1)
nn(apr_pstrcat-3, ap_pstrcat-2)

#define/NN ap_pstrdup/NN apr_pstrdup/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_pstrdup) (NN apr_pstrdup))))

root(ROOT-0, #define-1)
nn(apr_pstrdup-3, ap_pstrdup-2)
dep(#define-1, apr_pstrdup-3)

#define/NN ap_pstrndup/NN apr_pstrndup/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_pstrndup) (NN apr_pstrndup))))

root(ROOT-0, #define-1)
nn(apr_pstrndup-3, ap_pstrndup-2)
dep(#define-1, apr_pstrndup-3)

#define/JJ ap_push_array/NN apr_array_push/NN 

(ROOT (FRAG (NP (JJ #define) (NN ap_push_array) (NN apr_array_push))))

root(ROOT-0, apr_array_push-3)
amod(apr_array_push-3, #define-1)
nn(apr_array_push-3, ap_push_array-2)

#define/NN ap_register_cleanup/NN apr_pool_cleanup_register/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_register_cleanup) (NN apr_pool_cleanup_register))))

root(ROOT-0, #define-1)
nn(apr_pool_cleanup_register-3, ap_register_cleanup-2)
dep(#define-1, apr_pool_cleanup_register-3)

#define/NN ap_snprintf/NN apr_snprintf/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_snprintf) (NN apr_snprintf))))

root(ROOT-0, #define-1)
nn(apr_snprintf-3, ap_snprintf-2)
dep(#define-1, apr_snprintf-3)

#define/JJ ap_table_add/NN apr_table_add/NN 

(ROOT (FRAG (NP (JJ #define) (NN ap_table_add) (NN apr_table_add))))

root(ROOT-0, apr_table_add-3)
amod(apr_table_add-3, #define-1)
nn(apr_table_add-3, ap_table_add-2)

#define/NN ap_table_do/NN apr_table_do/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_table_do) (NN apr_table_do))))

root(ROOT-0, #define-1)
nn(apr_table_do-3, ap_table_do-2)
dep(#define-1, apr_table_do-3)

#define/NN ap_table_get/NN apr_table_get/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_table_get) (NN apr_table_get))))

root(ROOT-0, #define-1)
nn(apr_table_get-3, ap_table_get-2)
dep(#define-1, apr_table_get-3)

#define/NN ap_table_set/NN apr_table_set/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_table_set) (NN apr_table_set))))

root(ROOT-0, #define-1)
nn(apr_table_set-3, ap_table_set-2)
dep(#define-1, apr_table_set-3)

#define/NN ap_table_setn/NN apr_table_setn/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_table_setn) (NN apr_table_setn))))

root(ROOT-0, #define-1)
nn(apr_table_setn-3, ap_table_setn-2)
dep(#define-1, apr_table_setn-3)

#define/NN ap_table_unset/NN apr_table_unset/NN 

(ROOT (NP (NP (NN #define)) (NP (NN ap_table_unset) (NN apr_table_unset))))

root(ROOT-0, #define-1)
nn(apr_table_unset-3, ap_table_unset-2)
dep(#define-1, apr_table_unset-3)

#endif/NN 

(ROOT (NP (NN #endif)))

root(ROOT-0, #endif-1)

------------/JJ cut/NN here/RB -------------/CD 

(ROOT (FRAG (NP (JJ ------------) (NN cut)) (NP (RB here) (CD -------------))))

root(ROOT-0, cut-2)
amod(cut-2, -------------1)
advmod(--------------4, here-3)
dep(cut-2, --------------4)

