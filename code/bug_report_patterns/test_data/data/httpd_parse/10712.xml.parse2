Ever/RB since/IN I/PRP turned/VBD the/DT LogLevel/NNP from/IN '/`` warn/VB '/'' to/TO '/`` info/NN '/'' ,/, I/PRP 've/VBP received/VBN thousands/NNS of/IN the/DT following/VBG messages/NNS in/IN httpd-error/NN ./. 

(ROOT (S (SBAR (RB Ever) (IN since) (S (NP (PRP I)) (VP (VBD turned) (NP (NP (DT the) (NNP LogLevel)) (PP (IN from) (VP (`` `) (VB warn) ('' ') (PP (TO to) (`` `) (NP (NN info)) ('' ')))))))) (, ,) (NP (PRP I)) (VP (VBP 've) (VP (VBN received) (NP (NP (NNS thousands)) (PP (IN of) (NP (NP (DT the) (VBG following) (NNS messages)) (PP (IN in) (NP (NN httpd-error)))))))) (. .)))

root(ROOT-0, received-18)
advmod(turned-4, Ever-1)
mark(turned-4, since-2)
nsubj(turned-4, I-3)
advcl(received-18, turned-4)
det(LogLevel-6, the-5)
dobj(turned-4, LogLevel-6)
prep(LogLevel-6, from-7)
dep(from-7, warn-9)
prep_to(warn-9, info-13)
nsubj(received-18, I-16)
aux(received-18, 've-17)
dobj(received-18, thousands-19)
det(messages-23, the-21)
amod(messages-23, following-22)
prep_of(thousands-19, messages-23)
prep_in(messages-23, httpd-error-25)

log/NN 

(ROOT (NP (NN log)))

root(ROOT-0, log-1)

"/`` [/-LRB- info/NN ]/-RRB- (/-LRB- 57/CD )/-RRB- Socket/NN is/VBZ not/RB connected/VBN :/: core_output_filter/NN :/: writing/VBG data/NNS to/TO the/DT network/NN "/'' 

(ROOT (S (`` ``) (NP (NP (-LRB- -LSB-) (NN info)) (PP (-RRB- -RSB-) (NP (PRN (-LRB- -LRB-) (NP (CD 57)) (-RRB- -RRB-)) (NN Socket)))) (VP (VBZ is) (RB not) (VP (VBN connected) (: :) (NP (NP (NN core_output_filter)) (: :) (S (VP (VBG writing) (NP (NP (NNS data)) (PP (TO to) (NP (DT the) (NN network))) ('' '')))))))))

root(ROOT-0, connected-11)
punct(info-3, -LSB--2)
nsubjpass(connected-11, info-3)
punct(Socket-8, -RSB--4)
appos(Socket-8, 57-6)
prep(info-3, Socket-8)
auxpass(connected-11, is-9)
neg(connected-11, not-10)
dobj(connected-11, core_output_filter-13)
dep(core_output_filter-13, writing-15)
dobj(writing-15, data-16)
det(network-19, the-18)
prep_to(data-16, network-19)

"/`` [/-LRB- info/NN ]/-RRB- (/-LRB- 32/CD )/-RRB- Broken/NNP pipe/NN :/: core_output_filter/NN :/: writing/VBG data/NNS to/TO the/DT network/NN "/'' 

(ROOT (S (`` ``) (NP (-LRB- -LSB-) (NN info)) (VP (-RRB- -RSB-) (PRN (-LRB- -LRB-) (NP-TMP (CD 32)) (-RRB- -RRB-)) (NP (NP (NNP Broken) (NN pipe)) (: :) (NP (NN core_output_filter)) (: :) (S (VP (VBG writing) (NP (NNS data)) (PP (TO to) (NP (DT the) (NN network))))))) ('' '')))

root(ROOT-0, pipe-9)
punct(info-3, -LSB--2)
nsubj(pipe-9, info-3)
punct(pipe-9, -RSB--4)
dep(pipe-9, 32-6)
nn(pipe-9, Broken-8)
dep(pipe-9, core_output_filter-11)
dep(pipe-9, writing-13)
dobj(writing-13, data-14)
det(network-17, the-16)
prep_to(writing-13, network-17)

This/DT ca/MD n't/RB be/VB a/DT good/JJ thing/NN ./. 

(ROOT (S (NP (DT This)) (VP (MD ca) (RB n't) (VP (VB be) (NP (DT a) (JJ good) (NN thing)))) (. .)))

root(ROOT-0, thing-7)
nsubj(thing-7, This-1)
aux(thing-7, ca-2)
neg(thing-7, n't-3)
cop(thing-7, be-4)
det(thing-7, a-5)
amod(thing-7, good-6)

Please/VB let/VB me/PRP know/VB if/IN you/PRP need/VBP any/DT other/JJ information/NN to/TO be/VB able/JJ to/TO diagnose/VB the/DT problem/NN better/RBR ./. 

(ROOT (S (VP (VB Please) (VP (VB let) (S (NP (PRP me)) (VP (VB know) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP need) (NP (DT any) (JJ other) (NN information) (S (VP (TO to) (VP (VB be) (ADJP (JJ able) (S (VP (TO to) (VP (VB diagnose) (NP (DT the) (NN problem)) (ADVP (RBR better))))))))))))))))) (. .)))

root(ROOT-0, Please-1)
xcomp(Please-1, let-2)
nsubj(know-4, me-3)
ccomp(let-2, know-4)
mark(need-7, if-5)
nsubj(need-7, you-6)
advcl(know-4, need-7)
det(information-10, any-8)
amod(information-10, other-9)
dobj(need-7, information-10)
aux(able-13, to-11)
cop(able-13, be-12)
vmod(information-10, able-13)
aux(diagnose-15, to-14)
xcomp(able-13, diagnose-15)
det(problem-17, the-16)
dobj(diagnose-15, problem-17)
advmod(diagnose-15, better-18)

