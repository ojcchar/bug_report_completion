I/PRP 've/VBP done/VBN a/DT code/NN audit/NN of/IN the/DT suexec.c/JJ file/NN just/RB for/IN fun/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VBP 've) (VP (VBN done) (NP (NP (DT a) (NN code) (NN audit)) (PP (IN of) (NP (DT the) (JJ suexec.c) (NN file)))) (PP (ADVP (RB just)) (IN for) (NP (NN fun))))) (. .)))

root(ROOT-0, done-3)
nsubj(done-3, I-1)
aux(done-3, 've-2)
det(audit-6, a-4)
nn(audit-6, code-5)
dobj(done-3, audit-6)
det(file-10, the-8)
amod(file-10, suexec.c-9)
prep_of(audit-6, file-10)
advmod(done-3, just-11)
prep_for(done-3, fun-13)

Here/RB are/VBP my/PRP$ results/NNS :/: 

(ROOT (SINV (ADVP (RB Here)) (VP (VBP are)) (NP (PRP$ my) (NNS results)) (: :)))

root(ROOT-0, are-2)
advmod(are-2, Here-1)
poss(results-4, my-3)
nsubj(are-2, results-4)

*/SYM you/PRP will/MD have/VB problems/NNS when/WRB sizeof/NN (/-LRB- uid_t/NN )/-RRB- >/JJR sizeof/NN (/-LRB- int/NN )/-RRB- ./. 

(ROOT (FRAG (SBAR (X (SYM *)) (S (NP (PRP you)) (VP (MD will) (VP (VB have) (NP (NP (NNS problems)) (SBAR (WHADVP (WRB when)) (S (NP (NP (NN sizeof)) (PRN (-LRB- -LRB-) (NP (NN uid_t)) (-RRB- -RRB-))) (NP (NP (JJR >) (NN sizeof)) (PRN (-LRB- -LRB-) (NP (NN int)) (-RRB- -RRB-)))))))))) (. .)))

root(ROOT-0, have-4)
dep(have-4, *-1)
nsubj(have-4, you-2)
aux(have-4, will-3)
dobj(have-4, problems-5)
advmod(sizeof-12, when-6)
dep(sizeof-12, sizeof-7)
appos(sizeof-7, uid_t-9)
amod(sizeof-12, >-11)
rcmod(problems-5, sizeof-12)
appos(sizeof-12, int-14)

(/-LRB- consider/VB 64/CD bit/NN uid_t/JJ and/CC 32/CD bit/NN int/NN ;/: therefore/RB do/VBP n't/RB use/VB atoi/NN (/-LRB- 3/CD )/-RRB- ./. )/-RRB- 

(ROOT (S (-LRB- -LRB-) (VP (VB consider) (NP (NP (ADJP (ADJP (NP (CD 64) (NN bit)) (JJ uid_t)) (CC and) (ADJP (CD 32) (NN bit))) (NN int)) (: ;) (SBAR (ADVP (RB therefore)) (S (VP (VBP do) (RB n't) (VP (VB use) (NP (NP (NN atoi)) (PRN (-LRB- -LRB-) (NP (CD 3)) (-RRB- -RRB-))))))))) (. .) (-RRB- -RRB-)))

root(ROOT-0, consider-2)
num(bit-4, 64-3)
npadvmod(uid_t-5, bit-4)
amod(int-9, uid_t-5)
number(bit-8, 32-7)
conj_and(uid_t-5, bit-8)
amod(int-9, bit-8)
dobj(consider-2, int-9)
advmod(use-14, therefore-11)
aux(use-14, do-12)
neg(use-14, n't-13)
dep(int-9, use-14)
dobj(use-14, atoi-15)
appos(atoi-15, 3-17)

*/SYM you/PRP will/MD have/VB problems/NNS when/WRB sizeof/NN (/-LRB- gid_t/NN )/-RRB- >/JJR sizeof/NN (/-LRB- int/NN )/-RRB- ./. 

(ROOT (FRAG (SBAR (X (SYM *)) (S (NP (PRP you)) (VP (MD will) (VP (VB have) (NP (NP (NNS problems)) (SBAR (WHADVP (WRB when)) (S (NP (NP (NN sizeof)) (PRN (-LRB- -LRB-) (NP (NN gid_t)) (-RRB- -RRB-))) (NP (NP (JJR >) (NN sizeof)) (PRN (-LRB- -LRB-) (NP (NN int)) (-RRB- -RRB-)))))))))) (. .)))

root(ROOT-0, have-4)
dep(have-4, *-1)
nsubj(have-4, you-2)
aux(have-4, will-3)
dobj(have-4, problems-5)
advmod(sizeof-12, when-6)
dep(sizeof-12, sizeof-7)
appos(sizeof-7, gid_t-9)
amod(sizeof-12, >-11)
rcmod(problems-5, sizeof-12)
appos(sizeof-12, int-14)

(/-LRB- consider/VB 64/CD bit/NN gid_t/JJ and/CC 32/CD bit/NN int/NN ;/: therefore/RB do/VBP n't/RB use/VB atoi/NN (/-LRB- 3/CD )/-RRB- ./. )/-RRB- 

(ROOT (S (-LRB- -LRB-) (VP (VB consider) (NP (NP (ADJP (ADJP (NP (CD 64) (NN bit)) (JJ gid_t)) (CC and) (ADJP (CD 32) (NN bit))) (NN int)) (: ;) (SBAR (ADVP (RB therefore)) (S (VP (VBP do) (RB n't) (VP (VB use) (NP (NP (NN atoi)) (PRN (-LRB- -LRB-) (NP (CD 3)) (-RRB- -RRB-))))))))) (. .) (-RRB- -RRB-)))

root(ROOT-0, consider-2)
num(bit-4, 64-3)
npadvmod(gid_t-5, bit-4)
amod(int-9, gid_t-5)
number(bit-8, 32-7)
conj_and(gid_t-5, bit-8)
amod(int-9, bit-8)
dobj(consider-2, int-9)
advmod(use-14, therefore-11)
aux(use-14, do-12)
neg(use-14, n't-13)
dep(int-9, use-14)
dobj(use-14, atoi-15)
appos(atoi-15, 3-17)

*/SYM you/PRP did/VBD not/RB check/VB for/IN NULL/JJ returns/NNS of/IN strdup/NN ./. 

(ROOT (FRAG (SBAR (X (SYM *)) (S (NP (PRP you)) (VP (VBD did) (RB not) (VP (VB check) (PP (IN for) (NP (NP (JJ NULL) (NNS returns)) (PP (IN of) (NP (NN strdup))))))))) (. .)))

root(ROOT-0, check-5)
dep(check-5, *-1)
nsubj(check-5, you-2)
aux(check-5, did-3)
neg(check-5, not-4)
amod(returns-8, NULL-7)
prep_for(check-5, returns-8)
prep_of(returns-8, strdup-10)

Fixed/VBN in/IN the/DT patch/NN ./. 

(ROOT (S (VP (VBN Fixed) (PP (IN in) (NP (DT the) (NN patch)))) (. .)))

root(ROOT-0, Fixed-1)
det(patch-4, the-3)
prep_in(Fixed-1, patch-4)

*/SYM you/PRP had/VBD a/DT possible/JJ (/-LRB- "/`` compile/VB time/NN "/'' )/-RRB- buffer/NN overflow/NN ./. 

(ROOT (FRAG (SBAR (X (SYM *)) (S (NP (PRP you)) (VP (VBD had) (NP (DT a) (JJ possible) (PRN (-LRB- -LRB-) (`` ``) (S (VP (VB compile) (NP (NN time)))) ('' '') (-RRB- -RRB-)) (NN buffer) (NN overflow))))) (. .)))

root(ROOT-0, had-3)
dep(had-3, *-1)
nsubj(had-3, you-2)
det(overflow-13, a-4)
amod(overflow-13, possible-5)
dep(overflow-13, compile-8)
dobj(compile-8, time-9)
nn(overflow-13, buffer-12)
dobj(had-3, overflow-13)

As/RB long/RB as/IN AP_SAFE_PATH/NN is/VBZ a/DT string/NN literal/JJ (/-LRB- which/WDT it/PRP should/MD really/RB be/VB )/-RRB- ,/, 

(ROOT (FRAG (ADVP (RB As) (RB long)) (SBAR (IN as) (S (NP (NN AP_SAFE_PATH)) (VP (VBZ is) (NP (NP (DT a) (NN string) (JJ literal)) (PRN (-LRB- -LRB-) (SBAR (WHNP (WDT which)) (S (NP (PRP it)) (VP (MD should) (ADVP (RB really)) (VP (VB be))))) (-RRB- -RRB-)))) (, ,)))))

root(ROOT-0, long-2)
advmod(long-2, As-1)
mark(string-7, as-3)
nsubj(string-7, AP_SAFE_PATH-4)
cop(string-7, is-5)
det(string-7, a-6)
dep(long-2, string-7)
amod(string-7, literal-8)
dobj(be-14, which-10)
nsubj(be-14, it-11)
aux(be-14, should-12)
advmod(be-14, really-13)
dep(string-7, be-14)

the/DT patched/VBN version/NN is/VBZ faster/RBR and/CC occupied/VBD less/JJR memory/NN ./. 

(ROOT (S (NP (DT the) (VBN patched) (NN version)) (VP (VP (VBZ is) (ADVP (RBR faster))) (CC and) (VP (VBD occupied) (NP (JJR less) (NN memory)))) (. .)))

root(ROOT-0, is-4)
det(version-3, the-1)
amod(version-3, patched-2)
nsubj(is-4, version-3)
nsubj(occupied-7, version-3)
advmod(is-4, faster-5)
conj_and(is-4, occupied-7)
amod(memory-9, less-8)
dobj(occupied-7, memory-9)

Fixed/VBN in/IN the/DT patch/NN ./. 

(ROOT (S (VP (VBN Fixed) (PP (IN in) (NP (DT the) (NN patch)))) (. .)))

root(ROOT-0, Fixed-1)
det(patch-4, the-3)
prep_in(Fixed-1, patch-4)

*/SYM you/PRP had/VBD an/DT unused/JJ variable/NN (/-LRB- main/JJ :/: prog/NN )/-RRB- in/IN the/DT code/NN ./. 

(ROOT (FRAG (SBAR (X (SYM *)) (S (NP (PRP you)) (VP (VBD had) (NP (NP (NP (DT an) (JJ unused) (NN variable)) (PRN (-LRB- -LRB-) (NP (NP (JJ main)) (: :) (NP (NN prog))) (-RRB- -RRB-))) (PP (IN in) (NP (DT the) (NN code))))))) (. .)))

root(ROOT-0, had-3)
dep(had-3, *-1)
nsubj(had-3, you-2)
det(variable-6, an-4)
amod(variable-6, unused-5)
dobj(had-3, variable-6)
dep(variable-6, main-8)
dep(main-8, prog-10)
det(code-14, the-13)
prep_in(variable-6, code-14)

Fixed/VBN in/IN the/DT patch/NN ./. 

(ROOT (S (VP (VBN Fixed) (PP (IN in) (NP (DT the) (NN patch)))) (. .)))

root(ROOT-0, Fixed-1)
det(patch-4, the-3)
prep_in(Fixed-1, patch-4)

*/SYM you/PRP are/VBP still/RB not/RB able/JJ to/TO report/VB the/DT failure/NN of/IN execv/NN to/TO the/DT logfile/NN ./. 

(ROOT (FRAG (SBAR (X (SYM *)) (S (NP (PRP you)) (VP (VBP are) (ADVP (RB still)) (RB not) (ADJP (JJ able) (S (VP (TO to) (VP (VB report) (NP (NP (DT the) (NN failure)) (PP (IN of) (NP (NN execv)))) (PP (TO to) (NP (DT the) (NN logfile)))))))))) (. .)))

root(ROOT-0, able-6)
dep(able-6, *-1)
nsubj(able-6, you-2)
cop(able-6, are-3)
advmod(able-6, still-4)
neg(able-6, not-5)
aux(report-8, to-7)
xcomp(able-6, report-8)
det(failure-10, the-9)
dobj(report-8, failure-10)
prep_of(failure-10, execv-12)
det(logfile-15, the-14)
prep_to(report-8, logfile-15)

See/VB the/DT other/JJ bug/NN reports/NNS ./. 

(ROOT (S (VP (VB See) (NP (DT the) (JJ other) (NN bug) (NNS reports))) (. .)))

root(ROOT-0, See-1)
det(reports-5, the-2)
amod(reports-5, other-3)
nn(reports-5, bug-4)
dobj(See-1, reports-5)

Index/NN :/: suexec.c/NN 

(ROOT (NP (NP (NN Index)) (: :) (NP (NN suexec.c))))

root(ROOT-0, Index-1)
dep(Index-1, suexec.c-3)

===================================================================/NN 

(ROOT (NP (NN ===================================================================)))

root(ROOT-0, ===================================================================-1)

--/: suexec.c/NN (/-LRB- revision/NN 126209/CD )/-RRB- 

(ROOT (NP (NP (: --) (NN suexec.c)) (PRN (-LRB- -LRB-) (NP (NN revision) (CD 126209)) (-RRB- -RRB-))))

root(ROOT-0, suexec.c-2)
appos(suexec.c-2, revision-4)
num(revision-4, 126209-5)

+/CC +/CC +/CC suexec.c/NN (/-LRB- working/VBG copy/NN )/-RRB- 

(ROOT (S (VP (CC +) (VP (CC +) (NP (CC +) (NN suexec.c)) (PRN (-LRB- -LRB-) (S (VP (VBG working) (NP (NN copy)))) (-RRB- -RRB-))))))

root(ROOT-0, suexec.c-4)
cc(suexec.c-4, +-1)
cc(suexec.c-4, +-2)
cc(suexec.c-4, +-3)
parataxis(suexec.c-4, working-6)
dobj(working-6, copy-7)

@@/NN -200,9/CD +200,19/CD @@/NN 

(ROOT (NP (NP (NN @@)) (NP (CD -200,9)) (NP (CD +200,19) (NN @@))))

root(ROOT-0, @@-1)
dep(@@-1, -200,9-2)
num(@@-4, +200,19-3)
dep(@@-1, @@-4)

return/NN ;/: 

(ROOT (NP (NN return) (: ;)))

root(ROOT-0, return-1)

}/-RRB- 

(ROOT (NP (-RRB- -RCB-)))


+/CC static/JJ char/NN */SYM xstrdup/NN (/-LRB- const/NN char/NN */SYM s/NNS )/-RRB- 

(ROOT (SINV (VP (CC +) (NP (NP (JJ static) (NX (NN char))) (X (SYM *)))) (NP (NP (NN xstrdup)) (PRN (-LRB- -LRB-) (NP (NP (NN const)) (NP (NP (NN char)) (SBAR (S (VP (SYM *) (NP (NNS s))))))) (-RRB- -RRB-)))))

root(ROOT-0, char-3)
cc(char-3, +-1)
amod(char-3, static-2)
dep(char-3, *-4)
nsubj(char-3, xstrdup-5)
dep(xstrdup-5, const-7)
dep(const-7, char-8)
dep(s-10, *-9)
rcmod(char-8, s-10)

+/CC {/-LRB- 

(ROOT (S (VP (CC +) (VP (-LRB- -LCB-)))))

cc(-LCB--2, +-1)

+/CC char/NN */SYM result/VBP ;/: 

(ROOT (NP (NP (NP (CC +) (NN char)) (SBAR (FRAG (X (SYM *)) (VP (VBP result))))) (: ;)))

root(ROOT-0, char-2)
cc(char-2, +-1)
dep(result-4, *-3)
dep(char-2, result-4)

+/CC 

(ROOT (NP (CC +)))

root(ROOT-0, +-1)

+/CC if/IN (/-LRB- (/-LRB- result/NN =/JJ strdup/NN (/-LRB- s/NNS )/-RRB- )/-RRB- ==/CD NULL/NN )/-RRB- {/-LRB- 

(ROOT (S (VP (CC +) (VP (ADVP (ADVP (IN if)) (PRN (-LRB- -LRB-) (NP (NP (-LRB- -LRB-) (NN result) (JJ =)) (NP (NP (NP (NN strdup)) (PRN (-LRB- -LRB-) (NNS s) (-RRB- -RRB-)) (-RRB- -RRB-)) (NP (CD ==) (NN NULL)))) (-RRB- -RRB-))) (-LRB- -LCB-)))))

root(ROOT-0, if-2)
cc(if-2, +-1)
dep(if-2, result-5)
amod(result-5, =-6)
dep(result-5, strdup-7)
dep(strdup-7, s-9)
num(NULL-13, ==-12)
dep(strdup-7, NULL-13)

+/CC log_err/NN (/-LRB- "/`` out/IN of/IN memory/NN \/CD n/NN "/'' )/-RRB- ;/: 

(ROOT (NP (NP (CC +) (NN log_err)) (PRN (-LRB- -LRB-) (NP (PP (`` ``) (IN out) (NP (IN of) (NN memory))) (NP (NP (CD \)) (NP (NN n) ('' '')))) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, log_err-2)
cc(log_err-2, +-1)
amod(memory-7, of-6)
prep_out(\-8, memory-7)
dep(log_err-2, \-8)
dep(\-8, n-9)

+/CC exit/NN (/-LRB- 1/CD )/-RRB- ;/: 

(ROOT (NP (NP (CC +) (NN exit)) (PRN (-LRB- -LRB-) (NP (CD 1)) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, exit-2)
cc(exit-2, +-1)
appos(exit-2, 1-4)

+/CC }/-RRB- 

(ROOT (S (VP (CC +) (VP (-RRB- -RCB-)))))

cc(-RCB--2, +-1)

+/CC return/NN result/VBP ;/: 

(ROOT (NP (NP (CC +) (NN return)) (VP (VBP result)) (: ;)))

root(ROOT-0, return-2)
cc(return-2, +-1)
dep(return-2, result-3)

+/CC }/-RRB- 

(ROOT (S (VP (CC +) (VP (-RRB- -RCB-)))))

cc(-RCB--2, +-1)

+/CC 

(ROOT (NP (CC +)))

root(ROOT-0, +-1)

static/JJ void/NN clean_env/NN (/-LRB- void/NN )/-RRB- 

(ROOT (NP (NP (JJ static) (NN void) (NN clean_env)) (PRN (-LRB- -LRB-) (ADJP (NN void)) (-RRB- -RRB-))))

root(ROOT-0, clean_env-3)
amod(clean_env-3, static-1)
nn(clean_env-3, void-2)
dep(clean_env-3, void-5)

{/-LRB- 

(ROOT (NP (-LRB- -LCB-)))


-/: char/NN pathbuf/NN [/-LRB- 512/CD ]/-RRB- ;/: 

(ROOT (PRN (: -) (S (NP (NN char) (NN pathbuf)) (VP (-LRB- -LSB-) (NP (CD 512) (-RRB- -RSB-)))) (: ;)))

root(ROOT-0, 512-5)
nn(pathbuf-3, char-2)
nsubj(512-5, pathbuf-3)
punct(512-5, -LSB--4)
punct(512-5, -RSB--6)

char/NN **/SYM cleanenv/NN ;/: 

(ROOT (NP (NP (NP (NN char)) (SBAR (S (VP (SYM **) (NP (NN cleanenv)))))) (: ;)))

root(ROOT-0, char-1)
dep(cleanenv-3, **-2)
rcmod(char-1, cleanenv-3)

char/NN **/SYM ep/NN ;/: 

(ROOT (NP (NP (NP (NN char)) (SBAR (S (VP (SYM **) (NP (NN ep)))))) (: ;)))

root(ROOT-0, char-1)
dep(ep-3, **-2)
rcmod(char-1, ep-3)

int/NN cidx/NN =/JJ 0/CD ;/: 

(ROOT (NP (NP (NP (NN int) (NN cidx)) (ADJP (JJ =) (NP-TMP (CD 0)))) (: ;)))

root(ROOT-0, cidx-2)
nn(cidx-2, int-1)
amod(cidx-2, =-3)
tmod(=-3, 0-4)

@@/NN -224,8/CD +234,7/CD @@/NN 

(ROOT (NP (NP (NN @@)) (NP (CD -224,8)) (NP (CD +234,7) (NN @@))))

root(ROOT-0, @@-1)
dep(@@-1, -224,8-2)
num(@@-4, +234,7-3)
dep(@@-1, @@-4)

exit/NN (/-LRB- 120/CD )/-RRB- ;/: 

(ROOT (NP (NP (NN exit)) (PRN (-LRB- -LRB-) (NP (CD 120)) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, exit-1)
appos(exit-1, 120-3)

}/-RRB- 

(ROOT (NP (-RRB- -RCB-)))


-/: sprintf/NN (/-LRB- pathbuf/NN ,/, "/`` PATH/NN =/JJ %/NN s/NNS "/'' ,/, AP_SAFE_PATH/NN )/-RRB- ;/: 

(ROOT (NP (NP (: -) (NN sprintf)) (PRN (-LRB- -LRB-) (NP (NP (NN pathbuf)) (, ,) (NP (`` ``) (NN PATH) (JJ =) (NN %) (NNS s) ('' '')) (, ,) (NP (NN AP_SAFE_PATH))) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, sprintf-2)
dep(sprintf-2, pathbuf-4)
nn(s-10, PATH-7)
amod(s-10, =-8)
nn(s-10, %-9)
appos(pathbuf-4, s-10)
appos(pathbuf-4, AP_SAFE_PATH-13)

-/: cleanenv/NN [/-LRB- cidx/NN ]/-RRB- =/JJ strdup/NN (/-LRB- pathbuf/NN )/-RRB- ;/: 

(ROOT (PRN (: -) (S (VP (NN cleanenv) (-LRB- -LSB-) (NP (NP (NP (NN cidx) (-RRB- -RSB-)) (JJ =) (NN strdup)) (PRN (-LRB- -LRB-) (NP (NN pathbuf)) (-RRB- -RRB-))))) (: ;)))

root(ROOT-0, cleanenv-2)
punct(cleanenv-2, -LSB--3)
nn(strdup-7, cidx-4)
punct(cidx-4, -RSB--5)
amod(strdup-7, =-6)
dobj(cleanenv-2, strdup-7)
appos(strdup-7, pathbuf-9)

+/CC cleanenv/NN [/-LRB- cidx/NN ]/-RRB- =/JJ "/`` PATH/NN =/JJ "/'' AP_SAFE_PATH/NN ;/: 

(ROOT (NP (NP (NP (CC +) (NN cleanenv)) (NP (NP (-LRB- -LSB-) (NN cidx) (-RRB- -RSB-)) (JJ =) (`` ``) (NN PATH) (JJ =) ('' '') (NN AP_SAFE_PATH))) (: ;)))

root(ROOT-0, cleanenv-2)
cc(cleanenv-2, +-1)
punct(cidx-4, -LSB--3)
nn(AP_SAFE_PATH-11, cidx-4)
punct(cidx-4, -RSB--5)
amod(AP_SAFE_PATH-11, =-6)
nn(AP_SAFE_PATH-11, PATH-8)
amod(AP_SAFE_PATH-11, =-9)
dep(cleanenv-2, AP_SAFE_PATH-11)

cidx/NN +/CC +/CC ;/: 

(ROOT (NP (NN cidx) (CC +) (CC +) (: ;)))

root(ROOT-0, cidx-1)
cc(cidx-1, +-2)
cc(cidx-1, +-3)

for/IN (/-LRB- ep/NN =/JJ envp/NN ;/: */SYM ep/NN &/CC &/CC cidx/NN </JJR AP_ENVBUF-1/CD ;/: ep/NN +/CC +/CC )/-RRB- {/-LRB- 

(ROOT (PP (IN for) (NP (PRN (-LRB- -LRB-) (S (NP (NP (NP (NP (NN ep)) (NP (NP (JJ =) (NN envp)) (PRN (: ;) (FRAG (X (SYM *)) (NP (NN ep)))))) (CC &) (NP (NP (NP (CC &) (NN cidx)) (JJR <)) (NP (CD AP_ENVBUF-1)))) (: ;) (NP (NP (NN ep)) (SBAR (S (NP (CC +)))))) (NP (CC +))) (-RRB- -RRB-)) (-LRB- -LCB-))))

root(ROOT-0, for-1)
dep(+-17, ep-3)
amod(envp-5, =-4)
dep(ep-3, envp-5)
dep(ep-8, *-7)
dep(envp-5, ep-8)
cc(cidx-11, &-10)
dep(<-12, cidx-11)
conj_and(ep-3, <-12)
dep(+-17, <-12)
dep(<-12, AP_ENVBUF-1-13)
dep(ep-3, ep-15)
rcmod(ep-15, +-16)
pobj(for-1, +-17)

@@/NN -254,7/CD +263,6/CD @@/NN 

(ROOT (NP (NP (NN @@)) (NP (CD -254,7)) (NP (CD +263,6) (NN @@))))

root(ROOT-0, @@-1)
dep(@@-1, -254,7-2)
num(@@-4, +263,6-3)
dep(@@-1, @@-4)

char/NN */SYM target_homedir/NN ;/: //: */SYM target/NN home/NN directory/NN */SYM //: 

(ROOT (PRN (NN char) (SBAR (X (SYM *)) (S (NP (NN target_homedir)) (: ;) (VP (: /) (X (SYM *)) (NP (NP (NP (NN target)) (NP (NN home) (NN directory))) (X (SYM *)))))) (: /)))

root(ROOT-0, target-7)
dep(target-7, char-1)
dep(target-7, *-2)
nsubj(target-7, target_homedir-3)
punct(target-7, /-5)
dep(target-7, *-6)
nn(directory-9, home-8)
dep(target-7, directory-9)
dep(target-7, *-10)
punct(target-7, /-11)

char/NN */SYM actual_uname/NN ;/: //: */SYM actual/JJ user/NN name/NN */SYM //: 

(ROOT (NP (NP (NN char)) (X (X (SYM *)) (NP (NN actual_uname))) (: ;) (NP (NP (PRN (: /) (FRAG (X (SYM *)) (NP (JJ actual) (NN user) (NN name)))) (SYM *)) (NP (: /)))))

root(ROOT-0, char-1)
dep(actual_uname-3, *-2)
dep(char-1, actual_uname-3)
punct(name-9, /-5)
dep(name-9, *-6)
amod(name-9, actual-7)
nn(name-9, user-8)
dep(char-1, name-9)
dep(name-9, *-10)
dep(name-9, /-11)

char/NN */SYM actual_gname/NN ;/: //: */SYM actual/JJ group/NN name/NN */SYM //: 

(ROOT (NP (NP (NN char)) (X (X (SYM *)) (NP (NN actual_gname))) (: ;) (NP (NP (PRN (: /) (FRAG (X (SYM *)) (NP (JJ actual) (NN group) (NN name)))) (SYM *)) (NP (: /)))))

root(ROOT-0, char-1)
dep(actual_gname-3, *-2)
dep(char-1, actual_gname-3)
punct(name-9, /-5)
dep(name-9, *-6)
amod(name-9, actual-7)
nn(name-9, group-8)
dep(char-1, name-9)
dep(name-9, *-10)
dep(name-9, /-11)

-/: char/NN */SYM prog/NN ;/: //: */SYM name/NN of/IN this/DT program/NN */SYM //: 

(ROOT (PRN (: -) (FRAG (FRAG (NP (NN char)) (PP (SYM *) (NP (NN prog)) (: ;))) (: /) (FRAG (X (X (SYM *)) (NP (NN name))) (PP (IN of) (NP (NP (DT this) (NN program)) (X (SYM *)))))) (: /)))

root(ROOT-0, char-2)
prep(char-2, *-3)
pobj(*-3, prog-4)
punct(char-2, /-6)
dep(name-8, *-7)
dep(char-2, name-8)
det(program-11, this-10)
prep_of(name-8, program-11)
dep(program-11, *-12)
punct(char-2, /-13)

char/NN */SYM cmd/VBN ;/: //: */SYM command/NN to/TO be/VB executed/VBN */SYM //: 

(ROOT (FRAG (NP (NP (NN char)) (SBAR (FRAG (X (SYM *)) (VP (VBN cmd) (: ;) (S (NP (PRN (: /) (FRAG (X (SYM *)) (NP (NN command))))) (VP (TO to) (VP (VB be) (VP (VBN executed))))))))) (X (X (SYM *)) (ADJP (: /)))))

root(ROOT-0, char-1)
dep(cmd-3, *-2)
dep(char-1, cmd-3)
punct(command-7, /-5)
dep(command-7, *-6)
dobj(cmd-3, command-7)
aux(executed-10, to-8)
auxpass(executed-10, be-9)
parataxis(cmd-3, executed-10)
dep(/-12, *-11)
dep(char-1, /-12)

char/NN cwd/NN [/-LRB- AP_MAXPATH/NN ]/-RRB- ;/: //: */SYM current/JJ working/VBG directory/NN */SYM //: 

(ROOT (S (NP (NN char)) (VP (NN cwd) (SBAR (SBAR (-LRB- -LSB-) (S (NP (NN AP_MAXPATH)) (VP (-RRB- -RSB-)))) (: ;) (PRN (: /) (SBAR (X (SYM *)) (S (NP (JJ current)) (VP (VBG working) (NP (NN directory)) (X (SYM *))))) (: /))))))

root(ROOT-0, cwd-2)
nsubj(cwd-2, char-1)
punct(-RSB--5, -LSB--3)
nsubj(-RSB--5, AP_MAXPATH-4)
dep(cwd-2, -RSB--5)
punct(working-10, /-7)
dep(working-10, *-8)
nsubj(working-10, current-9)
dep(-RSB--5, working-10)
dobj(working-10, directory-11)
dep(working-10, *-12)
punct(working-10, /-13)

char/NN dwd/NN [/-LRB- AP_MAXPATH/NN ]/-RRB- ;/: //: */SYM docroot/NN working/VBG directory/NN */SYM //: 

(ROOT (S (NP (NN char)) (VP (NN dwd) (SBAR (SBAR (-LRB- -LSB-) (S (NP (NN AP_MAXPATH)) (VP (-RRB- -RSB-)))) (: ;) (PRN (: /) (SBAR (X (SYM *)) (S (NP (NN docroot)) (VP (VBG working) (NP (NN directory)) (X (SYM *))))) (: /))))))

root(ROOT-0, dwd-2)
nsubj(dwd-2, char-1)
punct(-RSB--5, -LSB--3)
nsubj(-RSB--5, AP_MAXPATH-4)
dep(dwd-2, -RSB--5)
punct(working-10, /-7)
dep(working-10, *-8)
nsubj(working-10, docroot-9)
dep(-RSB--5, working-10)
dobj(working-10, directory-11)
dep(working-10, *-12)
punct(working-10, /-13)

@@/NN -268,7/CD +276,6/CD @@/NN 

(ROOT (NP (NP (NN @@)) (NP (CD -268,7)) (NP (CD +276,6) (NN @@))))

root(ROOT-0, @@-1)
dep(@@-1, -268,7-2)
num(@@-4, +276,6-3)
dep(@@-1, @@-4)

*/SYM //: 

(ROOT (FRAG (X (SYM *)) (NP (: /))))

root(ROOT-0, /-2)
dep(/-2, *-1)

clean_env/NN (/-LRB- )/-RRB- ;/: 

(ROOT (NP (NP (NN clean_env) (-LRB- -LRB-) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, clean_env-1)

-/: prog/NN =/JJ argv/NN [/-LRB- 0/CD ]/-RRB- ;/: 

(ROOT (PRN (: -) (NP (NP (NN prog) (JJ =) (NN argv)) (-LRB- -LSB-) (NP (CD 0) (-RRB- -RSB-))) (: ;)))

root(ROOT-0, argv-4)
nn(argv-4, prog-2)
amod(argv-4, =-3)
punct(argv-4, -LSB--5)
dep(argv-4, 0-6)
punct(0-6, -RSB--7)

//: */SYM 

(ROOT (VP (: /) (X (SYM *))))

root(ROOT-0, *-2)
punct(*-2, /-1)

*/SYM Check/VB existence/validity/NN of/IN the/DT UID/NN of/IN the/DT user/NN 

(ROOT (X (X (SYM *)) (NP (NP (VB Check) (NN existence/validity)) (PP (IN of) (NP (NP (DT the) (NN UID)) (PP (IN of) (NP (DT the) (NN user))))))))

root(ROOT-0, existence/validity-3)
dep(existence/validity-3, *-1)
dep(existence/validity-3, Check-2)
det(UID-6, the-5)
prep_of(existence/validity-3, UID-6)
det(user-9, the-8)
prep_of(UID-6, user-9)

*/SYM running/VBG this/DT program/NN ./. 

(ROOT (FRAG (SBAR (X (SYM *)) (S (VP (VBG running)) (NP-TMP (NP (DT this)) (NP (NN program))))) (. .)))

root(ROOT-0, running-2)
dep(running-2, *-1)
dep(running-2, this-3)
dep(this-3, program-4)

Error/NN out/IN if/IN invalid/JJ ./. 

(ROOT (FRAG (NP (NN Error)) (ADVP (IN out) (PP (IN if) (ADJP (JJ invalid)))) (. .)))

root(ROOT-0, Error-1)
dep(Error-1, out-2)
prep_if(out-2, invalid-4)

@@/NN -395,11/CD +402,11/CD @@/NN 

(ROOT (NP (NP (NN @@)) (NP (CD -395,11)) (NP (CD +402,11) (NN @@))))

root(ROOT-0, @@-1)
dep(@@-1, -395,11-2)
num(@@-4, +402,11-3)
dep(@@-1, @@-4)

exit/NN (/-LRB- 106/CD )/-RRB- ;/: 

(ROOT (NP (NP (NN exit)) (PRN (-LRB- -LRB-) (NP (CD 106)) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, exit-1)
appos(exit-1, 106-3)

}/-RRB- 

(ROOT (NP (-RRB- -RCB-)))


gid/NN =/JJ gr/SYM -/: >/JJR gr_gid/NN ;/: 

(ROOT (NP (NP (NN gid) (JJ =) (SYM gr)) (: -) (NP (JJR >) (NN gr_gid)) (: ;)))

root(ROOT-0, gid-1)
amod(gid-1, =-2)
dep(gid-1, gr-3)
amod(gr_gid-6, >-5)
dep(gid-1, gr_gid-6)

-/: actual_gname/NN =/JJ strdup/NN (/-LRB- gr/SYM -/: >/JJR gr_name/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (PRN (: -) (NP (NN actual_gname))) (JJ =) (NN strdup)) (PRN (-LRB- -LRB-) (NP (NP (SYM gr)) (: -) (NP (JJR >) (NN gr_name))) (-RRB- -RRB-))) (: ;)))

root(ROOT-0, strdup-4)
dep(strdup-4, actual_gname-2)
amod(strdup-4, =-3)
dep(strdup-4, gr-6)
amod(gr_name-9, >-8)
dep(gr-6, gr_name-9)

+/CC actual_gname/NN =/JJ xstrdup/NN (/-LRB- gr/SYM -/: >/JJR gr_name/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (CC +) (NN actual_gname)) (NP (NP (JJ =) (NN xstrdup)) (PRN (-LRB- -LRB-) (NP (NP (SYM gr)) (: -) (NP (JJR >) (NN gr_name))) (-RRB- -RRB-)))) (: ;)))

root(ROOT-0, actual_gname-2)
cc(actual_gname-2, +-1)
amod(xstrdup-4, =-3)
dep(actual_gname-2, xstrdup-4)
dep(xstrdup-4, gr-6)
amod(gr_name-9, >-8)
dep(gr-6, gr_name-9)

}/-RRB- 

(ROOT (NP (-RRB- -RCB-)))


else/RB {/-LRB- 

(ROOT (FRAG (RB else) (ADVP (-LRB- -LCB-))))

root(ROOT-0, else-1)

gid/NN =/JJ atoi/NN (/-LRB- target_gname/NN )/-RRB- ;/: 

(ROOT (NP (NP (NN gid) (JJ =) (NN atoi)) (PRN (-LRB- -LRB-) (NP (NN target_gname)) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, atoi-3)
nn(atoi-3, gid-1)
amod(atoi-3, =-2)
appos(atoi-3, target_gname-5)

-/: actual_gname/NN =/JJ strdup/NN (/-LRB- target_gname/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (PRN (: -) (NP (NN actual_gname))) (JJ =) (NN strdup)) (PRN (-LRB- -LRB-) (NP (NN target_gname)) (-RRB- -RRB-))) (: ;)))

root(ROOT-0, strdup-4)
dep(strdup-4, actual_gname-2)
amod(strdup-4, =-3)
appos(strdup-4, target_gname-6)

+/CC actual_gname/NN =/JJ xstrdup/NN (/-LRB- target_gname/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (CC +) (NN actual_gname)) (NP (NP (JJ =) (NN xstrdup)) (PRN (-LRB- -LRB-) (NP (NN target_gname)) (-RRB- -RRB-)))) (: ;)))

root(ROOT-0, actual_gname-2)
cc(actual_gname-2, +-1)
amod(xstrdup-4, =-3)
dep(actual_gname-2, xstrdup-4)
appos(xstrdup-4, target_gname-6)

}/-RRB- 

(ROOT (NP (-RRB- -RCB-)))


#ifdef/JJ _/NN OSD_POSIX/NN 

(ROOT (FRAG (NP (JJ #ifdef) (NN _) (NN OSD_POSIX))))

root(ROOT-0, OSD_POSIX-3)
amod(OSD_POSIX-3, #ifdef-1)
nn(OSD_POSIX-3, _-2)

@@/NN -433,8/CD +440,8/CD @@/NN 

(ROOT (NP (NP (NN @@)) (NP (CD -433,8)) (NP (CD +440,8) (NN @@))))

root(ROOT-0, @@-1)
dep(@@-1, -433,8-2)
num(@@-4, +440,8-3)
dep(@@-1, @@-4)

*/SYM Save/VB these/DT for/IN later/RB since/IN initgroups/NNS will/MD hose/NN the/DT struct/NN 

(ROOT (SBAR (X (SYM *)) (S (S (VP (VB Save) (NP (NP (DT these)) (PP (IN for) (NP (RB later)))) (PP (IN since) (NP (NNS initgroups))))) (VP (MD will) (VP (NN hose) (NP (DT the) (NN struct)))))))

root(ROOT-0, hose-9)
dep(hose-9, *-1)
csubj(hose-9, Save-2)
dobj(Save-2, these-3)
prep(these-3, for-4)
pobj(for-4, later-5)
prep_since(Save-2, initgroups-7)
aux(hose-9, will-8)
det(struct-11, the-10)
dobj(hose-9, struct-11)

*/SYM //: 

(ROOT (FRAG (X (SYM *)) (NP (: /))))

root(ROOT-0, /-2)
dep(/-2, *-1)

uid/NN =/JJ pw/NN -/: >/JJR pw_uid/NN ;/: 

(ROOT (NP (NP (NN uid) (JJ =) (NN pw)) (: -) (NP (JJR >) (NN pw_uid)) (: ;)))

root(ROOT-0, pw-3)
nn(pw-3, uid-1)
amod(pw-3, =-2)
amod(pw_uid-6, >-5)
dep(pw-3, pw_uid-6)

-/: actual_uname/NN =/JJ strdup/NN (/-LRB- pw/NN -/: >/JJR pw_name/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (PRN (: -) (NP (NN actual_uname))) (JJ =) (NN strdup)) (PRN (-LRB- -LRB-) (NP (NP (NN pw)) (: -) (NP (JJR >) (NN pw_name))) (-RRB- -RRB-))) (: ;)))

root(ROOT-0, strdup-4)
dep(strdup-4, actual_uname-2)
amod(strdup-4, =-3)
dep(strdup-4, pw-6)
amod(pw_name-9, >-8)
dep(pw-6, pw_name-9)

-/: target_homedir/NN =/JJ strdup/NN (/-LRB- pw/NN -/: >/JJR pw_dir/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (PRN (: -) (NP (NN target_homedir))) (JJ =) (NN strdup)) (PRN (-LRB- -LRB-) (NP (NP (NN pw)) (: -) (NP (JJR >) (NN pw_dir))) (-RRB- -RRB-))) (: ;)))

root(ROOT-0, strdup-4)
dep(strdup-4, target_homedir-2)
amod(strdup-4, =-3)
dep(strdup-4, pw-6)
amod(pw_dir-9, >-8)
dep(pw-6, pw_dir-9)

+/CC actual_uname/NN =/JJ xstrdup/NN (/-LRB- pw/NN -/: >/JJR pw_name/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (CC +) (NN actual_uname)) (NP (NP (JJ =) (NN xstrdup)) (PRN (-LRB- -LRB-) (NP (NP (NN pw)) (: -) (NP (JJR >) (NN pw_name))) (-RRB- -RRB-)))) (: ;)))

root(ROOT-0, actual_uname-2)
cc(actual_uname-2, +-1)
amod(xstrdup-4, =-3)
dep(actual_uname-2, xstrdup-4)
dep(xstrdup-4, pw-6)
amod(pw_name-9, >-8)
dep(pw-6, pw_name-9)

+/CC target_homedir/NN =/JJ xstrdup/NN (/-LRB- pw/NN -/: >/JJR pw_dir/NN )/-RRB- ;/: 

(ROOT (NP (NP (NP (CC +) (NN target_homedir)) (NP (NP (JJ =) (NN xstrdup)) (PRN (-LRB- -LRB-) (NP (NP (NN pw)) (: -) (NP (JJR >) (NN pw_dir))) (-RRB- -RRB-)))) (: ;)))

root(ROOT-0, target_homedir-2)
cc(target_homedir-2, +-1)
amod(xstrdup-4, =-3)
dep(target_homedir-2, xstrdup-4)
dep(xstrdup-4, pw-6)
amod(pw_dir-9, >-8)
dep(pw-6, pw_dir-9)

//: */SYM 

(ROOT (VP (: /) (X (SYM *))))

root(ROOT-0, *-2)
punct(*-2, /-1)

*/SYM Log/VB the/DT transaction/NN here/RB to/TO be/VB sure/JJ we/PRP have/VBP an/DT open/JJ log/NN 

(ROOT (SBAR (X (SYM *)) (S (S (VP (VB Log) (S (NP (DT the) (NN transaction)) (ADVP (RB here)) (VP (TO to) (VP (VB be) (ADJP (JJ sure) (NP (PRP we)))))))) (VP (VBP have) (NP (DT an) (JJ open) (NN log))))))

root(ROOT-0, have-10)
dep(have-10, *-1)
csubj(have-10, Log-2)
det(transaction-4, the-3)
dobj(Log-2, transaction-4)
advmod(sure-8, here-5)
aux(sure-8, to-6)
cop(sure-8, be-7)
xcomp(Log-2, sure-8)
dep(sure-8, we-9)
det(log-13, an-11)
amod(log-13, open-12)
dobj(have-10, log-13)

