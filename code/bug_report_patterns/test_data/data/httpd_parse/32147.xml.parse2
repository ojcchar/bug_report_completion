This/DT is/VBZ undoubtably/RB a/DT corner-case/NN ,/, however/RB I/PRP 've/VBP experienced/VBN some/DT flexibility/NN issues/NNS configuring/VBG mod_cache/NN to/TO work/VB well/RB with/IN a/DT combination/NN of/IN mod_proxy/NN and/CC mod_rewrite/NN ./. 

(ROOT (S (S (NP (DT This)) (VP (VBZ is) (ADVP (RB undoubtably)) (NP (DT a) (NN corner-case)))) (, ,) (ADVP (RB however)) (S (NP (PRP I)) (VP (VBP 've) (VP (VBN experienced) (S (NP (DT some) (NN flexibility) (NNS issues) (VBG configuring) (NN mod_cache)) (VP (TO to) (VP (VB work) (ADVP (RB well)) (PP (IN with) (NP (NP (DT a) (NN combination)) (PP (IN of) (NP (NN mod_proxy) (CC and) (NN mod_rewrite))))))))))) (. .)))

root(ROOT-0, corner-case-5)
nsubj(corner-case-5, This-1)
cop(corner-case-5, is-2)
advmod(corner-case-5, undoubtably-3)
det(corner-case-5, a-4)
advmod(experienced-10, however-7)
nsubj(experienced-10, I-8)
aux(experienced-10, 've-9)
parataxis(corner-case-5, experienced-10)
det(mod_cache-15, some-11)
nn(mod_cache-15, flexibility-12)
nn(mod_cache-15, issues-13)
amod(mod_cache-15, configuring-14)
dobj(experienced-10, mod_cache-15)
aux(work-17, to-16)
xcomp(experienced-10, work-17)
advmod(work-17, well-18)
det(combination-21, a-20)
prep_with(work-17, combination-21)
prep_of(combination-21, mod_proxy-23)
prep_of(combination-21, mod_rewrite-25)
conj_and(mod_proxy-23, mod_rewrite-25)

Specifically/RB ,/, the/DT issue/NN related/JJ to/TO the/DT inability/NN (/-LRB- without/IN resorting/VBG to/TO cumbersome/JJ URI/NNP rewriting/VBG kludges/NNS )/-RRB- of/IN mod_cache/NN to/TO be/VB enabled/disabled/VBN on/IN more/JJR than/IN simply/RB the/DT basis/NN of/IN the/DT leading/VBG portion/NN of/IN a/DT URI/NNP path/NN ./. 

(ROOT (S (ADVP (RB Specifically)) (, ,) (S (NP (DT the) (NN issue)) (ADJP (JJ related) (PP (TO to) (NP (NP (NP (DT the) (NN inability)) (PRN (-LRB- -LRB-) (PP (IN without) (S (VP (VBG resorting) (PP (TO to) (NP (JJ cumbersome) (NNP URI))) (NP (VBG rewriting) (NNS kludges))))) (-RRB- -RRB-))) (PP (IN of) (NP (NN mod_cache) (S (VP (TO to) (VP (VB be) (VP (VBN enabled/disabled) (PP (IN on) (NP (NP (QP (JJR more) (IN than) (NP (RB simply) (DT the) (NN basis)))) (PP (IN of) (NP (NP (DT the) (VBG leading) (NN portion)) (PP (IN of) (NP (DT a) (NNP URI) (NN path))))))))))))))))) (. .)))

root(ROOT-0, related-5)
advmod(related-5, Specifically-1)
det(issue-4, the-3)
dep(related-5, issue-4)
det(inability-8, the-7)
prep_to(related-5, inability-8)
prepc_without(inability-8, resorting-11)
amod(URI-14, cumbersome-13)
prep_to(resorting-11, URI-14)
amod(kludges-16, rewriting-15)
dobj(resorting-11, kludges-16)
prep_of(inability-8, mod_cache-19)
aux(enabled/disabled-22, to-20)
auxpass(enabled/disabled-22, be-21)
vmod(mod_cache-19, enabled/disabled-22)
prep(enabled/disabled-22, on-23)
quantmod(than-25, more-24)
pobj(on-23, than-25)
advmod(basis-28, simply-26)
det(basis-28, the-27)
dep(than-25, basis-28)
det(portion-32, the-30)
amod(portion-32, leading-31)
prep_of(than-25, portion-32)
det(path-36, a-34)
nn(path-36, URI-35)
prep_of(portion-32, path-36)

Additionally/RB ,/, due/JJ to/TO the/DT fact/NN that/IN mod_cache/NN uses/VBZ the/DT quick_handler/NN hook/NN ,/, it/PRP interrupts/VBZ (/-LRB- if/IN deciding/VBG to/TO return/VB cached/JJ content/NN )/-RRB- most/RBS down-stream/JJ modules/NNS so/IN that/IN they/PRP can/MD not/RB make/VB decisions/NNS about/IN caching/NN or/CC non-caching/JJ content/NN ./. 

(ROOT (S (ADVP (RB Additionally)) (, ,) (PP (JJ due) (TO to) (NP (NP (DT the) (NN fact)) (SBAR (IN that) (S (NP (NN mod_cache)) (VP (VBZ uses) (NP (DT the) (NN quick_handler) (NN hook))))))) (, ,) (NP (PRP it)) (VP (VP (VBZ interrupts)) (PRN (-LRB- -LRB-) (SBAR (IN if) (S (VP (VBG deciding) (S (VP (TO to) (VP (VB return) (NP (JJ cached) (NN content)))))))) (-RRB- -RRB-)) (NP (NP (RBS most) (JJ down-stream) (NNS modules)) (SBAR (IN so) (IN that) (S (NP (PRP they)) (VP (MD can) (RB not) (VP (VB make) (NP (NNS decisions)) (PP (IN about) (NP (NP (NN caching)) (CC or) (NP (JJ non-caching) (NN content)))))))))) (. .)))

root(ROOT-0, interrupts-15)
advmod(interrupts-15, Additionally-1)
det(fact-6, the-5)
prep_due_to(interrupts-15, fact-6)
mark(uses-9, that-7)
nsubj(uses-9, mod_cache-8)
dep(fact-6, uses-9)
det(hook-12, the-10)
nn(hook-12, quick_handler-11)
dobj(uses-9, hook-12)
nsubj(interrupts-15, it-14)
mark(deciding-18, if-17)
parataxis(interrupts-15, deciding-18)
aux(return-20, to-19)
xcomp(deciding-18, return-20)
amod(content-22, cached-21)
dobj(return-20, content-22)
advmod(modules-26, most-24)
amod(modules-26, down-stream-25)
dobj(interrupts-15, modules-26)
mark(make-32, so-27)
mark(make-32, that-28)
nsubj(make-32, they-29)
aux(make-32, can-30)
neg(make-32, not-31)
dep(modules-26, make-32)
dobj(make-32, decisions-33)
prep_about(make-32, caching-35)
amod(content-38, non-caching-37)
prep_about(make-32, content-38)
conj_or(caching-35, content-38)

post_read_handler/NN is/VBZ the/DT obvious/JJ exception/NN ,/, however/RB due/JJ to/TO the/DT nearly/RB unconditional/JJ way/NN in/IN which/WDT mod_cache/NN intercepts/VBZ requests/NNS ,/, it/PRP 's/VBZ rather/RB non-elegant/JJ to/TO resort/VB to/TO intercept/VB and/CC avoidance/NN trickery/NN via/IN post_read_handler/JJ algorithms/NNS ./. 

(ROOT (S (S (NP (NN post_read_handler)) (VP (VBZ is) (NP (NP (DT the) (JJ obvious) (NN exception)) (, ,) (ADVP (RB however)) (ADJP (JJ due) (PP (TO to) (NP (NP (DT the) (ADJP (RB nearly) (JJ unconditional)) (NN way)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NN mod_cache)) (VP (VBZ intercepts) (NP (NNS requests))))))))))) (, ,) (NP (PRP it)) (VP (VBZ 's) (ADJP (RB rather) (JJ non-elegant)) (S (VP (TO to) (VP (VB resort) (S (VP (TO to) (VP (VB intercept) (NP (CC and) (NP (NP (NN avoidance) (NN trickery)) (PP (IN via) (NP (JJ post_read_handler) (NNS algorithms)))))))))))) (. .)))

root(ROOT-0, non-elegant-23)
nsubj(exception-5, post_read_handler-1)
cop(exception-5, is-2)
det(exception-5, the-3)
amod(exception-5, obvious-4)
ccomp(non-elegant-23, exception-5)
advmod(exception-5, however-7)
det(way-13, the-10)
advmod(unconditional-12, nearly-11)
amod(way-13, unconditional-12)
prep_due_to(exception-5, way-13)
prep_in(intercepts-17, which-15)
nsubj(intercepts-17, mod_cache-16)
rcmod(way-13, intercepts-17)
dobj(intercepts-17, requests-18)
nsubj(non-elegant-23, it-20)
cop(non-elegant-23, 's-21)
advmod(non-elegant-23, rather-22)
aux(resort-25, to-24)
xcomp(non-elegant-23, resort-25)
aux(intercept-27, to-26)
xcomp(resort-25, intercept-27)
cc(trickery-30, and-28)
nn(trickery-30, avoidance-29)
dobj(intercept-27, trickery-30)
amod(algorithms-33, post_read_handler-32)
prep_via(trickery-30, algorithms-33)

I/PRP do/VBP understand/VB that/DT using/VBG quick_handler/NN ,/, in/IN the/DT majority/NN of/IN minimal/JJ configuration/NN caching/NN needs/VBZ ,/, is/VBZ a/DT performance/NN win/VB ./. 

(ROOT (S (NP (PRP I)) (VP (VBP do) (VP (VB understand) (S (NP (DT that)) (VP (VBG using) (SBAR (S (NP (NP (NN quick_handler)) (, ,) (PP (IN in) (NP (NP (DT the) (NN majority)) (PP (IN of) (NP (NP (JJ minimal) (NN configuration) (NN caching)) (VP (VBZ needs)))))) (, ,)) (VP (VBZ is) (NP (DT a) (NN performance) (S (VP (VB win))))))))))) (. .)))

root(ROOT-0, understand-3)
nsubj(understand-3, I-1)
aux(understand-3, do-2)
nsubj(using-5, that-4)
dep(understand-3, using-5)
nsubj(performance-19, quick_handler-6)
det(majority-10, the-9)
prep_in(quick_handler-6, majority-10)
amod(caching-14, minimal-12)
nn(caching-14, configuration-13)
prep_of(majority-10, caching-14)
dep(caching-14, needs-15)
cop(performance-19, is-17)
det(performance-19, a-18)
ccomp(using-5, performance-19)
dep(performance-19, win-20)

Certainly/RB ,/, this/DT could/MD be/VB worked/VBN around/RP with/IN subrequests/NNS ,/, however/RB I/PRP would/MD prefer/VB not/RB to/TO have/VB to/TO deal/VB with/IN the/DT overhead/NN of/IN a/DT subreq/NN on/IN every/DT transaction/NN (/-LRB- which/WDT is/VBZ what/WP would/MD be/VB necessary/JJ in/IN _/CD my/PRP$ _/NN particular/JJ case/NN ,/, others/NNS may/MD have/VB better/JJR solutions/NNS )/-RRB- ./. 

(ROOT (S (ADVP (RB Certainly)) (PRN (, ,) (S (NP (DT this)) (VP (MD could) (VP (VB be) (VP (VBN worked) (PRT (RP around)) (PP (IN with) (NP (NNS subrequests))))))) (, ,)) (ADVP (RB however)) (NP (PRP I)) (VP (MD would) (VP (VB prefer) (S (RB not) (VP (TO to) (VP (VB have) (S (VP (TO to) (VP (VB deal) (PP (IN with) (NP (NP (DT the) (NN overhead)) (PP (IN of) (NP (NP (DT a) (NN subreq)) (PP (IN on) (NP (DT every) (NN transaction))) (PRN (-LRB- -LRB-) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (SBAR (WHNP (WP what)) (S (VP (MD would) (VP (VB be) (ADJP (JJ necessary) (PP (IN in) (NP (NP (CD _) (NP (PRP$ my) (NN _) (JJ particular) (NN case)) (, ,) (NNS others)) (SBAR (S (VP (MD may) (VP (VB have) (NP (JJR better) (NNS solutions)))))))))))))))) (-RRB- -RRB-)))))))))))))) (. .)))

root(ROOT-0, prefer-14)
advmod(prefer-14, Certainly-1)
nsubjpass(worked-6, this-3)
aux(worked-6, could-4)
auxpass(worked-6, be-5)
parataxis(prefer-14, worked-6)
prt(worked-6, around-7)
prep_with(worked-6, subrequests-9)
advmod(prefer-14, however-11)
nsubj(prefer-14, I-12)
aux(prefer-14, would-13)
neg(have-17, not-15)
aux(have-17, to-16)
xcomp(prefer-14, have-17)
aux(deal-19, to-18)
xcomp(have-17, deal-19)
det(overhead-22, the-21)
prep_with(deal-19, overhead-22)
det(subreq-25, a-24)
prep_of(overhead-22, subreq-25)
det(transaction-28, every-27)
prep_on(subreq-25, transaction-28)
nsubj(is-31, which-30)
dep(subreq-25, is-31)
nsubj(necessary-35, what-32)
aux(necessary-35, would-33)
cop(necessary-35, be-34)
ccomp(is-31, necessary-35)
num(others-43, _-37)
poss(case-41, my-38)
nn(case-41, _-39)
amod(case-41, particular-40)
nn(others-43, case-41)
prep_in(necessary-35, others-43)
aux(have-45, may-44)
rcmod(others-43, have-45)
amod(solutions-47, better-46)
dobj(have-45, solutions-47)

With/IN that/DT being/VBG stated/VBN ,/, the/DT attached/VBN patch/NN to/TO 2.1-HEAD/NN was/VBD my/PRP$ solution/NN to/TO this/DT issue/NN ./. 

(ROOT (S (PP (IN With) (NP (NP (DT that)) (VP (VBG being) (VP (VBN stated))))) (, ,) (NP (NP (DT the) (VBN attached) (NN patch)) (PP (TO to) (NP (NN 2.1-HEAD)))) (VP (VBD was) (NP (PRP$ my) (NN solution)) (PP (TO to) (NP (DT this) (NN issue)))) (. .)))

root(ROOT-0, solution-13)
prep_with(solution-13, that-2)
auxpass(stated-4, being-3)
vmod(that-2, stated-4)
det(patch-8, the-6)
amod(patch-8, attached-7)
nsubj(solution-13, patch-8)
prep_to(patch-8, 2.1-HEAD-10)
cop(solution-13, was-11)
poss(solution-13, my-12)
det(issue-16, this-15)
prep_to(solution-13, issue-16)

The/DT following/VBG are/VBP a/DT list/NN of/IN changes/NNS ,/, some/DT of/IN which/WDT may/MD be/VB beyond/IN the/DT scope/NN of/IN what/WP was/VBD necessary/JJ and/CC violate/VBP various/JJ development/NN API/NN integrity/NN rules/NNS ./. 

(ROOT (S (NP (DT The) (VBG following)) (VP (VBP are) (NP (NP (DT a) (NN list)) (PP (IN of) (NP (NP (NNS changes)) (, ,) (SBAR (WHNP (NP (DT some)) (WHPP (IN of) (WHNP (WDT which)))) (S (VP (MD may) (VP (VB be) (PP (IN beyond) (NP (NP (DT the) (NN scope)) (PP (IN of) (SBAR (WHNP (WP what)) (S (VP (VP (VBD was) (ADJP (JJ necessary))) (CC and) (VP (VBP violate) (NP (JJ various) (NN development) (NN API) (NN integrity) (NNS rules))))))))))))))))) (. .)))

root(ROOT-0, list-5)
nsubj(list-5, The-1)
amod(The-1, following-2)
cop(list-5, are-3)
det(list-5, a-4)
prep_of(list-5, changes-7)
nsubj(be-13, some-9)
prep_of(some-9, which-11)
aux(be-13, may-12)
rcmod(changes-7, be-13)
det(scope-16, the-15)
prep_beyond(be-13, scope-16)
nsubj(necessary-20, what-18)
nsubj(violate-22, what-18)
cop(necessary-20, was-19)
prepc_of(scope-16, necessary-20)
prepc_of(scope-16, violate-22)
conj_and(necessary-20, violate-22)
amod(rules-27, various-23)
nn(rules-27, development-24)
nn(rules-27, API-25)
nn(rules-27, integrity-26)
dobj(violate-22, rules-27)

If/IN this/DT is/VBZ the/DT case/NN ,/, I/PRP would/MD be/VB happy/JJ to/TO remove/alter/VB certain/JJ portions/NNS (/-LRB- and/CC I/PRP 'll/MD mention/VB some/DT discomforts/NNS I/PRP have/VBP below/IN as/RB well/RB )/-RRB- ./. 

(ROOT (S (SBAR (IN If) (S (NP (DT this)) (VP (VBZ is) (NP (DT the) (NN case))))) (, ,) (NP (PRP I)) (VP (MD would) (VP (VB be) (ADJP (JJ happy) (S (VP (TO to) (VP (VB remove/alter) (NP (NP (JJ certain) (NNS portions)) (PRN (-LRB- -LRB-) (CC and) (S (NP (PRP I)) (VP (MD 'll) (VP (VB mention) (NP (NP (DT some) (NNS discomforts)) (SBAR (S (NP (PRP I)) (VP (VBP have) (PP (IN below)) (ADVP (RB as) (RB well))))))))) (-RRB- -RRB-))))))))) (. .)))

root(ROOT-0, happy-10)
mark(case-5, If-1)
nsubj(case-5, this-2)
cop(case-5, is-3)
det(case-5, the-4)
advcl(happy-10, case-5)
nsubj(happy-10, I-7)
aux(happy-10, would-8)
cop(happy-10, be-9)
aux(remove/alter-12, to-11)
xcomp(happy-10, remove/alter-12)
amod(portions-14, certain-13)
dobj(remove/alter-12, portions-14)
cc(mention-19, and-16)
nsubj(mention-19, I-17)
aux(mention-19, 'll-18)
dep(portions-14, mention-19)
det(discomforts-21, some-20)
dobj(mention-19, discomforts-21)
nsubj(have-23, I-22)
rcmod(discomforts-21, have-23)
prep(have-23, below-24)
advmod(well-26, as-25)
advmod(have-23, well-26)

Changes/NNS :/: 

(ROOT (NP (NNS Changes) (: :)))

root(ROOT-0, Changes-1)

1/CD Added/VBD two/CD optional/JJ hooks/NNS ,/, cache_check_enabled/VBN and/CC cache_check_disabled/VBN :/: 

(ROOT (SINV (NP (CD 1)) (VP (VBD Added)) (NP (NP (CD two) (JJ optional) (NNS hooks)) (, ,) (VP (VBN cache_check_enabled) (CC and) (VBN cache_check_disabled))) (: :)))

root(ROOT-0, Added-2)
dep(Added-2, 1-1)
num(hooks-5, two-3)
amod(hooks-5, optional-4)
nsubj(Added-2, hooks-5)
vmod(hooks-5, cache_check_enabled-7)
vmod(hooks-5, cache_check_disabled-9)
conj_and(cache_check_enabled-7, cache_check_disabled-9)

A./NN cache_check_enabled/VBD is/VBZ run/VBN from/IN ap_cache_get_providers/NNS in/IN order/NN to/TO determine/VB if/IN a/DT particular/JJ uri/NN (/-LRB- or/CC other/JJ condition/NN )/-RRB- is/VBZ cause/NN to/TO enable/VB caching/NN ./. 

(ROOT (S (NP (NN A.)) (VP (VBD cache_check_enabled) (SBAR (S (VP (VBZ is) (VP (VBN run) (PP (IN from) (NP (NP (NNS ap_cache_get_providers)) (PP (IN in) (NP (NN order))))) (S (VP (TO to) (VP (VB determine) (SBAR (IN if) (S (NP (NP (DT a) (JJ particular) (NN uri)) (-LRB- -LRB-) (CC or) (NP (JJ other) (NN condition)) (-RRB- -RRB-)) (VP (VBZ is) (NP (NN cause) (S (VP (TO to) (VP (VB enable) (NP (NN caching))))))))))))))))) (. .)))

root(ROOT-0, cache_check_enabled-2)
nsubj(cache_check_enabled-2, A.-1)
auxpass(run-4, is-3)
ccomp(cache_check_enabled-2, run-4)
prep_from(run-4, ap_cache_get_providers-6)
prep_in(ap_cache_get_providers-6, order-8)
aux(determine-10, to-9)
xcomp(run-4, determine-10)
mark(cause-21, if-11)
det(uri-14, a-12)
amod(uri-14, particular-13)
nsubj(cause-21, uri-14)
amod(condition-18, other-17)
conj_or(uri-14, condition-18)
nsubj(cause-21, condition-18)
cop(cause-21, is-20)
advcl(determine-10, cause-21)
aux(enable-23, to-22)
vmod(cause-21, enable-23)
dobj(enable-23, caching-24)

The/DT default/NN handler/NN for/IN this/DT hook/NN implements/VBZ the/DT original/JJ functionality/NN by/IN iterating/VBG the/DT cacheenable/JJ list/NN and/CC adding/VBG each/DT entry/NN whose/WP$ left-most/JJ portion/NN of/IN the/DT uri/NN path/NN matches/NNS ./. 

(ROOT (S (NP (NP (DT The) (NN default) (NN handler)) (PP (IN for) (NP (DT this) (NN hook)))) (VP (VBZ implements) (NP (DT the) (JJ original) (NN functionality)) (PP (IN by) (S (VP (VP (VBG iterating) (NP (DT the) (JJ cacheenable) (NN list))) (CC and) (VP (VBG adding) (NP (NP (DT each) (NN entry)) (SBAR (WHNP (NP (WP$ whose) (JJ left-most) (NN portion)) (PP (IN of) (NP (DT the) (NN uri)))) (S (NP (NN path) (NNS matches)))))))))) (. .)))

root(ROOT-0, implements-7)
det(handler-3, The-1)
nn(handler-3, default-2)
nsubj(implements-7, handler-3)
det(hook-6, this-5)
prep_for(handler-3, hook-6)
det(functionality-10, the-8)
amod(functionality-10, original-9)
dobj(implements-7, functionality-10)
prepc_by(implements-7, iterating-12)
det(list-15, the-13)
amod(list-15, cacheenable-14)
dobj(iterating-12, list-15)
prepc_by(implements-7, adding-17)
conj_and(iterating-12, adding-17)
det(entry-19, each-18)
dobj(adding-17, entry-19)
poss(portion-22, whose-20)
amod(portion-22, left-most-21)
dep(matches-27, portion-22)
det(uri-25, the-24)
prep_of(portion-22, uri-25)
nn(matches-27, path-26)
rcmod(entry-19, matches-27)

B./NNP cache_check_disabled/NNP is/VBZ run/VBN from/IN ap_cache_get_provider/NN in/IN order/NN to/TO dermine/VB if/IN caching/NN should/MD be/VB disabled/JJ ./. 

(ROOT (S (NP (NNP B.) (NNP cache_check_disabled)) (VP (VBZ is) (VP (VBN run) (PP (IN from) (NP (NN ap_cache_get_provider))) (SBAR (IN in) (NN order) (S (VP (TO to) (VP (VB dermine) (SBAR (IN if) (S (NP (NN caching)) (VP (MD should) (VP (VB be) (VP (JJ disabled)))))))))))) (. .)))

root(ROOT-0, run-4)
nn(cache_check_disabled-2, B.-1)
nsubjpass(run-4, cache_check_disabled-2)
auxpass(run-4, is-3)
prep_from(run-4, ap_cache_get_provider-6)
mark(dermine-10, in-7)
dep(dermine-10, order-8)
aux(dermine-10, to-9)
advcl(run-4, dermine-10)
mark(disabled-15, if-11)
nsubj(disabled-15, caching-12)
aux(disabled-15, should-13)
aux(disabled-15, be-14)
advcl(dermine-10, disabled-15)

The/DT first/JJ hook/NN to/TO return/VB DECLINED/NNP causes/VBZ mod_cache/NN to/TO discontinue/VB trying/VBG to/TO find/VB a/DT provider/NN ./. 

(ROOT (S (NP (DT The) (JJ first) (NN hook) (S (VP (TO to) (VP (VB return) (NP (NNP DECLINED)))))) (VP (VBZ causes) (NP (NN mod_cache)) (S (VP (TO to) (VP (VB discontinue) (S (VP (VBG trying) (S (VP (TO to) (VP (VB find) (NP (DT a) (NN provider))))))))))) (. .)))

root(ROOT-0, causes-7)
det(hook-3, The-1)
amod(hook-3, first-2)
nsubj(causes-7, hook-3)
aux(return-5, to-4)
vmod(hook-3, return-5)
dobj(return-5, DECLINED-6)
dobj(causes-7, mod_cache-8)
aux(discontinue-10, to-9)
vmod(causes-7, discontinue-10)
xcomp(discontinue-10, trying-11)
aux(find-13, to-12)
xcomp(trying-11, find-13)
det(provider-15, a-14)
dobj(find-13, provider-15)

Again/RB ,/, the/DT default/NN handler/NN performs/VBZ the/DT original/JJ functionality/NN by/IN iterating/VBG the/DT cachedisable/JJ list/NN ./. 

(ROOT (S (ADVP (RB Again)) (, ,) (NP (DT the) (NN default) (NN handler)) (VP (VBZ performs) (NP (DT the) (JJ original) (NN functionality)) (PP (IN by) (S (VP (VBG iterating) (NP (DT the) (JJ cachedisable) (NN list)))))) (. .)))

root(ROOT-0, performs-6)
advmod(performs-6, Again-1)
det(handler-5, the-3)
nn(handler-5, default-4)
nsubj(performs-6, handler-5)
det(functionality-9, the-7)
amod(functionality-9, original-8)
dobj(performs-6, functionality-9)
prepc_by(performs-6, iterating-11)
det(list-14, the-12)
amod(list-14, cachedisable-13)
dobj(iterating-11, list-14)

In/IN addition/NN ,/, a/DT check_disable/JJ hook/NN may/MD return/VB CACHE_DEFER/NNP ,/, which/WDT results/VBZ in/IN mod_cache/NN refusing/VBG to/TO return/VB cached/JJ content/NN if/IN in/IN the/DT quick_handler/NN hook/NN ./. 

(ROOT (S (PP (IN In) (NP (NN addition))) (, ,) (NP (DT a) (JJ check_disable) (NN hook)) (VP (MD may) (VP (VB return) (NP (NP (NNP CACHE_DEFER)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ results) (PP (IN in) (NP (NP (NN mod_cache)) (VP (VBG refusing) (S (VP (TO to) (VP (VB return) (NP (JJ cached) (NN content)) (SBAR (IN if) (FRAG (PP (IN in) (NP (DT the) (NN quick_handler) (NN hook))))))))))))))))) (. .)))

root(ROOT-0, return-8)
prep_in(return-8, addition-2)
det(hook-6, a-4)
amod(hook-6, check_disable-5)
nsubj(return-8, hook-6)
aux(return-8, may-7)
dobj(return-8, CACHE_DEFER-9)
nsubj(results-12, which-11)
rcmod(CACHE_DEFER-9, results-12)
prep_in(results-12, mod_cache-14)
vmod(mod_cache-14, refusing-15)
aux(return-17, to-16)
xcomp(refusing-15, return-17)
amod(content-19, cached-18)
dobj(return-17, content-19)
mark(in-21, if-20)
advcl(return-17, in-21)
det(hook-24, the-22)
nn(hook-24, quick_handler-23)
pobj(in-21, hook-24)

Instead/RB it/PRP tries/VBZ again/RB from/IN a/DT regular/JJ content/NN hook/NN (/-LRB- see/VB below/IN )/-RRB- ./. 

(ROOT (S (ADVP (RB Instead)) (NP (PRP it)) (VP (VBZ tries) (ADVP (RB again)) (PP (IN from) (NP (NP (DT a) (JJ regular) (NN content) (NN hook)) (PRN (-LRB- -LRB-) (S (VP (VB see) (ADVP (IN below)))) (-RRB- -RRB-))))) (. .)))

root(ROOT-0, tries-3)
advmod(tries-3, Instead-1)
nsubj(tries-3, it-2)
advmod(tries-3, again-4)
det(hook-9, a-6)
amod(hook-9, regular-7)
nn(hook-9, content-8)
prep_from(tries-3, hook-9)
dep(hook-9, see-11)
advmod(see-11, below-12)

2/CD New/NNP optional/JJ function/NN :/: ap_cache_request_enable_provider/NN ./. 

(ROOT (NP (NP (CD 2) (ADJP (NNP New)) (JJ optional) (NN function)) (: :) (NP (NN ap_cache_request_enable_provider)) (. .)))

root(ROOT-0, function-4)
num(function-4, 2-1)
amod(function-4, New-2)
amod(function-4, optional-3)
dep(function-4, ap_cache_request_enable_provider-6)

Intended/VBN 

(ROOT (S (VP (VBN Intended))))

root(ROOT-0, Intended-1)

to/TO be/VB used/VBN by/IN those/DT who/WP hook/NN check_enabled/VBD to/TO add/VB a/DT provider/NN name/NN 

(ROOT (FRAG (S (VP (TO to) (VP (VB be) (VP (VBN used) (PP (IN by) (NP (NP (DT those)) (SBAR (WHNP (WP who)) (S (NP (NN hook)) (VP (VBD check_enabled) (S (VP (TO to) (VP (VB add) (NP (DT a) (NN provider) (NN name))))))))))))))))

root(ROOT-0, used-3)
aux(used-3, to-1)
auxpass(used-3, be-2)
agent(used-3, those-5)
dobj(check_enabled-8, who-6)
nsubj(check_enabled-8, hook-7)
rcmod(those-5, check_enabled-8)
aux(add-10, to-9)
xcomp(check_enabled-8, add-10)
det(name-13, a-11)
nn(name-13, provider-12)
dobj(add-10, name-13)

(/-LRB- "/`` type/NN "/'' seems/VBZ to/TO be/VB the/DT parlance/NN in/IN mod_cache/NN at/IN that/DT level/NN )/-RRB- 

(ROOT (PRN (-LRB- -LRB-) (S (NP (`` ``) (NN type) ('' '')) (VP (VBZ seems) (S (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN parlance)) (PP (IN in) (NP (NP (NN mod_cache)) (PP (IN at) (NP (DT that) (NN level))))))))))) (-RRB- -RRB-)))

root(ROOT-0, seems-5)
nsubj(seems-5, type-3)
aux(parlance-9, to-6)
cop(parlance-9, be-7)
det(parlance-9, the-8)
xcomp(seems-5, parlance-9)
prep_in(parlance-9, mod_cache-11)
det(level-14, that-13)
prep_at(mod_cache-11, level-14)

and/CC optional/JJ version/NN number/NN to/TO the/DT list/NN of/IN providers/NNS that/WDT 

(ROOT (FRAG (CC and) (PP (NP (JJ optional) (NN version) (NN number)) (PP (TO to) (NP (NP (DT the) (NN list)) (PP (IN of) (NP (NP (NNS providers)) (SBAR (WHNP (WDT that))))))))))

root(ROOT-0, and-1)
amod(number-4, optional-2)
nn(number-4, version-3)
dep(and-1, number-4)
det(list-7, the-6)
prep_to(and-1, list-7)
prep_of(list-7, providers-9)
rcmod(providers-9, that-10)

ap_cache_get_providers/NNS (/-LRB- )/-RRB- will/MD try/VB to/TO lookup/NN ./. 

(ROOT (S (NP (NP (NNS ap_cache_get_providers)) (-LRB- -LRB-) (PP (-RRB- -RRB-))) (VP (MD will) (VP (VB try) (PP (TO to) (NP (NN lookup))))) (. .)))

root(ROOT-0, try-5)
nsubj(try-5, ap_cache_get_providers-1)
aux(try-5, will-4)
prep_to(try-5, lookup-7)

Using/VBG ap_cache_request_enable_provider/NN is/VBZ a/DT module/NN 's/POS way/NN of/IN telling/VBG mod_cache/NN to/TO attempt/VB caching/NN ./. 

(ROOT (S (S (VP (VBG Using) (NP (NN ap_cache_request_enable_provider)))) (VP (VBZ is) (NP (NP (NP (DT a) (NN module) (POS 's)) (NN way)) (PP (IN of) (S (VP (VBG telling) (NP (NN mod_cache)) (S (VP (TO to) (VP (VB attempt) (NP (NN caching)))))))))) (. .)))

root(ROOT-0, way-7)
csubj(way-7, Using-1)
dobj(Using-1, ap_cache_request_enable_provider-2)
cop(way-7, is-3)
det(module-5, a-4)
poss(way-7, module-5)
prepc_of(way-7, telling-9)
dobj(telling-9, mod_cache-10)
aux(attempt-12, to-11)
xcomp(telling-9, attempt-12)
dobj(attempt-12, caching-13)

The/DT func/JJ name/NN is/VBZ tad/NN cumbersome/JJ ,/, the/DT "/`` request/NN "/'' is/VBZ only/RB in/IN there/EX to/TO give/VB some/DT indication/NN that/IN it/PRP is/VBZ a/DT per-request/JJ call/NN ,/, not/RB a/DT general-use/JJ function/NN for/IN enabling/VBG providers/NNS ./. 

(ROOT (S (S (NP (DT The) (JJ func) (NN name)) (VP (VBZ is) (ADJP (NP (NN tad)) (JJ cumbersome)))) (, ,) (NP (DT the) (`` ``) (NN request) ('' '')) (VP (VBZ is) (SBAR (RB only) (IN in) (S (NP (EX there)) (VP (TO to) (VP (VB give) (NP (DT some) (NN indication)) (SBAR (IN that) (S (NP (PRP it)) (VP (VBZ is) (NP (DT a) (JJ per-request) (NN call)) (, ,) (RB not) (NP (NP (DT a) (JJ general-use) (NN function)) (PP (IN for) (S (VP (VBG enabling) (NP (NNS providers)))))))))))))) (. .)))

root(ROOT-0, is-12)
det(name-3, The-1)
amod(name-3, func-2)
nsubj(cumbersome-6, name-3)
cop(cumbersome-6, is-4)
npadvmod(cumbersome-6, tad-5)
ccomp(is-12, cumbersome-6)
det(request-10, the-8)
nsubj(is-12, request-10)
advmod(give-17, only-13)
mark(give-17, in-14)
expl(give-17, there-15)
aux(give-17, to-16)
advcl(is-12, give-17)
det(indication-19, some-18)
dobj(give-17, indication-19)
mark(call-25, that-20)
nsubj(call-25, it-21)
cop(call-25, is-22)
det(call-25, a-23)
amod(call-25, per-request-24)
ccomp(give-17, call-25)
neg(function-30, not-27)
det(function-30, a-28)
amod(function-30, general-use-29)
dep(call-25, function-30)
prepc_for(function-30, enabling-32)
dobj(enabling-32, providers-33)

Perhaps/RB this/DT should/MD be/VB an/DT optional/JJ ,/, because/IN it/PRP 's/VBZ functionally/RB identical/JJ to/TO a/DT normal/JJ API/NNP call/NN ./. 

(ROOT (S (ADVP (RB Perhaps)) (NP (DT this)) (VP (MD should) (VP (VB be) (NP (DT an) (JJ optional)) (, ,) (SBAR (IN because) (S (NP (PRP it)) (VP (VBZ 's) (ADJP (RB functionally) (JJ identical) (PP (TO to) (NP (DT a) (JJ normal) (NNP API) (NN call))))))))) (. .)))

root(ROOT-0, optional-6)
advmod(optional-6, Perhaps-1)
nsubj(optional-6, this-2)
aux(optional-6, should-3)
cop(optional-6, be-4)
det(optional-6, an-5)
mark(identical-12, because-8)
nsubj(identical-12, it-9)
cop(identical-12, 's-10)
advmod(identical-12, functionally-11)
advcl(optional-6, identical-12)
det(call-17, a-14)
amod(call-17, normal-15)
nn(call-17, API-16)
prep_to(identical-12, call-17)

If/IN that/DT is/VBZ the/DT case/NN ,/, then/RB check_enabled/VBD and/CC check_disabled/VBD should/MD n't/RB be/VB optional/JJ hooks/NNS either/CC ./. 

(ROOT (S (SBAR (IN If) (S (NP (DT that)) (VP (VBZ is) (NP (DT the) (NN case))))) (, ,) (NP (RB then)) (VP (VP (VBD check_enabled)) (CC and) (VP (VBD check_disabled) (SBAR (S (VP (MD should) (RB n't) (VP (VB be) (NP (JJ optional) (NNS hooks)) (ADVP (CC either)))))))) (. .)))

root(ROOT-0, check_enabled-8)
mark(case-5, If-1)
nsubj(case-5, that-2)
cop(case-5, is-3)
det(case-5, the-4)
advcl(check_enabled-8, case-5)
nsubj(check_enabled-8, then-7)
nsubj(check_disabled-10, then-7)
conj_and(check_enabled-8, check_disabled-10)
aux(hooks-15, should-11)
neg(hooks-15, n't-12)
cop(hooks-15, be-13)
amod(hooks-15, optional-14)
ccomp(check_disabled-10, hooks-15)
advmod(hooks-15, either-16)

3/CD Added/VBD a/DT content/NN handler/NN to/TO mod_cache/VB so/RB that/IN it/PRP (/-LRB- or/CC others/NNS )/-RRB- can/MD choose/VB ,/, 

(ROOT (S (NP (CD 3)) (VP (VBD Added) (NP (DT a) (NN content) (NN handler)) (S (VP (TO to) (VP (VB mod_cache) (SBAR (RB so) (IN that) (S (NP (NP (PRP it)) (-LRB- -LRB-) (CC or) (NP (NNS others)) (-RRB- -RRB-)) (VP (MD can) (VP (VB choose))))))))) (, ,)))

root(ROOT-0, Added-2)
nsubj(Added-2, 3-1)
det(handler-5, a-3)
nn(handler-5, content-4)
dobj(Added-2, handler-5)
aux(mod_cache-7, to-6)
vmod(Added-2, mod_cache-7)
advmod(choose-16, so-8)
mark(choose-16, that-9)
nsubj(choose-16, it-10)
conj_or(it-10, others-13)
nsubj(choose-16, others-13)
aux(choose-16, can-15)
advcl(mod_cache-7, choose-16)

selectively/RB ,/, to/TO handle/VB a/DT request/NN _/NN after/IN _/CD other/JJ modules/NNS have/VBP taken/VBN 

(ROOT (PRN (ADVP (RB selectively)) (, ,) (SBAR (X (TO to)) (S (S (VP (VB handle) (NP (DT a) (NN request) (NN _)) (PP (IN after) (NP (CD _) (JJ other) (NNS modules))))) (VP (VBP have) (VP (VBN taken)))))))

root(ROOT-0, taken-13)
dep(taken-13, selectively-1)
dep(taken-13, to-3)
csubj(taken-13, handle-4)
det(_-7, a-5)
nn(_-7, request-6)
dobj(handle-4, _-7)
num(modules-11, _-9)
amod(modules-11, other-10)
prep_after(handle-4, modules-11)
aux(taken-13, have-12)

their/PRP$ turn/NN ./. 

(ROOT (FRAG (NP (PRP$ their) (NN turn)) (. .)))

root(ROOT-0, turn-2)
poss(turn-2, their-1)

Particularly/RB useful/JJ for/IN mod_rewrite/NN ./. 

(ROOT (FRAG (ADJP (RB Particularly) (JJ useful) (PP (IN for) (NP (NN mod_rewrite)))) (. .)))

root(ROOT-0, useful-2)
advmod(useful-2, Particularly-1)
prep_for(useful-2, mod_rewrite-4)

Additionally/RB ,/, the/DT 

(ROOT (NP (NP (RB Additionally)) (, ,) (NP (DT the))))

root(ROOT-0, Additionally-1)
appos(Additionally-1, the-3)

request/NN handler/NN must/MD be/VB set/VBN to/TO "/`` cache-server/NN "/'' ,/, which/WDT is/VBZ done/VBN 

(ROOT (S (NP (NN request) (NN handler)) (VP (MD must) (VP (VB be) (VP (VBN set) (PP (TO to) (NP (NP (`` ``) (NN cache-server) ('' '')) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN done))))))))))))

root(ROOT-0, set-5)
nn(handler-2, request-1)
nsubjpass(set-5, handler-2)
aux(set-5, must-3)
auxpass(set-5, be-4)
prep_to(set-5, cache-server-8)
nsubjpass(done-13, which-11)
auxpass(done-13, is-12)
rcmod(cache-server-8, done-13)

automatically/RB if/IN a/DT check_disabled/JJ handler/NN returns/NNS CACHE_DEFER/NN inside/IN 

(ROOT (FRAG (ADVP (RB automatically)) (PP (PP (IN if) (NP (DT a) (JJ check_disabled) (NN handler) (NNS returns) (NN CACHE_DEFER))) (PP (IN inside)))))

root(ROOT-0, automatically-1)
det(CACHE_DEFER-7, a-3)
amod(CACHE_DEFER-7, check_disabled-4)
nn(CACHE_DEFER-7, handler-5)
nn(CACHE_DEFER-7, returns-6)
prep_if(automatically-1, CACHE_DEFER-7)
prep(automatically-1, inside-8)

the/DT context/NN of/IN cache_url_handler/NN ./. 

(ROOT (NP (NP (DT the) (NN context)) (PP (IN of) (NP (NN cache_url_handler))) (. .)))

root(ROOT-0, context-2)
det(context-2, the-1)
prep_of(context-2, cache_url_handler-4)

mod_rewrite/NN can/MD also/RB enable/VB caching/NN 

(ROOT (S (NP (NN mod_rewrite)) (VP (MD can) (ADVP (RB also)) (VP (VB enable) (NP (NN caching))))))

root(ROOT-0, enable-4)
nsubj(enable-4, mod_rewrite-1)
aux(enable-4, can-2)
advmod(enable-4, also-3)
dobj(enable-4, caching-5)

this/DT way/NN by/IN setting/VBG the/DT content/NN handler/NN during/IN a/DT rewrite/VBP rule/NN ./. 

(ROOT (S (NP (NP (DT this) (NN way)) (PP (IN by) (S (VP (VBG setting) (NP (DT the) (NN content) (NN handler)) (PP (IN during) (NP (DT a))))))) (VP (VBP rewrite) (NP (NN rule))) (. .)))

root(ROOT-0, rewrite-10)
det(way-2, this-1)
nsubj(rewrite-10, way-2)
prepc_by(way-2, setting-4)
det(handler-7, the-5)
nn(handler-7, content-6)
dobj(setting-4, handler-7)
prep_during(setting-4, a-9)
dobj(rewrite-10, rule-11)

In/IN my/PRP$ case/NN ,/, this/DT is/VBZ useful/JJ for/IN enabling/VBG both/CC reverse/JJ proxy/NN and/CC 

(ROOT (S (PP (IN In) (NP (PRP$ my) (NN case))) (, ,) (NP (DT this)) (VP (VBZ is) (ADJP (JJ useful) (PP (IN for) (S (VP (VBG enabling) (ADVP (CC both)) (NP (JJ reverse) (NX (NX (NN proxy)) (CC and))))))))))

root(ROOT-0, useful-7)
poss(case-3, my-2)
prep_in(useful-7, case-3)
nsubj(useful-7, this-5)
cop(useful-7, is-6)
prepc_for(useful-7, enabling-9)
advmod(enabling-9, both-10)
amod(proxy-12, reverse-11)
dobj(enabling-9, proxy-12)
cc(proxy-12, and-13)

caching/VBG for/IN requests/NNS that/WDT meet/VBP certain/JJ header/NN constraints/NNS ./. 

(ROOT (S (VP (VBG caching) (PP (IN for) (NP (NP (NNS requests)) (SBAR (WHNP (WDT that)) (S (VP (VBP meet) (NP (JJ certain) (NN header) (NNS constraints)))))))) (. .)))

root(ROOT-0, caching-1)
prep_for(caching-1, requests-3)
nsubj(meet-5, that-4)
rcmod(requests-3, meet-5)
amod(constraints-8, certain-6)
nn(constraints-8, header-7)
dobj(meet-5, constraints-8)

4/CD Added/VBD a/DT new/JJ directive/NN "/`` CacheDefer/NNP "/'' ,/, which/WDT when/WRB toggled/VBN on/IN forces/NNS 

(ROOT (FRAG (FRAG (NP (CD 4)) (VP (VBD Added) (NP (DT a) (JJ new) (NN directive) (`` ``) (NP (NNP CacheDefer)) ('' '')))) (, ,) (FRAG (WHNP (WDT which)) (SBAR (WHADVP (WRB when)) (S (VP (VBN toggled) (PP (IN on) (NP (NNS forces)))))))))

root(ROOT-0, 4-1)
dep(4-1, Added-2)
det(directive-5, a-3)
amod(directive-5, new-4)
dobj(Added-2, directive-5)
dep(directive-5, CacheDefer-7)
dep(toggled-12, which-10)
advmod(toggled-12, when-11)
dep(4-1, toggled-12)
prep_on(toggled-12, forces-14)

the/DT above/JJ behavior/NN (/-LRB- handling/NN from/IN the/DT content_handler/NN )/-RRB- to/TO be/VB the/DT 

(ROOT (S (NP (NP (NP (DT the) (JJ above) (NN behavior)) (PRN (-LRB- -LRB-) (NP (NP (NN handling)) (PP (IN from) (NP (DT the) (NN content_handler)))) (-RRB- -RRB-))) (SBAR (S (VP (TO to) (VP (VB be) (NP (DT the)))))))))

root(ROOT-0, behavior-3)
det(behavior-3, the-1)
amod(behavior-3, above-2)
dep(behavior-3, handling-5)
det(content_handler-8, the-7)
prep_from(handling-5, content_handler-8)
aux(the-12, to-10)
cop(the-12, be-11)
vmod(behavior-3, the-12)

default/NN ./. 

(ROOT (NP (NN default) (. .)))

root(ROOT-0, default-1)

This/DT was/VBD completely/RB arbitrary/JJ ,/, however/RB it/PRP provided/VBD the/DT 

(ROOT (S (NP (DT This)) (VP (VBD was) (ADJP (RB completely) (JJ arbitrary)) (, ,) (SBAR (WHADVP (RB however)) (S (NP (PRP it)) (VP (VBD provided) (NP (DT the))))))))

root(ROOT-0, arbitrary-4)
nsubj(arbitrary-4, This-1)
cop(arbitrary-4, was-2)
advmod(arbitrary-4, completely-3)
advmod(provided-8, however-6)
nsubj(provided-8, it-7)
dep(arbitrary-4, provided-8)
dobj(provided-8, the-9)

functionality/NN I/PRP needed/VBD and/CC was/VBD useful/JJ for/IN testing/NN ./. 

(ROOT (S (NP (NN functionality)) (NP (PRP I)) (VP (VP (VBD needed)) (CC and) (VP (VBD was) (ADJP (JJ useful)) (PP (IN for) (NP (NN testing))))) (. .)))

root(ROOT-0, needed-3)
nsubj(needed-3, functionality-1)
nsubj(useful-6, functionality-1)
nsubj(needed-3, I-2)
cop(useful-6, was-5)
conj_and(needed-3, useful-6)
prep_for(useful-6, testing-8)

Obviously/RB ,/, 

(ROOT (FRAG (PP (RB Obviously)) (, ,)))

root(ROOT-0, Obviously-1)

with/IN the/DT above/JJ changes/NNS this/DT could/MD be/VB done/VBN from/IN anywhere/RB ./. 

(ROOT (S (PP (IN with) (NP (DT the) (JJ above) (NNS changes))) (NP (DT this)) (VP (MD could) (VP (VB be) (VP (VBN done) (PP (IN from) (NP (RB anywhere)))))) (. .)))

root(ROOT-0, done-8)
det(changes-4, the-2)
amod(changes-4, above-3)
prep_with(done-8, changes-4)
nsubjpass(done-8, this-5)
aux(done-8, could-6)
auxpass(done-8, be-7)
prep(done-8, from-9)
pobj(from-9, anywhere-10)

Not/RB crazy/JJ 

(ROOT (FRAG (RB Not) (ADJP (JJ crazy))))

root(ROOT-0, Not-1)
dep(Not-1, crazy-2)

about/IN the/DT name/NN either/RB ,/, it/PRP is/VBZ ./. 

(ROOT (S (PP (PP (IN about) (NP (DT the) (NN name))) (ADVP (RB either))) (, ,) (NP (PRP it)) (VP (VBZ is)) (. .)))

root(ROOT-0, is-7)
det(name-3, the-2)
prep_about(is-7, name-3)
dep(is-7, either-4)
nsubj(is-7, it-6)

./. 

(ROOT (NP (. .)))


non-intuitive/JJ for/IN those/DT unfamiliar/JJ 

(ROOT (ADJP (JJ non-intuitive) (PP (IN for) (NP (DT those) (JJ unfamiliar)))))

root(ROOT-0, non-intuitive-1)
det(unfamiliar-4, those-3)
prep_for(non-intuitive-1, unfamiliar-4)

with/IN the/DT code/NN ./. 

(ROOT (FRAG (PP (IN with) (NP (DT the) (NN code))) (. .)))

root(ROOT-0, with-1)
det(code-3, the-2)
pobj(with-1, code-3)

5/CD The/DT majority/NN of/IN mod_cache/NN ./. 

(ROOT (NP (NP (CD 5)) (NP (NP (DT The) (NN majority)) (PP (IN of) (NP (NN mod_cache)))) (. .)))

root(ROOT-0, 5-1)
det(majority-3, The-2)
dep(5-1, majority-3)
prep_of(majority-3, mod_cache-5)

h/NN internals/NNS were/VBD moved/VBN to/TO cache_private/VB ./. 

(ROOT (S (NP (NN h) (NNS internals)) (VP (VBD were) (VP (VBN moved) (S (VP (TO to) (VP (VB cache_private)))))) (. .)))

root(ROOT-0, moved-4)
nn(internals-2, h-1)
nsubjpass(moved-4, internals-2)
auxpass(moved-4, were-3)
aux(cache_private-6, to-5)
xcomp(moved-4, cache_private-6)

h/NN ,/, due/JJ 

(ROOT (FRAG (NP (NN h)) (, ,) (ADVP (JJ due))))

root(ROOT-0, h-1)
dep(h-1, due-3)

to/TO the/DT fact/NN that/IN there/EX now/RB exist/VBP some/DT intentionally/RB public/JJ exports/NNS ./. 

(ROOT (FRAG (PP (TO to) (NP (NP (DT the) (NN fact)) (SBAR (IN that) (S (NP (EX there)) (ADVP (RB now)) (VP (VBP exist) (NP (DT some) (ADJP (RB intentionally) (JJ public)) (NNS exports))))))) (. .)))

root(ROOT-0, to-1)
det(fact-3, the-2)
pobj(to-1, fact-3)
mark(exist-7, that-4)
expl(exist-7, there-5)
advmod(exist-7, now-6)
dep(fact-3, exist-7)
det(exports-11, some-8)
advmod(public-10, intentionally-9)
amod(exports-11, public-10)
dobj(exist-7, exports-11)

The/DT now/RB highly/RB minimalized/VBN mod_cache/NN ./. 

(ROOT (S (NP (DT The) (ADJP (RB now) (RB highly))) (VP (VBN minimalized) (NP (NN mod_cache))) (. .)))

root(ROOT-0, minimalized-4)
det(highly-3, The-1)
advmod(highly-3, now-2)
nsubj(minimalized-4, highly-3)
dobj(minimalized-4, mod_cache-5)

h/NN added/VBD to/TO $/$ top_srcdir/JJ //: Makefile.in/NN 

(ROOT (S (NP (NN h)) (VP (VBD added) (PP (TO to) (NP (NP (ADJP ($ $) (JJ top_srcdir))) (PRN (: /) (NP (NN Makefile.in))))))))

root(ROOT-0, added-2)
nsubj(added-2, h-1)
prep_to(added-2, $-4)
dep($-4, top_srcdir-5)
punct(Makefile.in-7, /-6)
dep($-4, Makefile.in-7)

for/IN the/DT install-include/JJ target/NN ./. 

(ROOT (FRAG (PP (IN for) (NP (DT the) (JJ install-include) (NN target))) (. .)))

root(ROOT-0, for-1)
det(target-4, the-2)
amod(target-4, install-include-3)
pobj(for-1, target-4)

All/DT mod_cache/JJ related/JJ sources/NNS that/WDT 

(ROOT (NP (NP (DT All)) (NP (NP (JJ mod_cache) (JJ related) (NNS sources)) (SBAR (WHNP (WDT that))))))

root(ROOT-0, All-1)
amod(sources-4, mod_cache-2)
amod(sources-4, related-3)
dep(All-1, sources-4)
rcmod(sources-4, that-5)

previously/RB referenced/VBN mod_cache/NN ./. 

(ROOT (S (VP (ADVP (RB previously)) (VBN referenced) (NP (NN mod_cache))) (. .)))

root(ROOT-0, referenced-2)
advmod(referenced-2, previously-1)
dobj(referenced-2, mod_cache-3)

h/NN changed/VBD to/TO cache_private/VB ./. 

(ROOT (S (NP (NN h)) (VP (VBD changed) (S (VP (TO to) (VP (VB cache_private))))) (. .)))

root(ROOT-0, changed-2)
nsubj(changed-2, h-1)
aux(cache_private-4, to-3)
xcomp(changed-2, cache_private-4)

h./NN 

(ROOT (NP (NN h.)))

root(ROOT-0, h.-1)

Might/NNP need/VBP some/DT dependancy/NN fixups/NNS ,/, I/PRP did/VBD n't/RB go/VB that/IN far/RB ./. 

(ROOT (S (S (NP (NNP Might)) (VP (VBP need) (NP (DT some) (NN dependancy) (NNS fixups)))) (, ,) (NP (PRP I)) (VP (VBD did) (RB n't) (VP (VB go) (ADVP (IN that) (RB far)))) (. .)))

root(ROOT-0, go-10)
nsubj(need-2, Might-1)
ccomp(go-10, need-2)
det(fixups-5, some-3)
nn(fixups-5, dependancy-4)
dobj(need-2, fixups-5)
nsubj(go-10, I-7)
aux(go-10, did-8)
neg(go-10, n't-9)
advmod(go-10, that-11)
advmod(that-11, far-12)

Thank/VB you/PRP for/IN your/PRP$ time/NN ./. 

(ROOT (S (VP (VB Thank) (NP (PRP you)) (PP (IN for) (NP (PRP$ your) (NN time)))) (. .)))

root(ROOT-0, Thank-1)
dobj(Thank-1, you-2)
poss(time-5, your-4)
prep_for(Thank-1, time-5)

I/PRP hope/VBP this/DT will/MD be/VB of/IN some/DT use/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VBP hope) (SBAR (S (NP (DT this)) (VP (MD will) (VP (VB be) (PP (IN of) (NP (DT some) (NN use)))))))) (. .)))

root(ROOT-0, hope-2)
nsubj(hope-2, I-1)
nsubj(be-5, this-3)
aux(be-5, will-4)
ccomp(hope-2, be-5)
det(use-8, some-7)
prep_of(be-5, use-8)

If/IN there/EX are/VBP any/DT questions/NNS or/CC requested/VBN changes/NNS ,/, please/VB feel/VB free/JJ to/TO let/VB me/PRP know/VB (/-LRB- or/CC just/RB have/VBP bugzilla/NN do/VBP it/PRP =P/NN )/-RRB- 

(ROOT (SBAR (IN If) (S (NP (EX there)) (VP (VBP are) (UCP (NP (DT any) (NNS questions)) (CC or) (VP (VBN requested) (NP (NNS changes)) (PRN (, ,) (INTJ (VB please))) (S (VP (VB feel) (ADJP (JJ free) (S (VP (TO to) (VP (VB let) (S (NP (PRP me)) (VP (VB know))) (PRN (-LRB- -LRB-) (CC or) (VP (ADVP (RB just)) (VP (VBP have) (NP (NP (NN bugzilla)) (SBAR (S (VP (VBP do) (NP (PRP it)) (NP (NN =P)))))))) (-RRB- -RRB-))))))))))))))

root(ROOT-0, are-3)
mark(are-3, If-1)
expl(are-3, there-2)
det(questions-5, any-4)
nsubj(are-3, questions-5)
nsubj(are-3, requested-7)
conj_or(questions-5, requested-7)
dobj(requested-7, changes-8)
discourse(requested-7, please-10)
dep(requested-7, feel-11)
acomp(feel-11, free-12)
aux(let-14, to-13)
xcomp(free-12, let-14)
nsubj(know-16, me-15)
ccomp(let-14, know-16)
cc(have-20, or-18)
advmod(have-20, just-19)
dep(let-14, have-20)
dobj(have-20, bugzilla-21)
rcmod(bugzilla-21, do-22)
iobj(do-22, it-23)
dobj(do-22, =P-24)

Jesse/NNP Sipprell/NNP 

(ROOT (NP (NNP Jesse) (NNP Sipprell)))

root(ROOT-0, Sipprell-2)
nn(Sipprell-2, Jesse-1)

