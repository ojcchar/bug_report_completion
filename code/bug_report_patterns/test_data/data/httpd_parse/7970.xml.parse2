loading/VBG cache/NN //: root/httpd/NN -2.0.35/CD //: ./. 

(ROOT (S (VP (VBG loading) (NP (NP (NN cache)) (PRN (: /) (NP (NN root/httpd) (CD -2.0.35)) (: /)))) (. .)))

root(ROOT-0, loading-1)
dobj(loading-1, cache-2)
punct(root/httpd-4, /-3)
dep(cache-2, root/httpd-4)
num(root/httpd-4, -2.0.35-5)
punct(root/httpd-4, /-6)

//: config.cache/NN checking/NN host/NN system/NN type/NN . . ./: configure/VB :/: error/NN :/: can/MD not/RB guess/VB host/NN type/NN ;/: you/PRP must/MD specify/VB one/CD configure/NN failed/VBD for/IN xml/expat/NN configure/NN failed/VBD for/IN srclib/apr-util/NN 

(ROOT (PRN (: /) (NP (NP (NN config.cache) (NN checking) (NN host)) (SBAR (S (S (NP (NN system) (NN type)) (: ...) (S (VP (VP (VB configure)) (: :) (VP (NN error)))) (: :) (VP (MD can) (RB not) (VP (VB guess) (NP (NN host) (NN type))))) (: ;) (S (NP (PRP you)) (VP (MD must) (VP (VB specify) (SBAR (S (NP (CD one) (NN configure)) (VP (VBD failed) (SBAR (IN for) (S (NP (NN xml/expat) (NN configure)) (VP (VBD failed) (PP (IN for) (NP (NN srclib/apr-util)))))))))))))))))

root(ROOT-0, host-4)
punct(host-4, /-1)
nn(host-4, config.cache-2)
nn(host-4, checking-3)
nn(type-6, system-5)
nsubj(guess-14, type-6)
parataxis(guess-14, configure-8)
dep(configure-8, error-10)
aux(guess-14, can-12)
neg(guess-14, not-13)
rcmod(host-4, guess-14)
nn(type-16, host-15)
dobj(guess-14, type-16)
nsubj(specify-20, you-18)
aux(specify-20, must-19)
parataxis(guess-14, specify-20)
num(configure-22, one-21)
nsubj(failed-23, configure-22)
ccomp(specify-20, failed-23)
mark(failed-27, for-24)
nn(configure-26, xml/expat-25)
nsubj(failed-27, configure-26)
advcl(failed-23, failed-27)
prep_for(failed-27, srclib/apr-util-29)

Even/RB when/WRB I/PRP specify/VBP :/: 

(ROOT (S (RB Even) (ADVP (WRB when)) (NP (PRP I)) (VP (VBP specify)) (: :)))

root(ROOT-0, specify-4)
advmod(specify-4, Even-1)
advmod(specify-4, when-2)
nsubj(specify-4, I-3)

--/: build/VB =/JJ powerpc-apple-bsd/NN --/: host/NN =/JJ powerpc-apple-bsd/NN 

(ROOT (PRN (: --) (S (VP (VB build) (NP (NP (JJ =) (NN powerpc-apple-bsd)) (: --) (NP (NN host) (JJ =) (NN powerpc-apple-bsd)))))))

root(ROOT-0, build-2)
amod(powerpc-apple-bsd-4, =-3)
dobj(build-2, powerpc-apple-bsd-4)
nn(powerpc-apple-bsd-8, host-6)
amod(powerpc-apple-bsd-8, =-7)
dep(powerpc-apple-bsd-4, powerpc-apple-bsd-8)

to/TO the/DT main/JJ configure/NN script/NN ,/, it/PRP does/VBZ not/RB pass/VB these/DT along/IN to/TO the/DT apr-util/NN 

(ROOT (S (PP (TO to) (NP (DT the) (JJ main) (NN configure) (NN script))) (, ,) (NP (PRP it)) (VP (VBZ does) (RB not) (VP (VB pass) (NP (DT these)) (ADVP (IN along) (PP (TO to) (NP (DT the) (NN apr-util))))))))

root(ROOT-0, pass-10)
det(script-5, the-2)
amod(script-5, main-3)
nn(script-5, configure-4)
prep_to(pass-10, script-5)
nsubj(pass-10, it-7)
aux(pass-10, does-8)
neg(pass-10, not-9)
dobj(pass-10, these-11)
advmod(pass-10, along-12)
det(apr-util-15, the-14)
prep_to(along-12, apr-util-15)

configure/VB script/NN ./. 

(ROOT (S (VP (VB configure) (NP (NN script))) (. .)))

root(ROOT-0, configure-1)
dobj(configure-1, script-2)

I/PRP created/VBD a/DT workaround/NN by/IN editing/NN line/NN 1947/CD of/IN the/DT main/JJ configure/NN script/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VBD created) (NP (DT a) (NN workaround)) (PP (IN by) (NP (NN editing) (NN line) (CD 1947))) (PP (IN of) (NP (DT the) (JJ main) (NN configure) (NN script)))) (. .)))

root(ROOT-0, created-2)
nsubj(created-2, I-1)
det(workaround-4, a-3)
dobj(created-2, workaround-4)
nn(line-7, editing-6)
prep_by(created-2, line-7)
num(line-7, 1947-8)
det(script-13, the-10)
amod(script-13, main-11)
nn(script-13, configure-12)
prep_of(created-2, script-13)

All/DT I/PRP did/VBD was/VBD add/VB the/DT two/CD switches/NNS to/TO that/DT line/NN so/IN that/IN when/WRB the/DT main/JJ configure/NN script/NN call/VB the/DT apr-util/JJ configure/NN ,/, the/DT values/NNS got/VBD passed/VBN ./. 

(ROOT (S (NP (NP (DT All)) (SBAR (S (NP (PRP I)) (VP (VBD did))))) (VP (VBD was) (VP (VB add) (NP (DT the) (CD two) (NNS switches)) (PP (TO to) (NP (DT that) (NN line))) (SBAR (IN so) (IN that) (S (SBAR (WHADVP (WRB when)) (S (NP (DT the) (JJ main) (NN configure) (NN script)) (VP (VB call) (NP (DT the) (JJ apr-util) (NN configure))))) (, ,) (NP (DT the) (NNS values)) (VP (VBD got) (VP (VBN passed))))))) (. .)))

root(ROOT-0, add-5)
nsubj(add-5, All-1)
nsubj(did-3, I-2)
rcmod(All-1, did-3)
aux(add-5, was-4)
det(switches-8, the-6)
num(switches-8, two-7)
dobj(add-5, switches-8)
det(line-11, that-10)
prep_to(add-5, line-11)
mark(passed-27, so-12)
mark(passed-27, that-13)
advmod(call-19, when-14)
det(script-18, the-15)
amod(script-18, main-16)
nn(script-18, configure-17)
nsubj(call-19, script-18)
advcl(passed-27, call-19)
det(configure-22, the-20)
amod(configure-22, apr-util-21)
dobj(call-19, configure-22)
det(values-25, the-24)
nsubjpass(passed-27, values-25)
auxpass(passed-27, got-26)
advcl(add-5, passed-27)

Once/RB this/DT was/VBD done/VBN ,/, the/DT main/JJ configure/NN worked/VBD fine/NN ./. 

(ROOT (S (SBAR (RB Once) (S (NP (DT this)) (VP (VBD was) (VP (VBN done))))) (, ,) (NP (DT the) (JJ main) (NN configure)) (VP (VBD worked) (NP (NN fine))) (. .)))

root(ROOT-0, worked-9)
advmod(done-4, Once-1)
nsubjpass(done-4, this-2)
auxpass(done-4, was-3)
advcl(worked-9, done-4)
det(configure-8, the-6)
amod(configure-8, main-7)
nsubj(worked-9, configure-8)
dobj(worked-9, fine-10)

Apace/RB 2.0.35/CD compiled/VBN fine/NN on/IN my/PRP$ 10.1.2/CD and/CC runs/VBZ great/JJ ./. 

(ROOT (FRAG (ADVP (RB Apace)) (NP (NP (CD 2.0.35)) (VP (VP (VBN compiled) (NP (NN fine)) (PP (IN on) (NP (PRP$ my) (CD 10.1.2)))) (CC and) (VP (VBZ runs) (ADJP (JJ great))))) (. .)))

root(ROOT-0, 2.0.35-2)
dep(2.0.35-2, Apace-1)
dep(2.0.35-2, compiled-3)
dobj(compiled-3, fine-4)
poss(10.1.2-7, my-6)
prep_on(compiled-3, 10.1.2-7)
dep(2.0.35-2, runs-9)
conj_and(compiled-3, runs-9)
acomp(runs-9, great-10)

Matthew/NNP 

(ROOT (NP (NNP Matthew)))

root(ROOT-0, Matthew-1)

