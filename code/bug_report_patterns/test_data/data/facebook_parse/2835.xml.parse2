Hi/NN _/SYM 

(ROOT (NP (NN Hi) (SYM _)))

root(ROOT-0, Hi-1)
dep(Hi-1, _-2)

I/PRP would/MD like/VB to/TO display/VB the/DT network/NN names/NNS without/IN storing/VBG them/PRP locally/RB . . ./: The/DT problem/NN with/IN fb/NN :/: networklink/NN is/VBZ that/IN it/PRP links/VBZ to/TO the/DT now/RB defunct/JJ network/NN pages/NNS _/VBP and/CC it/PRP is/VBZ not/RB currently/RB possible/JJ to/TO turn/VB off/RP the/DT link/NN ./. 

(ROOT (S (S (S (NP (PRP I)) (VP (MD would) (VP (VB like) (S (VP (TO to) (VP (VB display) (NP (DT the) (NN network) (NNS names)) (PP (IN without) (S (VP (VBG storing) (NP (PRP them)) (ADVP (RB locally))))))))))) (: ...) (S (NP (DT The) (NN problem)) (PP (IN with) (NP (NN fb)))) (: :) (S (NP (NN networklink)) (VP (VBZ is) (SBAR (IN that) (S (NP (PRP it)) (VP (VBZ links) (PP (TO to) (NP (NP (DT the) (ADJP (RB now) (JJ defunct)) (NN network)) (SBAR (S (NP (NNS pages)) (VP (VBP _)))))))))))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (RB not) (ADVP (RB currently)) (ADJP (JJ possible) (S (VP (TO to) (VP (VB turn) (PRT (RP off)) (NP (DT the) (NN link)))))))) (. .)))

root(ROOT-0, like-3)
nsubj(like-3, I-1)
aux(like-3, would-2)
aux(display-5, to-4)
xcomp(like-3, display-5)
det(names-8, the-6)
nn(names-8, network-7)
dobj(display-5, names-8)
prepc_without(display-5, storing-10)
dobj(storing-10, them-11)
advmod(storing-10, locally-12)
det(problem-15, The-14)
parataxis(like-3, problem-15)
dep(problem-15, with-16)
pobj(with-16, fb-17)
nsubj(is-20, networklink-19)
parataxis(like-3, is-20)
mark(links-23, that-21)
nsubj(links-23, it-22)
ccomp(is-20, links-23)
det(network-28, the-25)
advmod(defunct-27, now-26)
amod(network-28, defunct-27)
prep_to(links-23, network-28)
nsubj(_-30, pages-29)
rcmod(network-28, _-30)
nsubj(possible-36, it-32)
cop(possible-36, is-33)
neg(possible-36, not-34)
advmod(possible-36, currently-35)
conj_and(like-3, possible-36)
aux(turn-38, to-37)
xcomp(possible-36, turn-38)
prt(turn-38, off-39)
det(link-41, the-40)
dobj(turn-38, link-41)

If/IN you/PRP could/MD make/VB the/DT tag/NN linked/VBN =/JJ false/JJ available/JJ _/NN then/RB I/PRP could/MD access/VB the/DT network/NN name/NN without/IN the/DT link/NN ./. 

(ROOT (S (SBAR (IN If) (S (NP (PRP you)) (VP (MD could) (VP (VB make) (S (NP (DT the) (NN tag)) (VP (VBN linked) (NP (JJ =) (ADJP (JJ false) (JJ available)) (NN _)) (ADVP (RB then)))))))) (NP (PRP I)) (VP (MD could) (VP (VB access) (NP (DT the) (NN network) (NN name)) (PP (IN without) (NP (DT the) (NN link))))) (. .)))

root(ROOT-0, access-15)
mark(make-4, If-1)
nsubj(make-4, you-2)
aux(make-4, could-3)
advcl(access-15, make-4)
det(tag-6, the-5)
nsubj(linked-7, tag-6)
dep(make-4, linked-7)
amod(_-11, =-8)
amod(available-10, false-9)
amod(_-11, available-10)
dobj(linked-7, _-11)
advmod(linked-7, then-12)
nsubj(access-15, I-13)
aux(access-15, could-14)
det(name-18, the-16)
nn(name-18, network-17)
dobj(access-15, name-18)
det(link-21, the-20)
prep_without(access-15, link-21)

Alternately/RB _/CD you/PRP could/MD make/VB fb/NN :/: name/NN accept/VB the/DT network/NN id/NN to/TO produce/VB the/DT network/NN name/NN ./. 

(ROOT (S (S (X (ADVP (RB Alternately)) (NP (CD _))) (NP (PRP you)) (VP (MD could) (VP (VB make) (NP (NN fb))))) (: :) (S (NP (NN name)) (VP (VB accept) (S (NP (DT the) (NN network) (NN id)) (VP (TO to) (VP (VB produce) (NP (DT the) (NN network) (NN name))))))) (. .)))

root(ROOT-0, make-5)
dep(_-2, Alternately-1)
dep(make-5, _-2)
nsubj(make-5, you-3)
aux(make-5, could-4)
dobj(make-5, fb-6)
nsubj(accept-9, name-8)
parataxis(make-5, accept-9)
det(id-12, the-10)
nn(id-12, network-11)
dobj(accept-9, id-12)
aux(produce-14, to-13)
xcomp(accept-9, produce-14)
det(name-17, the-15)
nn(name-17, network-16)
dobj(produce-14, name-17)

Thanks/NNS !/. 

(ROOT (NP (NNS Thanks) (. !)))

root(ROOT-0, Thanks-1)

John/NNP 

(ROOT (NP (NNP John)))

root(ROOT-0, John-1)

