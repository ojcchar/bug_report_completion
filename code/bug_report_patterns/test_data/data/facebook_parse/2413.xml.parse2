If/IN you/PRP have/VBP an/DT input/NN field/NN in/IN your/PRP$ publisher/NN and/CC you/PRP tab/NN from/IN it/PRP to/TO the/DT comment/NN field/NN _/CD when/WRB the/DT javascript/NN triggers/VBZ to/TO remove/VB the/DT write/VB an/DT optional/JJ comment/NN . . ./: it/PRP somehow/RB forgets/VBZ to/TO enable/VB the/DT blinking/RB cursor/NN on/IN the/DT field/NN ./. 

(ROOT (S (SBAR (IN If) (S (NP (PRP you)) (VP (VBP have) (NP (NP (NP (DT an) (NN input) (NN field)) (PP (IN in) (NP (PRP$ your) (NN publisher)))) (CC and) (NP (NP (PRP you) (NN tab)) (PP (IN from) (NP (PRP it))))) (PP (TO to) (NP (NP (DT the) (NN comment) (NN field)) (NP (NP (CD _)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN javascript)) (VP (VBZ triggers) (S (VP (TO to) (VP (VB remove) (S (NP (DT the)) (VP (VB write) (NP (DT an) (JJ optional) (NN comment))))))))))) (: ...)))))) (NP (PRP it)) (ADVP (RB somehow)) (VP (VBZ forgets) (S (VP (TO to) (VP (VB enable) (NP (NP (DT the) (ADJP (RB blinking)) (NN cursor)) (PP (IN on) (NP (DT the) (NN field)))))))) (. .)))

root(ROOT-0, forgets-34)
mark(have-3, If-1)
nsubj(have-3, you-2)
advcl(forgets-34, have-3)
det(field-6, an-4)
nn(field-6, input-5)
dobj(have-3, field-6)
poss(publisher-9, your-8)
prep_in(field-6, publisher-9)
dep(tab-12, you-11)
dobj(have-3, tab-12)
conj_and(field-6, tab-12)
prep_from(tab-12, it-14)
det(field-18, the-16)
nn(field-18, comment-17)
prep_to(have-3, field-18)
dep(field-18, _-19)
advmod(triggers-23, when-20)
det(javascript-22, the-21)
nsubj(triggers-23, javascript-22)
rcmod(_-19, triggers-23)
aux(remove-25, to-24)
xcomp(triggers-23, remove-25)
nsubj(write-27, the-26)
ccomp(remove-25, write-27)
det(comment-30, an-28)
amod(comment-30, optional-29)
dobj(write-27, comment-30)
nsubj(forgets-34, it-32)
advmod(forgets-34, somehow-33)
aux(enable-36, to-35)
xcomp(forgets-34, enable-36)
det(cursor-39, the-37)
amod(cursor-39, blinking-38)
dobj(enable-36, cursor-39)
det(field-42, the-41)
prep_on(cursor-39, field-42)

If/IN you/PRP shift-tab/VBP back/RB and/CC in/IN again/RB _/CD it/PRP shows/VBZ up/RP just/RB fine/NN ./. 

(ROOT (S (SBAR (IN If) (S (NP (PRP you)) (VP (VBP shift-tab) (ADVP (ADVP (RB back)) (CC and) (PP (IN in) (NP (ADVP (RB again)) (CD _))))))) (NP (PRP it)) (VP (VBZ shows) (PRT (RP up)) (NP (RB just) (NN fine))) (. .)))

root(ROOT-0, shows-10)
mark(shift-tab-3, If-1)
nsubj(shift-tab-3, you-2)
advcl(shows-10, shift-tab-3)
advmod(shift-tab-3, back-4)
advmod(shift-tab-3, in-6)
conj_and(back-4, in-6)
advmod(_-8, again-7)
pobj(in-6, _-8)
nsubj(shows-10, it-9)
prt(shows-10, up-11)
advmod(fine-13, just-12)
dobj(shows-10, fine-13)

FF3/NN on/IN OSX/NNP if/IN it/PRP matters/VBZ ./. 

(ROOT (NP (NP (NN FF3)) (PP (IN on) (NP (NP (NNP OSX)) (SBAR (IN if) (S (NP (PRP it)) (VP (VBZ matters)))))) (. .)))

root(ROOT-0, FF3-1)
prep_on(FF3-1, OSX-3)
mark(matters-6, if-4)
nsubj(matters-6, it-5)
rcmod(OSX-3, matters-6)

hope/NN you/PRP don/VBP t/NN mind/NN all/PDT these/DT trivial/JJ user/NN facing/VBG type/NN things/NNS . . ./: I/PRP recall/VBP someone/NN saying/VBG they/PRP like/VBP to/TO get/VB bug/NN reports/NNS muhahahahaha/NN 

(ROOT (S (NP (NP (NN hope)) (SBAR (S (S (NP (PRP you)) (VP (VBP don) (S (NP (NN t) (NN mind)) (NP (PDT all) (DT these) (JJ trivial) (NN user)) (S (VP (VBG facing) (NP (NN type) (NNS things))))))) (: ...) (S (NP (PRP I)) (VP (VBP recall) (NP (NP (NN someone)) (VP (VBG saying) (NP (PRP they))))))))) (VP (VBP like) (S (VP (TO to) (VP (VB get) (NP (NN bug) (NNS reports) (NN muhahahahaha))))))))

root(ROOT-0, like-19)
nsubj(like-19, hope-1)
nsubj(don-3, you-2)
rcmod(hope-1, don-3)
nn(mind-5, t-4)
nsubj(facing-10, mind-5)
predet(user-9, all-6)
det(user-9, these-7)
amod(user-9, trivial-8)
dep(facing-10, user-9)
xcomp(don-3, facing-10)
nn(things-12, type-11)
dobj(facing-10, things-12)
nsubj(recall-15, I-14)
parataxis(don-3, recall-15)
dobj(recall-15, someone-16)
vmod(someone-16, saying-17)
dobj(saying-17, they-18)
aux(get-21, to-20)
xcomp(like-19, get-21)
nn(muhahahahaha-24, bug-22)
nn(muhahahahaha-24, reports-23)
dobj(get-21, muhahahahaha-24)

