I/PRP am/VBP not/RB a/DT tech/NN guy/NN _/CD but/CC my/PRP$ tech/NN guy/NN wrote/VBD this/DT to/TO me/PRP _/VBP if/IN i/FW was/VBD to/TO guess/VB about/IN what/WP was/VBD going/VBG on/IN _/CD id/NN say/VBP they/PRP have/VBP an/DT api/NN error/NN _/NN on/IN one/CD of/IN thier/NN datacenters/NNS ./. 

(ROOT (S (S (NP (PRP I)) (VP (VBP am) (RB not) (NP (DT a) (NN tech) (NN guy) (CD _)))) (CC but) (S (NP (PRP$ my) (NN tech) (NN guy)) (VP (VBD wrote) (SBAR (S (NP (NP (DT this)) (PP (TO to) (NP (PRP me)))) (VP (VBP _) (SBAR (IN if) (S (NP (FW i)) (VP (VBD was) (S (VP (TO to) (VP (VB guess) (PP (IN about) (SBAR (WHNP (WP what)) (S (VP (VBD was) (VP (VBG going) (PP (IN on) (NP (NP (CD _) (NN id)) (SBAR (S (VP (VBP say) (SBAR (S (NP (PRP they)) (VP (VBP have) (NP (NP (DT an) (NN api) (NN error) (NN _)) (PP (IN on) (NP (CD one))) (PP (IN of) (NP (NN thier) (NNS datacenters)))))))))))))))))))))))))))) (. .)))

root(ROOT-0, guy-6)
nsubj(guy-6, I-1)
cop(guy-6, am-2)
neg(guy-6, not-3)
det(guy-6, a-4)
nn(guy-6, tech-5)
num(guy-6, _-7)
poss(guy-11, my-9)
nn(guy-11, tech-10)
nsubj(wrote-12, guy-11)
conj_but(guy-6, wrote-12)
nsubj(_-16, this-13)
prep_to(this-13, me-15)
ccomp(wrote-12, _-16)
mark(was-19, if-17)
nsubj(was-19, i-18)
advcl(_-16, was-19)
aux(guess-21, to-20)
xcomp(was-19, guess-21)
nsubj(going-25, what-23)
aux(going-25, was-24)
prepc_about(guess-21, going-25)
num(id-28, _-27)
prep_on(going-25, id-28)
rcmod(id-28, say-29)
nsubj(have-31, they-30)
ccomp(say-29, have-31)
det(_-35, an-32)
nn(_-35, api-33)
nn(_-35, error-34)
dobj(have-31, _-35)
prep_on(_-35, one-37)
nn(datacenters-40, thier-39)
prep_of(_-35, datacenters-40)

when/WRB users/NNS get/VB sent/VBN to/TO that/DT data/NNS center/NN they/PRP get/VBP the/DT errors/NNS ./. 

(ROOT (S (SBAR (WHADVP (WRB when)) (S (NP (NNS users)) (VP (VB get) (VP (VBN sent) (PP (TO to) (NP (DT that) (NNS data) (NN center))))))) (NP (PRP they)) (VP (VBP get) (NP (DT the) (NNS errors))) (. .)))

root(ROOT-0, get-10)
advmod(sent-4, when-1)
nsubjpass(sent-4, users-2)
auxpass(sent-4, get-3)
advcl(get-10, sent-4)
det(center-8, that-6)
nn(center-8, data-7)
prep_to(sent-4, center-8)
nsubj(get-10, they-9)
det(errors-12, the-11)
dobj(get-10, errors-12)

users/NNS not/RB using/VBG that/IN one/CD are/VBP fine/JJ ./. 

(ROOT (NP (NP (NNS users)) (VP (RB not) (VBG using) (SBAR (IN that) (S (NP (CD one)) (VP (VBP are) (ADJP (JJ fine)))))) (. .)))

root(ROOT-0, users-1)
neg(using-3, not-2)
vmod(users-1, using-3)
mark(fine-7, that-4)
nsubj(fine-7, one-5)
cop(fine-7, are-6)
ccomp(using-3, fine-7)

which/WDT would/MD explain/VB why/WRB it/PRP works/VBZ for/IN us/PRP and/CC not/RB others/NNS ./. 

(ROOT (S (NP (WDT which)) (VP (MD would) (VP (VB explain) (SBAR (WHADVP (WRB why)) (S (NP (PRP it)) (VP (VBZ works) (PP (IN for) (NP (NP (PRP us)) (CC and) (NP (RB not) (NNS others))))))))) (. .)))

root(ROOT-0, explain-3)
nsubj(explain-3, which-1)
aux(explain-3, would-2)
advmod(works-6, why-4)
nsubj(works-6, it-5)
advcl(explain-3, works-6)
prep_for(works-6, us-8)
neg(others-11, not-10)
prep_for(works-6, others-11)
conj_and(us-8, others-11)

The/DT error/NN happens/VBZ only/RB during/IN one/CD function/NN within/IN my/PRP$ app/NN ./. 

(ROOT (S (NP (DT The) (NN error)) (VP (VBZ happens) (ADVP (RB only)) (PP (IN during) (NP (NP (CD one) (NN function)) (PP (IN within) (NP (PRP$ my) (NN app)))))) (. .)))

root(ROOT-0, happens-3)
det(error-2, The-1)
nsubj(happens-3, error-2)
advmod(happens-3, only-4)
num(function-7, one-6)
prep_during(happens-3, function-7)
poss(app-10, my-9)
prep_within(function-7, app-10)

Everything/NN is/VBZ fine/JJ on/IN my/PRP$ end/NN and/CC my/PRP$ tech/NN guy/NN says/VBZ this/DT is/VBZ what/WP is/VBZ happening/VBG -/: the/DT fb/NN user/NN id/NN isnt/NN always/RB getting/VBG sent/VBN thru/IN the/DT FB/NNP API/NNP ./. 

(ROOT (S (S (NP (NN Everything)) (VP (VBZ is) (ADJP (JJ fine) (PP (IN on) (NP (PRP$ my) (NN end)))))) (CC and) (S (NP (PRP$ my) (NN tech) (NN guy)) (VP (VBZ says) (SBAR (S (NP (DT this)) (VP (VBZ is) (NP (SBAR (WHNP (WP what)) (S (VP (VBZ is) (VP (VBG happening))))) (: -) (NP (NP (DT the) (NN fb) (NN user) (NN id) (NN isnt)) (VP (ADVP (RB always)) (VBG getting) (S (VP (VBN sent)))) (PP (IN thru) (NP (DT the) (NNP FB) (NNP API)))))))))) (. .)))

root(ROOT-0, fine-3)
nsubj(fine-3, Everything-1)
cop(fine-3, is-2)
poss(end-6, my-5)
prep_on(fine-3, end-6)
poss(guy-10, my-8)
nn(guy-10, tech-9)
nsubj(says-11, guy-10)
conj_and(fine-3, says-11)
nsubj(isnt-22, this-12)
cop(isnt-22, is-13)
nsubj(happening-16, what-14)
aux(happening-16, is-15)
dep(isnt-22, happening-16)
det(isnt-22, the-18)
nn(isnt-22, fb-19)
nn(isnt-22, user-20)
nn(isnt-22, id-21)
ccomp(says-11, isnt-22)
advmod(getting-24, always-23)
vmod(isnt-22, getting-24)
dep(getting-24, sent-25)
det(API-29, the-27)
nn(API-29, FB-28)
prep_thru(isnt-22, API-29)

To/TO test/VB for/IN the/DT error/NN you/PRP would/MD need/VB to/TO register/VB on/IN the/DT app/NN ./. 

(ROOT (S (S (VP (TO To) (VP (VB test) (PP (IN for) (NP (DT the) (NN error)))))) (NP (PRP you)) (VP (MD would) (VP (VB need) (S (VP (TO to) (VP (VB register) (PP (IN on) (NP (DT the) (NN app)))))))) (. .)))

root(ROOT-0, need-8)
aux(test-2, To-1)
dep(need-8, test-2)
det(error-5, the-4)
prep_for(test-2, error-5)
nsubj(need-8, you-6)
aux(need-8, would-7)
aux(register-10, to-9)
xcomp(need-8, register-10)
det(app-13, the-12)
prep_on(register-10, app-13)

Add/VB app/NN _/NN register/VBP a/DT business/NN _/NN on/IN bottom/NN of/IN homepage/NN after/IN registering/VBG there/EX is/VBZ an/DT edit/NN button/NN ./. 

(ROOT (S (VP (VB Add) (SBAR (S (NP (NN app) (NN _)) (VP (VBP register) (NP (NP (DT a) (NN business) (NN _)) (PP (IN on) (NP (NP (NN bottom)) (PP (IN of) (NP (NN homepage)))))) (PP (IN after) (S (VP (VBG registering) (SBAR (S (NP (EX there)) (VP (VBZ is) (NP (DT an) (NN edit) (NN button)))))))))))) (. .)))

root(ROOT-0, Add-1)
nn(_-3, app-2)
nsubj(register-4, _-3)
ccomp(Add-1, register-4)
det(_-7, a-5)
nn(_-7, business-6)
dobj(register-4, _-7)
prep_on(_-7, bottom-9)
prep_of(bottom-9, homepage-11)
prepc_after(register-4, registering-13)
expl(is-15, there-14)
ccomp(registering-13, is-15)
det(button-18, an-16)
nn(button-18, edit-17)
nsubj(is-15, button-18)

Go/VB to/TO product/NN tab/NN ./. 

(ROOT (S (VP (VB Go) (PP (TO to) (NP (NN product) (NN tab)))) (. .)))

root(ROOT-0, Go-1)
nn(tab-4, product-3)
prep_to(Go-1, tab-4)

Add/VB a/DT product/NN ./. 

(ROOT (S (VP (VB Add) (NP (DT a) (NN product))) (. .)))

root(ROOT-0, Add-1)
det(product-3, a-2)
dobj(Add-1, product-3)

This/DT is/VBZ where/WRB everyone/NN is/VBZ getting/VBG the/DT error/NN message/NN ./. 

(ROOT (S (NP (DT This)) (VP (VBZ is) (SBAR (WHADVP (WRB where)) (S (NP (NN everyone)) (VP (VBZ is) (VP (VBG getting) (NP (DT the) (NN error) (NN message))))))) (. .)))

root(ROOT-0, is-2)
nsubj(is-2, This-1)
advmod(getting-6, where-3)
nsubj(getting-6, everyone-4)
aux(getting-6, is-5)
advcl(is-2, getting-6)
det(message-9, the-7)
nn(message-9, error-8)
dobj(getting-6, message-9)

No/DT one/NN is/VBZ able/JJ to/TO add/VB products/NNS b/c/NN of/IN this/DT error/NN I/PRP am/VBP reporting/VBG ./. 

(ROOT (S (NP (DT No) (NN one)) (VP (VBZ is) (ADJP (JJ able) (S (VP (TO to) (VP (VB add) (NP (NP (NNS products) (NN b/c)) (PP (IN of) (NP (NP (DT this) (NN error)) (SBAR (S (NP (PRP I)) (VP (VBP am) (VP (VBG reporting))))))))))))) (. .)))

root(ROOT-0, able-4)
neg(one-2, No-1)
nsubj(able-4, one-2)
cop(able-4, is-3)
aux(add-6, to-5)
xcomp(able-4, add-6)
nn(b/c-8, products-7)
dobj(add-6, b/c-8)
det(error-11, this-10)
prep_of(b/c-8, error-11)
nsubj(reporting-14, I-12)
aux(reporting-14, am-13)
rcmod(error-11, reporting-14)

Please/VB look/VB into/IN this/DT error/NN ./. 

(ROOT (S (VP (VB Please) (VP (VB look) (PP (IN into) (NP (DT this) (NN error))))) (. .)))

root(ROOT-0, Please-1)
xcomp(Please-1, look-2)
det(error-5, this-4)
prep_into(look-2, error-5)

Any/DT questions/NNS please/VB ask/VB !/. 

(ROOT (S (S (NP (DT Any) (NNS questions)) (INTJ (VB please)) (VP (VB ask))) (. !)))

root(ROOT-0, ask-4)
det(questions-2, Any-1)
nsubj(ask-4, questions-2)
discourse(ask-4, please-3)

Thank/VB you/PRP _/VBP 

(ROOT (S (VP (VB Thank) (SBAR (S (NP (PRP you)) (VP (VBP _)))))))

root(ROOT-0, Thank-1)
nsubj(_-3, you-2)
ccomp(Thank-1, _-3)

Mike/NNP 

(ROOT (NP (NNP Mike)))

root(ROOT-0, Mike-1)

