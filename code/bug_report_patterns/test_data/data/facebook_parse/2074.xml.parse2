I/PRP have/VBP some/DT code/NN that/WDT looks/VBZ like/IN :/: 

(ROOT (S (NP (PRP I)) (VP (VBP have) (NP (NP (DT some) (NN code)) (SBAR (WHNP (WDT that)) (S (VP (VBZ looks) (PP (IN like))))))) (: :)))

root(ROOT-0, have-2)
nsubj(have-2, I-1)
det(code-4, some-3)
dobj(have-2, code-4)
nsubj(looks-6, that-5)
rcmod(code-4, looks-6)
prep(looks-6, like-7)

</JJR fb/NN :/: js-string/NN var/NN =/JJ foo/NN >/JJR . . ./: </JJR //: fb/NN :/: js-string/NN >/JJR 

(ROOT (NP (NP (JJR <) (NN fb)) (: :) (S (S (NP (NP (NN js-string) (NN var)) (NP (JJ =) (NN foo))) (ADJP (JJR >))) (: ...) (S (NP (NP (JJR <)) (PRN (: /) (NP (NP (NN fb)) (: :) (NP (NN js-string))))) (ADJP (JJR >))))))

root(ROOT-0, fb-2)
amod(fb-2, <-1)
nn(var-5, js-string-4)
dep(>-8, var-5)
amod(foo-7, =-6)
dep(var-5, foo-7)
dep(fb-2, >-8)
dep(>-15, <-10)
punct(fb-12, /-11)
dep(<-10, fb-12)
dep(fb-12, js-string-14)
parataxis(>-8, >-15)

</JJR script/NN >/JJR </JJR !/. 

(ROOT (FRAG (NP (NP (JJR <) (NN script)) (ADJP (NP (JJR >)) (JJR <))) (. !)))

root(ROOT-0, script-2)
amod(script-2, <-1)
npadvmod(<-4, >-3)
amod(script-2, <-4)

--/: 

(ROOT (NP (: --)))


. . ./: code/NN that/WDT uses/VBZ foo/NN . . ./: 

(ROOT (NP (NP (NP (: ...) (NN code)) (SBAR (WHNP (WDT that)) (S (VP (VBZ uses) (NP (NN foo)))))) (: ...)))

root(ROOT-0, code-2)
nsubj(uses-4, that-3)
rcmod(code-2, uses-4)
dobj(uses-4, foo-5)

--/: >/JJR </JJR //: script/NN >/JJR 

(ROOT (PRN (: --) (S (NP (JJR >)) (ADJP (ADJP (JJR <)) (PRN (: /) (S (NP (NN script)) (ADJP (JJR >))))))))

root(ROOT-0, <-3)
dep(<-3, >-2)
punct(>-6, /-4)
dep(>-6, script-5)
dep(<-3, >-6)

Before/IN today/NN s/NNS (/-LRB- 5/1/CD )/-RRB- push/NN _/RB this/DT worked/VBD fine/JJ but/CC after/IN the/DT push/NN my/PRP$ script/NN yields/VBZ a/DT foo/NN is/VBZ undefined/JJ error/NN ./. 

(ROOT (S (S (PP (IN Before) (NP (NP (NN today) (NNS s)) (PRN (-LRB- -LRB-) (NP (CD 5/1)) (-RRB- -RRB-)))) (NP (NP (NN push)) (ADJP (RB _) (DT this))) (VP (VBD worked) (ADJP (JJ fine)))) (CC but) (S (PP (IN after) (NP (DT the) (NN push))) (NP (PRP$ my) (NN script)) (VP (VBZ yields) (SBAR (S (NP (DT a) (NN foo)) (VP (VBZ is) (NP (JJ undefined) (NN error))))))) (. .)))

root(ROOT-0, worked-10)
nn(s-3, today-2)
prep_before(worked-10, s-3)
appos(s-3, 5/1-5)
nsubj(worked-10, push-7)
advmod(this-9, _-8)
amod(push-7, this-9)
acomp(worked-10, fine-11)
det(push-15, the-14)
prep_after(yields-18, push-15)
poss(script-17, my-16)
nsubj(yields-18, script-17)
conj_but(worked-10, yields-18)
det(foo-20, a-19)
nsubj(error-23, foo-20)
cop(error-23, is-21)
amod(error-23, undefined-22)
ccomp(yields-18, error-23)

If/IN I/PRP change/VBP my/PRP$ script/NN to/TO :/: 

(ROOT (SBAR (IN If) (S (NP (PRP I)) (VP (VBP change) (NP (PRP$ my) (NN script)) (PP (TO to)))) (: :)))

root(ROOT-0, change-3)
mark(change-3, If-1)
nsubj(change-3, I-2)
poss(script-5, my-4)
dobj(change-3, script-5)
prep(change-3, to-6)

</JJR script/NN >/JJR </JJR !/. 

(ROOT (FRAG (NP (NP (JJR <) (NN script)) (ADJP (NP (JJR >)) (JJR <))) (. !)))

root(ROOT-0, script-2)
amod(script-2, <-1)
npadvmod(<-4, >-3)
amod(script-2, <-4)

--/: 

(ROOT (NP (: --)))


setTimeout/NN (/-LRB- function/NN (/-LRB- )/-RRB- {/-LRB- . . ./: code/NN that/WDT uses/VBZ foo/NN . . ./: }/-RRB- _/SYM 1/LS )/-RRB- ;/: 

(ROOT (NP (NP (NP (NN setTimeout)) (PRN (-LRB- -LRB-) (SQ (NP (NN function)) (VP (-LRB- -LRB-) (-RRB- -RRB-) (NP (NP (NP (-LRB- -LCB-)) (: ...) (NP (NP (NN code)) (SBAR (WHNP (WDT that)) (S (VP (VBZ uses) (NP (NN foo))) (: ...)))) (-RRB- -RCB-)) (SBAR (FRAG (X (SYM _)) (VP (LS 1))))))) (-RRB- -RRB-))) (: ;)))

root(ROOT-0, setTimeout-1)
nsubj(-LCB--6, function-3)
dep(-LCB--6, code-8)
nsubj(uses-10, that-9)
rcmod(code-8, uses-10)
dobj(uses-10, foo-11)
dep(1-15, _-14)
dep(-LCB--6, 1-15)

--/: >/JJR </JJR //: script/NN >/JJR 

(ROOT (PRN (: --) (S (NP (JJR >)) (ADJP (ADJP (JJR <)) (PRN (: /) (S (NP (NN script)) (ADJP (JJR >))))))))

root(ROOT-0, <-3)
dep(<-3, >-2)
punct(>-6, /-4)
dep(>-6, script-5)
dep(<-3, >-6)

everything/NN works/NNS ./. 

(ROOT (NP (NN everything) (NNS works) (. .)))

root(ROOT-0, works-2)
nn(works-2, everything-1)

This/DT implies/VBZ that/IN the/DT timing/NN for/IN the/DT fb/NN :/: js-string/NN s/NNS being/VBG declared/VBN was/VBD changed/VBN in/IN the/DT 5/1/CD push/NN ./. 

(ROOT (S (NP (DT This)) (VP (VBZ implies) (SBAR (IN that) (S (NP (NP (DT the) (NN timing)) (PP (IN for) (NP (NP (DT the) (NN fb)) (: :) (NP (NP (NN js-string) (NNS s)) (VP (VBG being) (VP (VBN declared))))))) (VP (VBD was) (VP (VBN changed) (PP (IN in) (NP (DT the) (CD 5/1) (NN push)))))))) (. .)))

root(ROOT-0, implies-2)
nsubj(implies-2, This-1)
mark(changed-15, that-3)
det(timing-5, the-4)
nsubjpass(changed-15, timing-5)
det(fb-8, the-7)
prep_for(timing-5, fb-8)
nn(s-11, js-string-10)
dep(fb-8, s-11)
auxpass(declared-13, being-12)
vmod(s-11, declared-13)
auxpass(changed-15, was-14)
ccomp(implies-2, changed-15)
det(push-19, the-17)
num(push-19, 5/1-18)
prep_in(changed-15, push-19)

It/PRP s/VBZ unclear/JJ whether/IN this/DT change/NN is/VBZ intentional/JJ or/CC not/RB _/NN but/CC it/PRP does/VBZ break/VB existing/VBG code/NN ./. 

(ROOT (S (S (NP (PRP It)) (VP (VBZ s) (ADJP (JJ unclear)) (SBAR (IN whether) (S (NP (DT this) (NN change)) (VP (VBZ is) (NP (ADJP (JJ intentional) (CC or) (RB not)) (NN _))))))) (CC but) (S (NP (PRP it)) (VP (VBZ does) (VP (VB break) (NP (VBG existing) (NN code))))) (. .)))

root(ROOT-0, unclear-3)
nsubj(unclear-3, It-1)
cop(unclear-3, s-2)
mark(_-11, whether-4)
det(change-6, this-5)
nsubj(_-11, change-6)
cop(_-11, is-7)
amod(_-11, intentional-8)
conj_or(intentional-8, not-10)
amod(_-11, not-10)
ccomp(unclear-3, _-11)
nsubj(break-15, it-13)
aux(break-15, does-14)
conj_but(unclear-3, break-15)
amod(code-17, existing-16)
dobj(break-15, code-17)

