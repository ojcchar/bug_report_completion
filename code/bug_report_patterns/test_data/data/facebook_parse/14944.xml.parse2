Hi/NN _/SYM 

(ROOT (NP (NN Hi) (SYM _)))

root(ROOT-0, Hi-1)
dep(Hi-1, _-2)

on/IN changing/VBG or/CC deleting/VBG an/DT event/NN using/VBG Python/NNP SDK/NNP the/DT result/NN from/IN the/DT graph-api/NN is/VBZ bool/NN and/CC therefore/RB the/DT request/NN method/NN dies/VBZ in/IN row/NN 177/CD :/: if/IN response.get/NN (/-LRB- error/NN )/-RRB- :/: 

(ROOT (PP (IN on) (S (VP (VBG changing) (CC or) (VBG deleting) (NP (DT an) (NN event) (S (VP (VBG using) (NP (NP (NNP Python) (NNP SDK)) (SBAR (S (S (NP (NP (DT the) (NN result)) (PP (IN from) (NP (DT the) (NN graph-api)))) (VP (VBZ is) (NP (NN bool)))) (CC and) (S (ADVP (RB therefore)) (NP (DT the) (NN request) (NN method)) (VP (VBZ dies) (PP (IN in) (NP (NN row) (CD 177)))))))) (: :) (PP (IN if) (NP (NP (NN response.get)) (PRN (-LRB- -LRB-) (NP (NN error)) (-RRB- -RRB-)))) (: :))))))))

root(ROOT-0, on-1)
pcomp(on-1, changing-2)
pcomp(on-1, deleting-4)
conj_or(changing-2, deleting-4)
det(event-6, an-5)
dobj(changing-2, event-6)
dep(event-6, using-7)
nn(SDK-9, Python-8)
dobj(using-7, SDK-9)
det(result-11, the-10)
nsubj(bool-16, result-11)
det(graph-api-14, the-13)
prep_from(result-11, graph-api-14)
cop(bool-16, is-15)
rcmod(SDK-9, bool-16)
advmod(dies-22, therefore-18)
det(method-21, the-19)
nn(method-21, request-20)
nsubj(dies-22, method-21)
rcmod(SDK-9, dies-22)
conj_and(bool-16, dies-22)
prep_in(dies-22, row-24)
num(row-24, 177-25)
prep_if(using-7, response.get-28)
appos(response.get-28, error-30)

bool/NN object/NN has/VBZ no/DT attribute/NN get/VB 

(ROOT (S (NP (NN bool) (NN object)) (VP (VBZ has) (S (NP (DT no) (NN attribute)) (VP (VB get))))))

root(ROOT-0, has-3)
nn(object-2, bool-1)
nsubj(has-3, object-2)
neg(attribute-5, no-4)
nsubj(get-6, attribute-5)
ccomp(has-3, get-6)

I/PRP do/VBP not/RB know/VB if/IN the/DT result/NN from/IN the/DT graph/NN api/NN should/MD always/RB be/VB an/DT object/NN or/CC if/IN the/DT bool/NN result/NN is/VBZ ok/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VBP do) (RB not) (VP (VB know) (SBAR (SBAR (IN if) (S (NP (NP (DT the) (NN result)) (PP (IN from) (NP (DT the) (NN graph) (NN api)))) (VP (MD should) (ADVP (RB always)) (VP (VB be) (NP (DT an) (NN object)))))) (CC or) (SBAR (IN if) (S (NP (DT the) (NN bool) (NN result)) (VP (VBZ is) (NP (NN ok)))))))) (. .)))

root(ROOT-0, know-4)
nsubj(know-4, I-1)
aux(know-4, do-2)
neg(know-4, not-3)
mark(object-16, if-5)
det(result-7, the-6)
nsubj(object-16, result-7)
det(api-11, the-9)
nn(api-11, graph-10)
prep_from(result-7, api-11)
aux(object-16, should-12)
advmod(object-16, always-13)
cop(object-16, be-14)
det(object-16, an-15)
advcl(know-4, object-16)
mark(ok-23, if-18)
det(result-21, the-19)
nn(result-21, bool-20)
nsubj(ok-23, result-21)
cop(ok-23, is-22)
advcl(know-4, ok-23)
conj_or(object-16, ok-23)

regards/VBZ 

(ROOT (FRAG (VP (VBZ regards))))

root(ROOT-0, regards-1)

Hinnack/NN 

(ROOT (NP (NN Hinnack)))

root(ROOT-0, Hinnack-1)

