<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bug>
	<id>HHH-5575</id>
	<title>keyword end in mapped field can result to SQLERROR SQLSTATE=42702</title>
	<description>
		<paragraph id="1">
			<sentence id="1.1">I have a property "end" which is mapped as a column:</sentence>
		</paragraph>
		<paragraph id="2">
			<sentence id="2.1">@Entity
public class Times implements Serializable{</sentence>
		</paragraph>
		<paragraph id="3">
			<sentence id="3.1">@Id
private Integer idTimes;
.</sentence>
			<sentence id="3.2">.</sentence>
		</paragraph>
		<paragraph id="4">
			<sentence id="4.1">// TODO: DO NOT USE "END" it can return a JPA-Bug !!</sentence>
			<sentence id="4.2">SQLSTATE=42702
@Temporal(TemporalType.TIMESTAMP)
private Date end;
.</sentence>
			<sentence id="4.3">.</sentence>
		</paragraph>
		<paragraph id="5">
			<sentence id="5.1">@OneToMany(mappedBy = "leadTime", fetch=FetchType.EAGER)
private Set&lt;OtherTimes&gt; otherTimes;
.</sentence>
			<sentence id="5.2">.</sentence>
		</paragraph>
		<paragraph id="6">
			<sentence id="6.1">}</sentence>
		</paragraph>
		<paragraph id="7">
			<sentence id="7.1">which has a relation to OtherTimes:</sentence>
		</paragraph>
		<paragraph id="8">
			<sentence id="8.1">public class OtherTimes implements Serializable{</sentence>
		</paragraph>
		<paragraph id="9">
			<sentence id="9.1">@Id
private Integer idOtherTimes;
.</sentence>
			<sentence id="9.2">.</sentence>
		</paragraph>
		<paragraph id="10">
			<sentence id="10.1">// TODO: DO NOT USE "END" it can return a JPA-Bug !!</sentence>
			<sentence id="10.2">SQLSTATE=42702
@Temporal(TemporalType.TIMESTAMP)
private Date end;
.</sentence>
			<sentence id="10.3">.</sentence>
		</paragraph>
		<paragraph id="11">
			<sentence id="11.1">.</sentence>
			<sentence id="11.2">.</sentence>
		</paragraph>
		<paragraph id="12">
			<sentence id="12.1">}</sentence>
		</paragraph>
		<paragraph id="13">
			<sentence id="13.1">Now, I want to retrieve times via "myBean.getTimes()".</sentence>
			<sentence id="13.2">Hibernate generates this query which brings a SQL-ERROR:</sentence>
		</paragraph>
		<paragraph id="14">
			<sentence id="14.1">select
times0_.</sentence>
			<sentence id="14.2">ID as ID1_18_3_,
end as end18_3_,
end as end8_0_,
othertimes0_.</sentence>
			<sentence id="14.3">ID as ID4_8_0_,
 from
SCHEMA.TIMES times0_ 
 left outer join
 SCHEMA.OTHERTIMES othertimes1_ 
on times0_.</sentence>
			<sentence id="14.4">IDTIMES=othertimes0.ID_TIMES
where
times0_.</sentence>
			<sentence id="14.5">IDTIMES=?</sentence>
		</paragraph>
		<paragraph id="15">
			<sentence id="15.1">It throws this exception:</sentence>
		</paragraph>
		<paragraph id="16">
			<sentence id="16.1">Caused by: org.hibernate.exception.SQLGrammarException: could not load an entity: [com.Times#1]</sentence>
			<sentence id="16.2">	at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:92)</sentence>
			<sentence id="16.3">	at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66)</sentence>
			<sentence id="16.4">	at org.hibernate.loader.Loader.loadEntity(Loader.java:1937)</sentence>
			<sentence id="16.5">	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:86)</sentence>
			<sentence id="16.6">	at org.hibernate.loader.entity.EntityLoader.loadByUniqueKey(EntityLoader.java:160)</sentence>
			<sentence id="16.7">	at org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey(AbstractEntityPersister.java:1777)</sentence>
			<sentence id="16.8">	at org.hibernate.type.EntityType.loadByUniqueKey(EntityType.java:674)</sentence>
			<sentence id="16.9">	at org.hibernate.type.EntityType.resolve(EntityType.java:434)</sentence>
			<sentence id="16.10">	at org.hibernate.engine.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140)</sentence>
			<sentence id="16.11">	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:898)</sentence>
			<sentence id="16.12">	at org.hibernate.loader.Loader.doQuery(Loader.java:773)</sentence>
			<sentence id="16.13">	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:270)</sentence>
			<sentence id="16.14">	at org.hibernate.loader.Loader.loadEntity(Loader.java:1933)</sentence>
			<sentence id="16.15">	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:86)</sentence>
			<sentence id="16.16">	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:76)</sentence>
			<sentence id="16.17">	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:3270)</sentence>
			<sentence id="16.18">	at org.hibernate.event.def.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:496)</sentence>
			<sentence id="16.19">	at org.hibernate.event.def.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:477)</sentence>
			<sentence id="16.20">	at org.hibernate.event.def.DefaultLoadEventListener.load(DefaultLoadEventListener.java:227)</sentence>
			<sentence id="16.21">	at org.hibernate.event.def.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:285)</sentence>
			<sentence id="16.22">	at org.hibernate.event.def.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:152)</sentence>
			<sentence id="16.23">	at org.hibernate.impl.SessionImpl.fireLoad(SessionImpl.java:1080)</sentence>
			<sentence id="16.24">	at org.hibernate.impl.SessionImpl.internalLoad(SessionImpl.java:1028)</sentence>
			<sentence id="16.25">	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:623)</sentence>
			<sentence id="16.26">	at org.hibernate.type.EntityType.resolve(EntityType.java:431)</sentence>
			<sentence id="16.27">	at org.hibernate.engine.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140)</sentence>
			<sentence id="16.28">	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:898)</sentence>
			<sentence id="16.29">	at org.hibernate.loader.Loader.doQuery(Loader.java:773)</sentence>
			<sentence id="16.30">	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:270)</sentence>
			<sentence id="16.31">	at org.hibernate.loader.Loader.doList(Loader.java:2294)</sentence>
			<sentence id="16.32">	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2172)</sentence>
			<sentence id="16.33">	at org.hibernate.loader.Loader.list(Loader.java:2167)</sentence>
			<sentence id="16.34">	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:448)</sentence>
			<sentence id="16.35">	at org.hibernate.hql.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:363)</sentence>
			<sentence id="16.36">	at org.hibernate.engine.query.HQLQueryPlan.performList(HQLQueryPlan.java:196)</sentence>
			<sentence id="16.37">	at org.hibernate.impl.SessionImpl.list(SessionImpl.java:1258)</sentence>
			<sentence id="16.38">	at org.hibernate.impl.QueryImpl.list(QueryImpl.java:102)</sentence>
			<sentence id="16.39">	at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:241)</sentence>
			<sentence id="16.40">	... 182 more</sentence>
			<sentence id="16.41">Caused by: com.ibm.db2.jcc.b.nm: DB2 SQL Error: SQLCODE=-203, SQLSTATE=42702, SQLERRMC=END, DRIVER=3.50.152</sentence>
			<sentence id="16.42">	at com.ibm.db2.jcc.b.wc.a(wc.java:579)</sentence>
			<sentence id="16.43">	at com.ibm.db2.jcc.b.wc.a(wc.java:57)</sentence>
			<sentence id="16.44">	at com.ibm.db2.jcc.b.wc.a(wc.java:126)</sentence>
			<sentence id="16.45">	at com.ibm.db2.jcc.b.tk.c(tk.java:1901)</sentence>
			<sentence id="16.46">	at com.ibm.db2.jcc.b.tk.d(tk.java:1889)</sentence>
			<sentence id="16.47">	at com.ibm.db2.jcc.b.tk.a(tk.java:1416)</sentence>
			<sentence id="16.48">	at com.ibm.db2.jcc.t4.db.g(db.java:138)</sentence>
			<sentence id="16.49">	at com.ibm.db2.jcc.t4.db.a(db.java:38)</sentence>
			<sentence id="16.50">	at com.ibm.db2.jcc.t4.t.a(t.java:32)</sentence>
			<sentence id="16.51">	at com.ibm.db2.jcc.t4.sb.h(sb.java:141)</sentence>
			<sentence id="16.52">	at com.ibm.db2.jcc.b.tk.N(tk.java:1387)</sentence>
			<sentence id="16.53">	at com.ibm.db2.jcc.b.uk.Kb(uk.java:2461)</sentence>
			<sentence id="16.54">	at com.ibm.db2.jcc.b.uk.e(uk.java:3101)</sentence>
			<sentence id="16.55">	at com.ibm.db2.jcc.b.uk.yb(uk.java:535)</sentence>
			<sentence id="16.56">	at com.ibm.db2.jcc.b.uk.executeQuery(uk.java:509)</sentence>
			<sentence id="16.57">	at org.jboss.resource.adapter.jdbc.WrappedPreparedStatement.executeQuery(WrappedPreparedStatement.java:342)</sentence>
			<sentence id="16.58">	at org.hibernate.jdbc.AbstractBatcher.getResultSet(AbstractBatcher.java:208)</sentence>
			<sentence id="16.59">	at org.hibernate.loader.Loader.getResultSet(Loader.java:1849)</sentence>
			<sentence id="16.60">	at org.hibernate.loader.Loader.doQuery(Loader.java:718)</sentence>
			<sentence id="16.61">	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:270)</sentence>
			<sentence id="16.62">	at org.hibernate.loader.Loader.loadEntity(Loader.java:1933)</sentence>
		</paragraph>
		<paragraph id="17">
			<sentence id="17.1">So you see, instead of using this:</sentence>
		</paragraph>
		<paragraph id="18">
			<sentence id="18.1">times0_.</sentence>
			<sentence id="18.2">end as end18_3_,
othertimes0_.</sentence>
			<sentence id="18.3">end as end8_0_,</sentence>
		</paragraph>
		<paragraph id="19">
			<sentence id="19.1">Hibernate uses this:</sentence>
		</paragraph>
		<paragraph id="20">
			<sentence id="20.1">end as end18_3_,
end as end8_0_,</sentence>
		</paragraph>
		<paragraph id="21">
			<sentence id="21.1">which leads to a conflict!</sentence>
		</paragraph>
	</description>
</bug>
