<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bug>
	<id>11087</id>
	<title>Orphaned and unstoppable (superhuman strength?) containers with --pid=host</title>
	<description>
		<paragraph id="1">
			<sentence id="1.1">I've ran into an issue that is easily reproducible that puts a container into a state that can not be stopped and if you restart the Docker daemon it will also loose track of the existing container and spawn a new one.</sentence>
		</paragraph>
		<paragraph id="2">
			<sentence id="2.1">The issue happens when you are running with `--pid=host` and you do a SIGKILL but that process has children that don't terminate when its parent dies.</sentence>
			<sentence id="2.2">Docker never seems to see that the SIGKILL worked and will hang forever.</sentence>
			<sentence id="2.3">The SIGKILL worked, but the container PID is gone.</sentence>
			<sentence id="2.4">Now you do a `docker stop` or any action and Docker will complain that it can't find the process.</sentence>
		</paragraph>
		<paragraph id="3">
			<sentence id="3.1">Now if you restart the Docker daemon, Docker thinks the container is gone (I assume because the PID is gone) and then it will start a new one but the old container cgroup still exists.</sentence>
		</paragraph>
		<paragraph id="4">
			<sentence id="4.1">I haven't dug yet into the Docker code to see what is happening (I assume Docker thinks the SIGKILL isn't done because processes in the cgroup still exist), but here is a simple way to reproduce this issue.</sentence>
		</paragraph>
		<paragraph id="5">
			<sentence id="5.1">```bash
#!</sentence>
			<sentence id="5.2">/bin/bash</sentence>
		</paragraph>
		<paragraph id="6">
			<sentence id="6.1">ID=$(docker run -d --pid=host ubuntu bash -c "sleep 300; echo hi")</sentence>
		</paragraph>
		<paragraph id="7">
			<sentence id="7.1">docker kill $ID &amp;
sleep 1
docker stop $ID
```</sentence>
		</paragraph>
		<paragraph id="8">
			<sentence id="8.1">Running the above will result in</sentence>
		</paragraph>
		<paragraph id="9">
			<sentence id="9.1">```
Error response from daemon: Cannot stop container 8af7796dff4df03686342f3a7b618fe5f1830ab89c0c158817acb332cac3e9f8: no such process
FATA[0000] Error: failed to stop one or more containers 
```</sentence>
		</paragraph>
		<paragraph id="10">
			<sentence id="10.1">Seems like there are two things that should be addressed.</sentence>
			<sentence id="10.2">1 Make SIGKILL work properly in this situation</sentence>
			<sentence id="10.3">2 On restart check the cgroup for processes and freeze/kill those</sentence>
		</paragraph>
		<paragraph id="12">
			<sentence id="12.1">Obligatory docker info/version</sentence>
		</paragraph>
		<paragraph id="13">
			<sentence id="13.1">```
$ docker version; docker info
Client version: 1.5.0
Client API version: 1.17
Go version (client): go1.4.1
Git commit (client): a8a31ef
OS/Arch (client): linux/amd64
Server version: 1.5.0
Server API version: 1.17
Go version (server): go1.4.1
Git commit (server): a8a31ef
Containers: 51
Images: 366
Storage Driver: overlay
 Backing Filesystem: extfs
Execution Driver: native-0.2
Kernel Version: 3.18.1-031801-generic
Operating System: Ubuntu 14.10
CPUs: 4
Total Memory: 7.496 GiB
Name: inotmac
ID: FPSO:Z7SO:BZJ3:IXH4:DNKV:UPZQ:KLP2:IRXW:5CBY:PBDM:HAKO:UOC7
Username: ibuildthecloud
Registry: [https://index.docker.io/v1/]
```</sentence>
		</paragraph>
	</description>
</bug>
