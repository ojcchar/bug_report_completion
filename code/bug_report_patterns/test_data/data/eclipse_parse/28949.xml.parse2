often/RB it/PRP happens/VBZ that/IN you/PRP want/VBP to/TO change/VB a/DT word/NN that/WDT appears/VBZ throughout/IN the/DT code/NN (/-LRB- or/CC documentation/NN )/-RRB- in/IN different/JJ caps/NNS ,/, an/DT example/NN :/: 

(ROOT (S (NP (RB often) (PRP it)) (VP (VBZ happens) (SBAR (IN that) (S (NP (PRP you)) (VP (VBP want) (S (VP (TO to) (VP (VB change) (NP (NP (DT a) (NN word)) (SBAR (WHNP (WDT that)) (S (VP (VBZ appears) (PP (IN throughout) (NP (NP (NP (DT the) (NN code)) (PRN (-LRB- -LRB-) (CC or) (ADJP (NN documentation)) (-RRB- -RRB-))) (PP (IN in) (NP (NP (JJ different) (NNS caps)) (, ,) (NP (DT an) (NN example))))))))))))))))) (: :)))

root(ROOT-0, happens-3)
advmod(it-2, often-1)
nsubj(happens-3, it-2)
mark(want-6, that-4)
nsubj(want-6, you-5)
ccomp(happens-3, want-6)
aux(change-8, to-7)
xcomp(want-6, change-8)
det(word-10, a-9)
dobj(change-8, word-10)
nsubj(appears-12, that-11)
rcmod(word-10, appears-12)
det(code-15, the-14)
prep_throughout(appears-12, code-15)
cc(documentation-18, or-17)
dep(code-15, documentation-18)
amod(caps-22, different-21)
prep_in(code-15, caps-22)
det(example-25, an-24)
appos(caps-22, example-25)

MyWord/NNP word/NN =/JJ null/NN ;/: MyWord/NNP currentWord/NN =/JJ null/NN ;/: 

(ROOT (NP (NP (NNP MyWord) (NN word) (JJ =) (NN null)) (: ;) (NP (NNP MyWord) (NN currentWord) (JJ =) (NN null)) (: ;)))

root(ROOT-0, null-4)
nn(null-4, MyWord-1)
nn(null-4, word-2)
amod(null-4, =-3)
nn(null-9, MyWord-6)
nn(null-9, currentWord-7)
amod(null-9, =-8)
dep(null-4, null-9)

when/WRB performing/VBG a/DT replace/VB now/RB ,/, say/VBP ,/, "/`` word/NN "/'' by/IN "/`` phrase/NN "/'' ,/, you/PRP get/VBP :/: 

(ROOT (S (SBAR (WHADVP (WRB when)) (S (S (VP (VBG performing) (S (NP (DT a)) (VP (VB replace) (ADVP (RB now)))))) (, ,) (VP (VBP say) (, ,) (S (`` ``) (NP (NN word)) ('' '') (PP (IN by) (NP (`` ``) (NN phrase) ('' ''))))))) (, ,) (NP (PRP you)) (VP (VBP get)) (: :)))

root(ROOT-0, get-18)
advmod(say-7, when-1)
dep(say-7, performing-2)
nsubj(replace-4, a-3)
ccomp(performing-2, replace-4)
advmod(replace-4, now-5)
advcl(get-18, say-7)
dep(say-7, word-10)
dep(word-10, by-12)
pobj(by-12, phrase-14)
nsubj(get-18, you-17)

Myphrase/NN phrase/NN =/JJ null/NN ;/: Myphrase/NN currentphrase/NN =/JJ null/NN ;/: 

(ROOT (NP (NP (NP (NP (NN Myphrase) (NN phrase)) (NP (JJ =) (NN null))) (: ;) (NP (NP (NN Myphrase) (NN currentphrase)) (NP (JJ =) (NN null)))) (: ;)))

root(ROOT-0, phrase-2)
nn(phrase-2, Myphrase-1)
amod(null-4, =-3)
dep(phrase-2, null-4)
nn(currentphrase-7, Myphrase-6)
dep(phrase-2, currentphrase-7)
amod(null-9, =-8)
dep(currentphrase-7, null-9)

This/DT is/VBZ definitely/RB not/RB what/WP you/PRP 'd/MD like/VB it/PRP to/TO become/VB . . ./: When/WRB using/VBG case/NN sensitive/JJ replacement/NN ,/, the/DT second/JJ '/`` word/NN '/'' does/VBZ not/RB get/VB replaced/VBN ,/, resulting/VBG in/IN the/DT following/VBG piece/NN of/IN code/NN :/: 

(ROOT (S (NP (DT This)) (VP (VBZ is) (ADVP (RB definitely)) (SBAR (RB not) (SBAR (WHNP (WP what)) (S (NP (PRP you)) (VP (MD 'd) (VP (VB like) (S (NP (PRP it)) (VP (TO to) (VP (VB become)))))))) (: ...) (SBAR (WHADVP (WRB When)) (S (S (VP (VBG using) (NP (NP (NN case) (JJ sensitive) (NN replacement)) (, ,) (NP (DT the) (JJ second) (`` `) (NN word) ('' '))))) (VP (VBZ does) (RB not) (VP (VB get) (VP (VBN replaced) (, ,) (S (VP (VBG resulting) (PP (IN in) (NP (NP (DT the) (VBG following) (NN piece)) (PP (IN of) (NP (NN code)))))))))))))) (: :)))

root(ROOT-0, is-2)
nsubj(is-2, This-1)
advmod(is-2, definitely-3)
dep(like-8, not-4)
dobj(like-8, what-5)
nsubj(like-8, you-6)
aux(like-8, 'd-7)
dep(is-2, like-8)
dobj(like-8, it-9)
aux(become-11, to-10)
xcomp(like-8, become-11)
advmod(replaced-27, When-13)
csubjpass(replaced-27, using-14)
nn(replacement-17, case-15)
amod(replacement-17, sensitive-16)
dobj(using-14, replacement-17)
det(word-22, the-19)
amod(word-22, second-20)
appos(replacement-17, word-22)
aux(replaced-27, does-24)
neg(replaced-27, not-25)
auxpass(replaced-27, get-26)
dep(like-8, replaced-27)
xcomp(replaced-27, resulting-29)
det(piece-33, the-31)
amod(piece-33, following-32)
prep_in(resulting-29, piece-33)
prep_of(piece-33, code-35)

MyPhrase/NNP word/NN =/JJ null/NN ;/: MyPhrase/NNP currentPhrase/NN =/JJ null/NN ;/: 

(ROOT (NP (NP (NNP MyPhrase) (NN word) (JJ =) (NN null)) (: ;) (NP (NNP MyPhrase) (NN currentPhrase) (JJ =) (NN null)) (: ;)))

root(ROOT-0, null-4)
nn(null-4, MyPhrase-1)
nn(null-4, word-2)
amod(null-4, =-3)
nn(null-9, MyPhrase-6)
nn(null-9, currentPhrase-7)
amod(null-9, =-8)
dep(null-4, null-9)

I/PRP 'd/MD like/VB to/TO see/VB a/DT '/`` retain-caps-while-replacing/JJ option/NN '/'' that/WDT cause/VBP that/IN replaces/VBZ the/DT first/JJ character/NN 's/POS caps/NNS of/IN the/DT replacing/VBG word/NN if/IN required/VBN ;/: if/IN the/DT first/JJ letter/NN of/IN the/DT substring/NN to/TO be/VB replaced/VBN is/VBZ a/DT capital/NN ,/, then/RB make/VB the/DT first/JJ character/NN of/IN the/DT replacing/VBG string/NN a/DT capital/NN ,/, if/IN it/PRP is/VBZ a/DT smallcap/NN ,/, make/VBP it/PRP a/DT smallcap/NN ./. 

(ROOT (S (S (NP (PRP I)) (VP (MD 'd) (VP (VB like) (S (VP (TO to) (VP (VB see) (NP (NP (DT a) (`` `) (JJ retain-caps-while-replacing) (NN option) ('' ')) (SBAR (WHNP (WDT that)) (S (VP (VBP cause) (SBAR (IN that) (S (VP (VBZ replaces) (NP (NP (NP (DT the) (JJ first) (NN character) (POS 's)) (NNS caps)) (PP (IN of) (NP (DT the) (VBG replacing) (NN word)))))))))))))) (SBAR (IN if) (S (VP (VBN required))))))) (: ;) (S (SBAR (IN if) (S (NP (NP (DT the) (JJ first) (NN letter)) (PP (IN of) (NP (DT the) (NN substring) (S (VP (TO to) (VP (VB be) (VP (VBN replaced)))))))) (VP (VBZ is) (NP (DT a) (NN capital))))) (, ,) (ADVP (RB then)) (VP (VB make) (NP (NP (DT the) (JJ first) (NN character)) (PP (IN of) (NP (NP (DT the) (VBG replacing) (NN string)) (SBAR (S (NP (NP (DT a) (NN capital)) (, ,) (SBAR (IN if) (S (NP (PRP it)) (VP (VBZ is) (NP (DT a) (NN smallcap))))) (, ,)) (VP (VBP make) (S (NP (PRP it)) (NP (DT a) (NN smallcap))))))))))) (. .)))

root(ROOT-0, like-3)
nsubj(like-3, I-1)
aux(like-3, 'd-2)
aux(see-5, to-4)
xcomp(like-3, see-5)
det(option-9, a-6)
amod(option-9, retain-caps-while-replacing-8)
dobj(see-5, option-9)
nsubj(cause-12, that-11)
rcmod(option-9, cause-12)
mark(replaces-14, that-13)
ccomp(cause-12, replaces-14)
det(character-17, the-15)
amod(character-17, first-16)
poss(caps-19, character-17)
dobj(replaces-14, caps-19)
det(word-23, the-21)
amod(word-23, replacing-22)
prep_of(caps-19, word-23)
mark(required-25, if-24)
advcl(like-3, required-25)
mark(capital-39, if-27)
det(letter-30, the-28)
amod(letter-30, first-29)
nsubj(capital-39, letter-30)
det(substring-33, the-32)
prep_of(letter-30, substring-33)
aux(replaced-36, to-34)
auxpass(replaced-36, be-35)
vmod(substring-33, replaced-36)
cop(capital-39, is-37)
det(capital-39, a-38)
advcl(make-42, capital-39)
advmod(make-42, then-41)
parataxis(like-3, make-42)
det(character-45, the-43)
amod(character-45, first-44)
dobj(make-42, character-45)
det(string-49, the-47)
amod(string-49, replacing-48)
prep_of(character-45, string-49)
det(capital-51, a-50)
nsubj(make-59, capital-51)
mark(smallcap-57, if-53)
nsubj(smallcap-57, it-54)
cop(smallcap-57, is-55)
det(smallcap-57, a-56)
dep(capital-51, smallcap-57)
rcmod(string-49, make-59)
nsubj(smallcap-62, it-60)
det(smallcap-62, a-61)
xcomp(make-59, smallcap-62)

This/DT results/VBZ in/IN the/DT desired/VBN piece/NN of/IN code/NN :/: 

(ROOT (S (NP (DT This)) (VP (VBZ results) (PP (IN in) (NP (NP (DT the) (VBN desired) (NN piece)) (PP (IN of) (NP (NN code)))))) (: :)))

root(ROOT-0, results-2)
nsubj(results-2, This-1)
det(piece-6, the-4)
amod(piece-6, desired-5)
prep_in(results-2, piece-6)
prep_of(piece-6, code-8)

MyPhrase/NN phrase/NN =/JJ null/NN ;/: MyPhrase/NNP currentPhrase/NN =/JJ null/NN ;/: 

(ROOT (NP (NP (NP (NP (NN MyPhrase) (NN phrase)) (NP (JJ =) (NN null))) (: ;) (NP (NP (NNP MyPhrase)) (NP (NN currentPhrase) (JJ =) (NN null)))) (: ;)))

root(ROOT-0, phrase-2)
nn(phrase-2, MyPhrase-1)
amod(null-4, =-3)
dep(phrase-2, null-4)
dep(phrase-2, MyPhrase-6)
nn(null-9, currentPhrase-7)
amod(null-9, =-8)
dep(MyPhrase-6, null-9)

remark/NN :/: the/DT second/JJ '/`` word/NN '/'' has/VBZ been/VBN replaced/VBN by/IN '/`` phrase/NN '/'' as/IN we/PRP hoped/VBD it/PRP to/TO be/VB ./. 

(ROOT (FRAG (NP (NN remark)) (: :) (S (NP (DT the) (JJ second) (`` `) (NN word) ('' ')) (VP (VBZ has) (VP (VBN been) (VP (VBN replaced) (PP (IN by) (`` `) (NP (NN phrase)) ('' ')) (SBAR (IN as) (S (NP (PRP we)) (VP (VBD hoped) (S (NP (PRP it)) (VP (TO to) (VP (VB be))))))))))) (. .)))

root(ROOT-0, remark-1)
det(word-6, the-3)
amod(word-6, second-4)
nsubjpass(replaced-10, word-6)
aux(replaced-10, has-8)
auxpass(replaced-10, been-9)
dep(remark-1, replaced-10)
agent(replaced-10, phrase-13)
mark(hoped-17, as-15)
nsubj(hoped-17, we-16)
advcl(replaced-10, hoped-17)
dobj(hoped-17, it-18)
aux(be-20, to-19)
xcomp(hoped-17, be-20)

thanks/NNS !/. 

(ROOT (NP (NNS thanks) (. !)))

root(ROOT-0, thanks-1)

