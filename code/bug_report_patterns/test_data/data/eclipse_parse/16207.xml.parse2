Integration/NN build/VB 20020515/CD 

(ROOT (FRAG (NP (NN Integration)) (VP (VB build) (NP (CD 20020515)))))

root(ROOT-0, Integration-1)
dep(Integration-1, build-2)
dobj(build-2, 20020515-3)

0/CD Fresh/JJ install/VB ;/: fresh/JJ workspace/NN ./. 

(ROOT (NP (NP (NP (CD 0)) (SBAR (S (NP (JJ Fresh)) (VP (VB install))))) (: ;) (NP (NP (JJ fresh)) (NP (NN workspace))) (. .)))

root(ROOT-0, 0-1)
nsubj(install-3, Fresh-2)
rcmod(0-1, install-3)
dep(0-1, fresh-5)
dep(fresh-5, workspace-6)

1/CD Start/NNP eclipse.exe/NN 

(ROOT (NP (NP (CD 1)) (NP (NNP Start)) (NP (NN eclipse.exe))))

root(ROOT-0, 1-1)
appos(1-1, Start-2)
dep(1-1, eclipse.exe-3)

2/CD Exit/NN eclipse/NN (/-LRB- to/TO make/VB sure/JJ there/EX is/VBZ a/DT platform.cfg/NN )/-RRB- 

(ROOT (S (NP (CD 2)) (VP (NN Exit) (NP (NP (NN eclipse)) (PRN (-LRB- -LRB-) (S (VP (TO to) (VP (VB make) (ADJP (JJ sure) (SBAR (S (NP (EX there)) (VP (VBZ is) (NP (DT a) (NN platform.cfg))))))))) (-RRB- -RRB-))))))

root(ROOT-0, Exit-2)
nsubj(Exit-2, 2-1)
dobj(Exit-2, eclipse-3)
aux(make-6, to-5)
dep(eclipse-3, make-6)
acomp(make-6, sure-7)
expl(is-9, there-8)
ccomp(sure-7, is-9)
det(platform.cfg-11, a-10)
nsubj(is-9, platform.cfg-11)

3/CD Add/VB a/DT link/NN to/TO an/DT installed/VBN extension/NN 

(ROOT (FRAG (NP (CD 3)) (VP (VB Add) (NP (DT a) (NN link)) (PP (TO to) (NP (DT an) (VBN installed) (NN extension))))))

root(ROOT-0, 3-1)
dep(3-1, Add-2)
det(link-4, a-3)
dobj(Add-2, link-4)
det(extension-8, an-6)
amod(extension-8, installed-7)
prep_to(Add-2, extension-8)

4/CD Start/NNP eclipse.exe/NN 

(ROOT (NP (NP (CD 4)) (NP (NNP Start)) (NP (NN eclipse.exe))))

root(ROOT-0, 4-1)
appos(4-1, Start-2)
dep(4-1, eclipse.exe-3)

5/CD Say/VB Yes/UH when/WRB it/PRP asks/VBZ if/IN you/PRP want/VBP to/TO open/VB update/VB manager/NN 

(ROOT (FRAG (NP (CD 5)) (VP (VP (VB Say) (INTJ (UH Yes))) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBZ asks) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP want) (S (VP (TO to) (VP (VB open) (VP (VB update) (NP (NN manager)))))))))))))))

root(ROOT-0, 5-1)
dep(5-1, Say-2)
discourse(Say-2, Yes-3)
advmod(asks-6, when-4)
nsubj(asks-6, it-5)
advcl(Say-2, asks-6)
mark(want-9, if-7)
nsubj(want-9, you-8)
advcl(asks-6, want-9)
aux(open-11, to-10)
xcomp(want-9, open-11)
xcomp(open-11, update-12)
dobj(update-12, manager-13)

6/CD select/JJ all/PDT the/DT incoming/JJ features/NNS and/CC say/VBP you/PRP want/VB them/PRP 

(ROOT (S (NP (CD 6)) (VP (VP (JJ select) (NP (PDT all) (DT the) (JJ incoming) (NNS features))) (CC and) (VP (VBP say) (S (NP (PRP you)) (VP (VB want) (NP (PRP them))))))))

root(ROOT-0, select-2)
nsubj(select-2, 6-1)
nsubj(say-8, 6-1)
predet(features-6, all-3)
det(features-6, the-4)
amod(features-6, incoming-5)
dobj(select-2, features-6)
conj_and(select-2, say-8)
nsubj(want-10, you-9)
ccomp(say-8, want-10)
dobj(want-10, them-11)

Observe/VB :/: It/PRP configures/VBZ the/DT new/JJ features/NNS ,/, but/CC does/VBZ not/RB ask/VB whether/IN you/PRP want/VBP to/TO restart/VB ./. 

(ROOT (S (S (VP (VB Observe))) (: :) (S (NP (PRP It)) (VP (VP (VBZ configures) (NP (DT the) (JJ new) (NNS features))) (, ,) (CC but) (VP (VBZ does) (RB not) (VP (VB ask) (SBAR (IN whether) (S (NP (PRP you)) (VP (VBP want) (S (VP (TO to) (VP (VB restart))))))))))) (. .)))

root(ROOT-0, Observe-1)
nsubj(configures-4, It-3)
nsubj(ask-12, It-3)
parataxis(Observe-1, configures-4)
det(features-7, the-5)
amod(features-7, new-6)
dobj(configures-4, features-7)
aux(ask-12, does-10)
neg(ask-12, not-11)
parataxis(Observe-1, ask-12)
conj_but(configures-4, ask-12)
mark(want-15, whether-13)
nsubj(want-15, you-14)
ccomp(ask-12, want-15)
aux(restart-17, to-16)
xcomp(want-15, restart-17)

Expectation/NN :/: Since/IN I/PRP have/VBP just/RB changed/VBN the/DT configuration/NN ,/, the/DT user/NN should/MD be/VB told/VBN that/IN the/DT changes/NNS wo/MD n't/RB happen/VB until/IN they/PRP restart/VBP ,/, and/CC offer/NN to/TO restart/VB now/RB ./. 

(ROOT (FRAG (NP (NN Expectation)) (: :) (S (SBAR (IN Since) (S (NP (PRP I)) (VP (VBP have) (ADVP (RB just)) (VP (VBN changed) (NP (DT the) (NN configuration)))))) (, ,) (NP (DT the) (NN user)) (VP (MD should) (VP (VB be) (VP (VBN told) (SBAR (IN that) (S (NP (DT the) (NNS changes)) (VP (MD wo) (RB n't) (VP (VP (VB happen) (SBAR (IN until) (S (NP (PRP they)) (VP (VBP restart))))) (, ,) (CC and) (VP (NP (NN offer)) (S (VP (TO to) (VP (VB restart) (ADVP (RB now)))))))))))))) (. .)))

root(ROOT-0, Expectation-1)
mark(changed-7, Since-3)
nsubj(changed-7, I-4)
aux(changed-7, have-5)
advmod(changed-7, just-6)
advcl(told-15, changed-7)
det(configuration-9, the-8)
dobj(changed-7, configuration-9)
det(user-12, the-11)
nsubjpass(told-15, user-12)
aux(told-15, should-13)
auxpass(told-15, be-14)
dep(Expectation-1, told-15)
mark(happen-21, that-16)
det(changes-18, the-17)
nsubj(happen-21, changes-18)
aux(happen-21, wo-19)
neg(happen-21, n't-20)
ccomp(told-15, happen-21)
mark(restart-24, until-22)
nsubj(restart-24, they-23)
advcl(happen-21, restart-24)
ccomp(told-15, offer-27)
conj_and(happen-21, offer-27)
aux(restart-29, to-28)
vmod(offer-27, restart-29)
advmod(restart-29, now-30)

