Build/VB Identifier/NNP :/: I20090611-1540/NN 

(ROOT (S (VP (VB Build) (NP (NP (NNP Identifier)) (: :) (NP (NN I20090611-1540))))))

root(ROOT-0, Build-1)
dobj(Build-1, Identifier-2)
dep(Identifier-2, I20090611-1540-4)

This/DT is/VBZ randomly/RB observable/JJ during/IN every/DT day/NN usage/NN although/IN not/RB that/DT frequently/RB ./. 

(ROOT (S (NP (DT This)) (VP (VBZ is) (ADJP (RB randomly) (JJ observable) (PP (IN during) (NP (NP (DT every) (NN day) (NN usage)) (SBAR (IN although) (FRAG (RB not) (NP (DT that))))))) (ADVP (RB frequently))) (. .)))

root(ROOT-0, observable-4)
nsubj(observable-4, This-1)
cop(observable-4, is-2)
advmod(observable-4, randomly-3)
det(usage-8, every-6)
nn(usage-8, day-7)
prep_during(observable-4, usage-8)
mark(not-10, although-9)
dep(usage-8, not-10)
dep(not-10, that-11)
advmod(observable-4, frequently-12)

It/PRP seems/VBZ that/IN the/DT xtext/NN validation/NN job/NN and/CC the/DT annotation/NN hover/NN are/VBP both/DT concurrently/RB accessing/VBG the/DT document/NN ./. 

(ROOT (S (NP (PRP It)) (VP (VBZ seems) (SBAR (IN that) (S (NP (NP (DT the) (NN xtext) (NN validation) (NN job)) (CC and) (NP (DT the) (NN annotation) (NN hover))) (VP (VBP are) (ADVP (DT both)) (VP (ADVP (RB concurrently)) (VBG accessing) (NP (DT the) (NN document))))))) (. .)))

root(ROOT-0, seems-2)
nsubj(seems-2, It-1)
mark(accessing-15, that-3)
det(job-7, the-4)
nn(job-7, xtext-5)
nn(job-7, validation-6)
nsubj(accessing-15, job-7)
det(hover-11, the-9)
nn(hover-11, annotation-10)
conj_and(job-7, hover-11)
nsubj(accessing-15, hover-11)
aux(accessing-15, are-12)
advmod(accessing-15, both-13)
advmod(accessing-15, concurrently-14)
ccomp(seems-2, accessing-15)
det(document-17, the-16)
dobj(accessing-15, document-17)

I/PRP accidentally/RB wrote/VBD a/DT broken/JJ validator/NN and/CC figured/VBD out/RP how/WRB to/TO reproduce/VB it/PRP !/. 

(ROOT (S (NP (PRP I)) (ADVP (RB accidentally)) (VP (VP (VBD wrote) (NP (DT a) (JJ broken) (NN validator))) (CC and) (VP (VBD figured) (PRT (RP out))) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB reproduce) (NP (PRP it))))))) (. !)))

root(ROOT-0, wrote-3)
nsubj(wrote-3, I-1)
nsubj(figured-8, I-1)
advmod(wrote-3, accidentally-2)
det(validator-6, a-4)
amod(validator-6, broken-5)
dobj(wrote-3, validator-6)
conj_and(wrote-3, figured-8)
prt(figured-8, out-9)
advmod(reproduce-12, how-10)
aux(reproduce-12, to-11)
ccomp(wrote-3, reproduce-12)
dobj(reproduce-12, it-13)

Stack/VB trace/NN :/: -/: 

(ROOT (NP (NP (VB Stack) (NN trace) (: :)) (: -)))

root(ROOT-0, trace-2)
dep(trace-2, Stack-1)

Reproducible/JJ :/: Sometimes/RB 

(ROOT (NP (NP (JJ Reproducible)) (: :) (NP (RB Sometimes))))

root(ROOT-0, Reproducible-1)
dep(Reproducible-1, Sometimes-3)

Steps/NNS to/TO Reproduce/VB :/: 

(ROOT (S (NP (NNS Steps)) (VP (TO to) (VP (VB Reproduce))) (: :)))

root(ROOT-0, Reproduce-3)
nsubj(Reproduce-3, Steps-1)
aux(Reproduce-3, to-2)

Under/IN normal/JJ use/NN you/PRP */SYM may/MD */SYM see/VB this/DT randomly/RB if/IN you/PRP happen/VB hover/VB your/PRP$ mouse/NN in/IN the/DT margin/NN when/WRB a/DT custom/NN validator/NN is/VBZ asynchronously/RB updating/VBG the/DT document/NN 's/POS annotations/NNS (/-LRB- or/CC so/IN it/PRP seems/VBZ )/-RRB- ./. 

(ROOT (FRAG (PP (IN Under) (NP (NP (JJ normal) (NN use)) (SBAR (FRAG (NP (NP (PRP you)) (SBAR (FRAG (X (SYM *)) (VP (MD may))))) (X (X (SYM *)) (NP (SQ (VB see) (NP (DT this)) (VP (ADVP (ADVP (RB randomly)) (SBAR (IN if) (FRAG (NP (PRP you))))) (VB happen))) (VP (VB hover) (NP (PRP$ your) (NN mouse)) (PP (IN in) (NP (DT the) (NN margin))) (SBAR (WHADVP (WRB when)) (S (NP (DT a) (NN custom) (NN validator)) (VP (VBZ is) (ADVP (RB asynchronously)) (VP (VBG updating) (NP (NP (DT the) (NN document) (POS 's)) (NNS annotations))))))))))) (PRN (-LRB- -LRB-) (CC or) (S (ADVP (IN so)) (NP (PRP it)) (VP (VBZ seems))) (-RRB- -RRB-)))) (. .)))

root(ROOT-0, Under-1)
amod(use-3, normal-2)
pobj(Under-1, use-3)
dep(use-3, you-4)
dep(may-6, *-5)
dep(you-4, may-6)
dep(hover-14, *-7)
aux(happen-13, see-8)
nsubj(happen-13, this-9)
advmod(happen-13, randomly-10)
mark(you-12, if-11)
advcl(randomly-10, you-12)
dep(hover-14, happen-13)
dep(you-4, hover-14)
poss(mouse-16, your-15)
dobj(hover-14, mouse-16)
det(margin-19, the-18)
prep_in(hover-14, margin-19)
advmod(updating-26, when-20)
det(validator-23, a-21)
nn(validator-23, custom-22)
nsubj(updating-26, validator-23)
aux(updating-26, is-24)
advmod(updating-26, asynchronously-25)
advcl(hover-14, updating-26)
det(document-28, the-27)
poss(annotations-30, document-28)
dobj(updating-26, annotations-30)
cc(seems-35, or-32)
advmod(seems-35, so-33)
nsubj(seems-35, it-34)
dep(use-3, seems-35)

You/PRP can/MD reproduce/VB quite/RB easily/RB with/IN the/DT following/VBG recipe/NN ./. 

(ROOT (S (NP (PRP You)) (VP (MD can) (VP (VB reproduce) (ADVP (RB quite) (RB easily)) (PP (IN with) (NP (DT the) (VBG following) (NN recipe))))) (. .)))

root(ROOT-0, reproduce-3)
nsubj(reproduce-3, You-1)
aux(reproduce-3, can-2)
advmod(easily-5, quite-4)
advmod(reproduce-3, easily-5)
det(recipe-9, the-7)
amod(recipe-9, following-8)
prep_with(reproduce-3, recipe-9)

1/CD Create/VB a/DT sample/NN xtext/NN project/NN ./. 

(ROOT (S (NP (CD 1)) (VP (VB Create) (NP (DT a) (NN sample) (NN xtext) (NN project))) (. .)))

root(ROOT-0, Create-2)
nsubj(Create-2, 1-1)
det(project-6, a-3)
nn(project-6, sample-4)
nn(project-6, xtext-5)
dobj(Create-2, project-6)

2/CD Add/VB the/DT following/VBG to/TO MyDslJavaValidator/NNP to/TO increase/VB the/DT chances/NNS of/IN failure/NN to/TO about/IN 100/CD %/NN 

(ROOT (FRAG (NP (CD 2)) (VP (VB Add) (NP (DT the) (VBG following)) (PP (TO to) (NP (NNP MyDslJavaValidator))) (S (VP (TO to) (VP (VB increase) (NP (NP (DT the) (NNS chances)) (PP (IN of) (NP (NN failure)))) (PP (TO to)) (PP (IN about) (NP (CD 100) (NN %)))))))))

root(ROOT-0, 2-1)
dep(2-1, Add-2)
dobj(Add-2, the-3)
amod(the-3, following-4)
prep_to(Add-2, MyDslJavaValidator-6)
aux(increase-8, to-7)
vmod(Add-2, increase-8)
det(chances-10, the-9)
dobj(increase-8, chances-10)
prep_of(chances-10, failure-12)
prep(increase-8, to-13)
num(%-16, 100-15)
prep_about(increase-8, %-16)

@Check/NN 

(ROOT (NP (NN @Check)))

root(ROOT-0, @Check-1)

public/JJ void/NN checkCanCrashIt/NN (/-LRB- final/JJ Type/NN type/NN )/-RRB- {/-LRB- 

(ROOT (NP (NP (JJ public) (NN void) (NN checkCanCrashIt)) (PRN (-LRB- -LRB-) (NP (JJ final) (NN Type) (NN type)) (-RRB- -RRB-)) (-LRB- -LCB-)))

root(ROOT-0, checkCanCrashIt-3)
amod(checkCanCrashIt-3, public-1)
nn(checkCanCrashIt-3, void-2)
amod(type-7, final-5)
nn(type-7, Type-6)
appos(checkCanCrashIt-3, type-7)

for/IN (/-LRB- int/NN i/FW =/JJ 0/CD ;/: i/LS </JJR 5000/CD ;/: i/LS +/CC +/CC )/-RRB- {/-LRB- 

(ROOT (PP (IN for) (NP (PRN (-LRB- -LRB-) (NP (NP (NN int)) (NP (NP (NP (FW i)) (ADJP (JJ =) (NP-TMP (CD 0)))) (: ;) (NP (NP (LS i) (JJR <)) (ADJP (CD 5000))) (: ;) (NP (NP (LS i) (CC +)) (SBAR (S (NP (CC +))))))) (-RRB- -RRB-)) (-LRB- -LCB-))))

root(ROOT-0, for-1)
pobj(for-1, int-3)
dep(int-3, i-4)
amod(i-4, =-5)
tmod(=-5, 0-6)
dep(<-9, i-8)
dep(i-4, <-9)
amod(<-9, 5000-10)
dep(i-4, i-12)
cc(i-12, +-13)
rcmod(i-12, +-14)

error/NN (/-LRB- "/`` boom/NN "/'' ,/, type/NN ,/, MyDslPackage.TYPE/NN __/CD NAME/NN )/-RRB- ;/: 

(ROOT (NP (NP (NN error)) (PRN (-LRB- -LRB-) (NP (NP (`` ``) (NN boom) ('' '')) (, ,) (NP (NN type)) (, ,) (NP (NN MyDslPackage.TYPE) (CD __) (NN NAME))) (-RRB- -RRB-)) (: ;)))

root(ROOT-0, error-1)
dep(error-1, boom-4)
appos(boom-4, type-7)
nn(NAME-11, MyDslPackage.TYPE-9)
num(NAME-11, __-10)
appos(boom-4, NAME-11)

}/-RRB- 

(ROOT (NP (-RRB- -RCB-)))


}/-RRB- 

(ROOT (NP (-RRB- -RCB-)))


3/CD Now/RB launch/NN eclipse/NN +/CC dsl/NN editor/NN 

(ROOT (NP (NP (CD 3) (RB Now) (NN launch)) (NP (NP (NN eclipse)) (CC +) (NP (NN dsl) (NN editor)))))

root(ROOT-0, launch-3)
num(launch-3, 3-1)
advmod(launch-3, Now-2)
dep(launch-3, eclipse-4)
nn(editor-7, dsl-6)
dep(launch-3, editor-7)
conj_+(eclipse-4, editor-7)

4/CD Show/NN the/DT error/NN log/NN ./. 

(ROOT (NP (NP (CD 4) (NN Show)) (NP (DT the) (NN error) (NN log)) (. .)))

root(ROOT-0, Show-2)
num(Show-2, 4-1)
det(log-5, the-3)
nn(log-5, error-4)
dep(Show-2, log-5)

5/CD Now/RB try/VB and/CC break/VB it/PRP as/IN follows/VBZ :/: -/: 

(ROOT (S (VP (VP (ADVP (NP (CD 5)) (RB Now)) (VB try)) (CC and) (VP (VB break) (NP (PRP it)) (SBAR (IN as) (S (VP (VBZ follows)) (: :))))) (: -)))

root(ROOT-0, try-3)
npadvmod(Now-2, 5-1)
advmod(try-3, Now-2)
conj_and(try-3, break-5)
dobj(break-5, it-6)
mark(follows-8, as-7)
advcl(break-5, follows-8)

5a/NN ./. 

(ROOT (NP (NN 5a) (. .)))

root(ROOT-0, 5a-1)

Open/VB a/DT dsl/xtext/NN editor/NN with/IN some/DT content/NN which/WDT will/MD provoke/VB the/DT validator/NN ./. 

(ROOT (S (VP (VB Open) (NP (DT a) (NN dsl/xtext) (NN editor)) (PP (IN with) (NP (NP (DT some) (NN content)) (SBAR (WHNP (WDT which)) (S (VP (MD will) (VP (VB provoke) (NP (DT the) (NN validator))))))))) (. .)))

root(ROOT-0, Open-1)
det(editor-4, a-2)
nn(editor-4, dsl/xtext-3)
dobj(Open-1, editor-4)
det(content-7, some-6)
prep_with(Open-1, content-7)
nsubj(provoke-10, which-8)
aux(provoke-10, will-9)
rcmod(content-7, provoke-10)
det(validator-12, the-11)
dobj(provoke-10, validator-12)

5b/NN ./. 

(ROOT (NP (NN 5b) (. .)))

root(ROOT-0, 5b-1)

Make/VB a/DT minor/JJ edit/NN ./. 

(ROOT (S (VP (VB Make) (NP (DT a) (JJ minor) (NN edit))) (. .)))

root(ROOT-0, Make-1)
det(edit-4, a-2)
amod(edit-4, minor-3)
dobj(Make-1, edit-4)

5c/NN ./. 

(ROOT (NP (NN 5c) (. .)))

root(ROOT-0, 5c-1)

This/DT will/MD trigger/VB the/DT Xtext/NN validation/NN which/WDT you/PRP can/MD see/VB running/VBG as/IN a/DT job/NN in/IN the/DT status/NN bar/NN ./. 

(ROOT (S (NP (DT This)) (VP (MD will) (VP (VB trigger) (NP (NP (DT the) (NN Xtext) (NN validation)) (SBAR (WHNP (WDT which)) (S (NP (PRP you)) (VP (MD can) (VP (VB see) (S (VP (VBG running) (PP (IN as) (NP (NP (DT a) (NN job)) (PP (IN in) (NP (DT the) (NN status) (NN bar)))))))))))))) (. .)))

root(ROOT-0, trigger-3)
nsubj(trigger-3, This-1)
aux(trigger-3, will-2)
det(validation-6, the-4)
nn(validation-6, Xtext-5)
dobj(trigger-3, validation-6)
dobj(see-10, which-7)
nsubj(see-10, you-8)
aux(see-10, can-9)
rcmod(validation-6, see-10)
xcomp(see-10, running-11)
det(job-14, a-13)
prep_as(running-11, job-14)
det(bar-18, the-16)
nn(bar-18, status-17)
prep_in(job-14, bar-18)

Try/VB to/TO place/VB the/DT mouse/NN cursor/NN in/IN the/DT margin/NN whilst/IN this/DT task/NN is/VBZ running/VBG ./. 

(ROOT (S (VP (VB Try) (S (VP (TO to) (VP (VB place) (S (NP (DT the) (NN mouse) (NN cursor)) (PP (IN in) (NP (DT the) (NN margin))) (SBAR (IN whilst) (S (NP (DT this) (NN task)) (VP (VBZ is) (VP (VBG running)))))))))) (. .)))

root(ROOT-0, Try-1)
aux(place-3, to-2)
xcomp(Try-1, place-3)
det(cursor-6, the-4)
nn(cursor-6, mouse-5)
dep(running-14, cursor-6)
dep(running-14, in-7)
det(margin-9, the-8)
pobj(in-7, margin-9)
mark(running-14, whilst-10)
det(task-12, this-11)
nsubj(running-14, task-12)
aux(running-14, is-13)
dep(place-3, running-14)

Its/PRP$ important/JJ that/IN this/DT happens/VBZ during/IN the/DT validation/NN job/NN ./. 

(ROOT (S (NP (NP (PRP$ Its) (JJ important)) (PP (IN that) (NP (DT this)))) (VP (VBZ happens) (PP (IN during) (NP (DT the) (NN validation) (NN job)))) (. .)))

root(ROOT-0, happens-5)
poss(important-2, Its-1)
nsubj(happens-5, important-2)
prep_that(important-2, this-4)
det(job-9, the-7)
nn(job-9, validation-8)
prep_during(happens-5, job-9)

Provided/VBN you/PRP get/VBP the/DT timing/NN right/NN rather/RB than/IN an/DT annotation/NN hover/VBP you/PRP 'll/MD get/VB the/DT concurrent/JJ modification/NN exception/NN logged/VBD ./. 

(ROOT (S (S (VP (VBN Provided) (S (NP (PRP you)) (VP (VBP get) (NP (NP (DT the) (NN timing) (NN right)) (CONJP (RB rather) (IN than)) (NP (DT an) (NN annotation))))))) (VP (VBP hover) (SBAR (S (NP (PRP you)) (VP (MD 'll) (VP (VB get) (SBAR (S (NP (DT the) (JJ concurrent) (NN modification) (NN exception)) (VP (VBD logged))))))))) (. .)))

root(ROOT-0, hover-11)
csubj(hover-11, Provided-1)
nsubj(get-3, you-2)
ccomp(Provided-1, get-3)
det(right-6, the-4)
nn(right-6, timing-5)
dobj(get-3, right-6)
det(annotation-10, an-9)
dobj(get-3, annotation-10)
conj_negcc(right-6, annotation-10)
nsubj(get-14, you-12)
aux(get-14, 'll-13)
ccomp(hover-11, get-14)
det(exception-18, the-15)
amod(exception-18, concurrent-16)
nn(exception-18, modification-17)
nsubj(logged-19, exception-18)
ccomp(get-14, logged-19)

After/IN this/DT occurs/VBZ the/DT editor/NN 's/POS annotation/NN hover/NN is/VBZ '/`` dead/JJ '/'' and/CC does/VBZ n't/RB recover/VB until/IN you/PRP close/reopen/VBP the/DT editor/NN ./. 

(ROOT (S (SBAR (IN After) (S (NP (DT this)) (VP (VBZ occurs) (NP (NP (DT the) (NN editor) (POS 's)) (NN annotation) (NN hover))))) (VP (VP (VBZ is) (`` `) (ADJP (JJ dead)) ('' ')) (CC and) (VP (VBZ does) (RB n't) (VP (VB recover) (SBAR (IN until) (S (NP (PRP you)) (VP (VBP close/reopen) (NP (DT the) (NN editor)))))))) (. .)))

root(ROOT-0, dead-11)
mark(occurs-3, After-1)
nsubj(occurs-3, this-2)
csubj(dead-11, occurs-3)
csubj(recover-16, occurs-3)
det(editor-5, the-4)
poss(hover-8, editor-5)
nn(hover-8, annotation-7)
dobj(occurs-3, hover-8)
cop(dead-11, is-9)
aux(recover-16, does-14)
neg(recover-16, n't-15)
conj_and(dead-11, recover-16)
mark(close/reopen-19, until-17)
nsubj(close/reopen-19, you-18)
advcl(recover-16, close/reopen-19)
det(editor-21, the-20)
dobj(close/reopen-19, editor-21)

NB/NN It/PRP might/MD be/VB wise/JJ to/TO kill/VB the/DT spawned/VBN eclipse/NN rather/RB than/IN close/VB it/PRP or/CC else/RB your/PRP$ test/NN workspace/NN attempts/VBZ to/TO (/-LRB- de/FW )/-RRB- serialize/VBP all/PDT the/DT errors/NNS which/WDT does/VBZ n't/RB do/VB it/PRP any/DT favours/NNS ./. 

(ROOT (S (NP (NP (NP (NN NB)) (SBAR (S (NP (PRP It)) (VP (MD might) (VP (VB be) (ADJP (JJ wise) (S (VP (TO to) (VP (VP (VB kill) (NP (DT the) (VBN spawned) (NN eclipse))) (CONJP (RB rather) (IN than)) (VP (VB close) (NP (PRP it)))))))))))) (CC or) (RB else) (NP (NP (PRP$ your) (NN test) (NN workspace)) (SBAR (S (VP (VBZ attempts) (PP (TO to)) (PRN (-LRB- -LRB-) (ADJP (FW de)) (-RRB- -RRB-))))))) (VP (VBP serialize) (NP (NP (PDT all) (DT the) (NNS errors)) (SBAR (WHNP (WDT which)) (S (VP (VBZ does) (RB n't) (VP (VB do) (S (NP (PRP it)) (NP (DT any) (NNS favours))))))))) (. .)))

root(ROOT-0, serialize-25)
nsubj(serialize-25, NB-1)
nsubj(wise-5, It-2)
aux(wise-5, might-3)
cop(wise-5, be-4)
rcmod(NB-1, wise-5)
aux(kill-7, to-6)
xcomp(wise-5, kill-7)
det(eclipse-10, the-8)
amod(eclipse-10, spawned-9)
dobj(kill-7, eclipse-10)
xcomp(wise-5, close-13)
conj_negcc(kill-7, close-13)
dobj(close-13, it-14)
cc(NB-1, or-15)
advmod(NB-1, else-16)
poss(workspace-19, your-17)
nn(workspace-19, test-18)
dep(NB-1, workspace-19)
rcmod(workspace-19, attempts-20)
prep(attempts-20, to-21)
dep(attempts-20, de-23)
predet(errors-28, all-26)
det(errors-28, the-27)
dobj(serialize-25, errors-28)
nsubj(do-32, which-29)
aux(do-32, does-30)
neg(do-32, n't-31)
rcmod(errors-28, do-32)
nsubj(favours-35, it-33)
det(favours-35, any-34)
xcomp(do-32, favours-35)

