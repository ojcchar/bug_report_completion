When/WRB a/DT user/NN enters/VBZ a/DT text/NN field/NN ,/, it/PRP should/MD indicate/VB whether/IN it/PRP 's/VBZ read-only/JJ or/CC not/RB ./. 

(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (DT a) (NN user)) (VP (VBZ enters) (NP (DT a) (NN text) (NN field))))) (, ,) (NP (PRP it)) (VP (MD should) (VP (VB indicate) (SBAR (IN whether) (S (NP (PRP it)) (VP (VBZ 's) (ADJP (JJ read-only)))) (CC or) (RB not)))) (. .)))

root(ROOT-0, indicate-11)
advmod(enters-4, When-1)
det(user-3, a-2)
nsubj(enters-4, user-3)
advcl(indicate-11, enters-4)
det(field-7, a-5)
nn(field-7, text-6)
dobj(enters-4, field-7)
nsubj(indicate-11, it-9)
aux(indicate-11, should-10)
mark(read-only-15, whether-12)
nsubj(read-only-15, it-13)
cop(read-only-15, 's-14)
ccomp(indicate-11, read-only-15)
ccomp(indicate-11, not-17)
conj_or(read-only-15, not-17)

The/DT user/NN can/MD enter/VB the/DT read-only/JJ text/NN field/NN and/CC start/VB typing/NN without/IN realizing/VBG that/IN the/DT text/NN is/VBZ n't/RB changed/VBN ./. 

(ROOT (S (NP (DT The) (NN user)) (VP (MD can) (VP (VP (VB enter) (NP (DT the) (JJ read-only) (NN text) (NN field))) (CC and) (VP (VB start) (NP (NN typing)) (PP (IN without) (S (VP (VBG realizing) (SBAR (IN that) (S (NP (DT the) (NN text)) (VP (VBZ is) (RB n't) (VP (VBN changed))))))))))) (. .)))

root(ROOT-0, enter-4)
det(user-2, The-1)
nsubj(enter-4, user-2)
nsubj(start-10, user-2)
aux(enter-4, can-3)
det(field-8, the-5)
amod(field-8, read-only-6)
nn(field-8, text-7)
dobj(enter-4, field-8)
conj_and(enter-4, start-10)
dobj(start-10, typing-11)
prepc_without(start-10, realizing-13)
mark(changed-19, that-14)
det(text-16, the-15)
nsubjpass(changed-19, text-16)
auxpass(changed-19, is-17)
neg(changed-19, n't-18)
ccomp(realizing-13, changed-19)

Currently/RB ,/, it/PRP would/MD say/VB "/`` Text/VB </JJR </JJR and/CC starts/VBZ reading/VBG the/DT text/NN value/NN >/JJR >/JJR "/'' ./. 

(ROOT (S (ADVP (RB Currently)) (, ,) (NP (PRP it)) (VP (VP (MD would) (VP (VB say) (S (`` ``) (VP (VB Text) (ADJP (ADJP (JJR <)) (JJR <)))))) (CC and) (VP (VBZ starts) (S (VP (VBG reading) (S (NP (DT the) (NN text) (NN value)) (ADJP (NP (JJR >)) (JJR >))))))) ('' '') (. .)))

root(ROOT-0, say-5)
advmod(say-5, Currently-1)
nsubj(say-5, it-3)
nsubj(starts-11, it-3)
aux(say-5, would-4)
ccomp(say-5, Text-7)
acomp(Text-7, <-8)
dep(<-8, <-9)
conj_and(say-5, starts-11)
xcomp(starts-11, reading-12)
det(value-15, the-13)
nn(value-15, text-14)
nsubj(>-17, value-15)
npadvmod(>-17, >-16)
xcomp(reading-12, >-17)

When/WRB the/DT text/NN is/VBZ read-only/JJ it/PRP should/MD say/VB ,/, "/`` Read-only/JJ Text/VBP </JJR </JJR and/CC start/VB reading/VBG the/DT text/NN value/NN >/JJR >/JJR "/'' ./. 

(ROOT (S (S (SBAR (WHADVP (WRB When)) (S (NP (DT the) (NN text)) (VP (VBZ is) (ADJP (JJ read-only))))) (NP (PRP it)) (VP (MD should) (VP (VB say)))) (, ,) (S (`` ``) (NP (JJ Read-only)) (VP (VP (VBP Text) (ADJP (ADJP (JJR <)) (JJR <))) (CC and) (VP (VB start) (S (VP (VBG reading) (S (NP (DT the) (NN text) (NN value)) (ADJP (NP (JJR >)) (JJR >))))))) ('' '')) (. .)))

root(ROOT-0, say-8)
advmod(read-only-5, When-1)
det(text-3, the-2)
nsubj(read-only-5, text-3)
cop(read-only-5, is-4)
advcl(say-8, read-only-5)
nsubj(say-8, it-6)
aux(say-8, should-7)
nsubj(Text-12, Read-only-11)
nsubj(start-16, Read-only-11)
parataxis(say-8, Text-12)
acomp(Text-12, <-13)
dep(<-13, <-14)
parataxis(say-8, start-16)
conj_and(Text-12, start-16)
xcomp(start-16, reading-17)
det(value-20, the-18)
nn(value-20, text-19)
nsubj(>-22, value-20)
npadvmod(>-22, >-21)
xcomp(reading-17, >-22)

