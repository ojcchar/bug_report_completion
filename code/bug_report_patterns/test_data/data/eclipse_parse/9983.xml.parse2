Let/VB 's/PRP say/VB I/PRP have/VBP 2/CD projects/NNS ,/, p1/NN and/CC p2/NN ./. 

(ROOT (S (VP (VB Let) (S (NP (PRP 's)) (VP (VB say) (SBAR (S (NP (PRP I)) (VP (VBP have) (NP (NP (CD 2) (NNS projects)) (, ,) (NP (NN p1)) (CC and) (NP (NN p2))))))))) (. .)))

root(ROOT-0, Let-1)
nsubj(say-3, 's-2)
ccomp(Let-1, say-3)
nsubj(have-5, I-4)
ccomp(say-3, have-5)
num(projects-7, 2-6)
dobj(have-5, projects-7)
dobj(have-5, p1-9)
conj_and(projects-7, p1-9)
dobj(have-5, p2-11)
conj_and(projects-7, p2-11)

p1/NN has/VBZ some/DT errors/warnings/NNS ./. 

(ROOT (S (NP (NN p1)) (VP (VBZ has) (NP (DT some) (NNS errors/warnings))) (. .)))

root(ROOT-0, has-2)
nsubj(has-2, p1-1)
det(errors/warnings-4, some-3)
dobj(has-2, errors/warnings-4)

I/PRP close/RB project/NN p2/NN ./. 

(ROOT (S (NP (PRP I)) (VP (RB close) (NP (NN project) (NN p2))) (. .)))

root(ROOT-0, p2-4)
nsubj(p2-4, I-1)
advmod(p2-4, close-2)
nn(p2-4, project-3)

Due/JJ to/TO this/DT ,/, it/PRP stays/VBZ selected/VBN ./. 

(ROOT (S (PP (JJ Due) (TO to) (NP (DT this))) (, ,) (NP (PRP it)) (VP (VBZ stays) (ADJP (VBN selected))) (. .)))

root(ROOT-0, stays-6)
prep_due_to(stays-6, this-3)
nsubj(stays-6, it-5)
acomp(stays-6, selected-7)

I/PRP go/VBP to/TO the/DT toolbar/NN and/CC click/VB on/IN Build/NNP button/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VP (VBP go) (PP (TO to) (NP (DT the) (NN toolbar)))) (CC and) (VP (VB click) (PP (IN on) (NP (NNP Build) (NN button))))) (. .)))

root(ROOT-0, go-2)
nsubj(go-2, I-1)
nsubj(click-7, I-1)
det(toolbar-5, the-4)
prep_to(go-2, toolbar-5)
conj_and(go-2, click-7)
nn(button-10, Build-9)
prep_on(click-7, button-10)

Errors/warnings/NNS appear/VBP in/IN the/DT Tasks/NNPS list/NN ./. 

(ROOT (S (NP (NNS Errors/warnings)) (VP (VBP appear) (PP (IN in) (NP (DT the) (NNPS Tasks) (NN list)))) (. .)))

root(ROOT-0, appear-2)
nsubj(appear-2, Errors/warnings-1)
det(list-6, the-4)
nn(list-6, Tasks-5)
prep_in(appear-2, list-6)

I/PRP click/VBP again/RB on/IN the/DT Build/NNP button/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VBP click) (ADVP (RB again)) (PP (IN on) (NP (DT the) (NNP Build) (NN button)))) (. .)))

root(ROOT-0, click-2)
nsubj(click-2, I-1)
advmod(click-2, again-3)
det(button-7, the-5)
nn(button-7, Build-6)
prep_on(click-2, button-7)

The/DT previous/JJ errors/warnings/NNS do/VBP not/RB get/VB erased/VBN ,/, so/IN the/DT new/JJ batch/NN of/IN errors/warnings/NNS gets/VBZ duplicated/JJ ./. 

(ROOT (S (S (NP (DT The) (JJ previous) (NNS errors/warnings)) (VP (VBP do) (RB not) (VP (VB get) (VP (VBN erased))))) (, ,) (IN so) (S (NP (NP (DT the) (JJ new) (NN batch)) (PP (IN of) (NP (NNS errors/warnings)))) (VP (VBZ gets) (ADJP (JJ duplicated)))) (. .)))

root(ROOT-0, erased-7)
det(errors/warnings-3, The-1)
amod(errors/warnings-3, previous-2)
nsubjpass(erased-7, errors/warnings-3)
aux(erased-7, do-4)
neg(erased-7, not-5)
auxpass(erased-7, get-6)
dep(erased-7, so-9)
det(batch-12, the-10)
amod(batch-12, new-11)
nsubj(duplicated-16, batch-12)
prep_of(batch-12, errors/warnings-14)
dep(duplicated-16, gets-15)
parataxis(erased-7, duplicated-16)

Same/JJ scenario/NN repeats/NNS on/IN each/DT new/JJ Build/NNP invocation/NN and/CC the/DT Tasks/NNPS list/NN keeps/VBZ growing/VBG ./. 

(ROOT (S (NP (NP (JJ Same) (NN scenario) (NNS repeats)) (PP (IN on) (NP (NP (DT each) (JJ new) (NNP Build) (NN invocation)) (CC and) (NP (DT the) (NNPS Tasks) (NN list))))) (VP (VBZ keeps) (ADJP (VBG growing))) (. .)))

root(ROOT-0, keeps-13)
amod(repeats-3, Same-1)
nn(repeats-3, scenario-2)
nsubj(keeps-13, repeats-3)
det(invocation-8, each-5)
amod(invocation-8, new-6)
nn(invocation-8, Build-7)
prep_on(repeats-3, invocation-8)
det(list-12, the-10)
nn(list-12, Tasks-11)
prep_on(repeats-3, list-12)
conj_and(invocation-8, list-12)
acomp(keeps-13, growing-14)

