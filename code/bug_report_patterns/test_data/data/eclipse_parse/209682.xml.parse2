Created/VBN attachment/NN 82791/CD Patch/NNP for/IN CBasicType/NN on/IN HEAD/NN 

(ROOT (VP (VBN Created) (NP (NP (NN attachment) (CD 82791) (NNP Patch)) (PP (IN for) (NP (NN CBasicType)))) (PP (IN on) (NP (NN HEAD)))))

root(ROOT-0, Created-1)
nn(Patch-4, attachment-2)
num(Patch-4, 82791-3)
dobj(Created-1, Patch-4)
prep_for(Patch-4, CBasicType-6)
prep_on(Created-1, HEAD-8)

Build/VB ID/NNP :/: M20071023-1652/NN 

(ROOT (S (VP (VB Build) (NP (NP (NNP ID)) (: :) (NP (NN M20071023-1652))))))

root(ROOT-0, Build-1)
dobj(Build-1, ID-2)
dep(ID-2, M20071023-1652-4)

Steps/NNS To/TO Reproduce/VB :/: 

(ROOT (S (NP (NNS Steps)) (VP (TO To) (VP (VB Reproduce))) (: :)))

root(ROOT-0, Reproduce-3)
nsubj(Reproduce-3, Steps-1)
aux(Reproduce-3, To-2)

long/RB long/RB i/FW ;/: 

(ROOT (NP (NP (NP (RB long) (RB long)) (NP (FW i))) (: ;)))

root(ROOT-0, long-2)
advmod(long-2, long-1)
dep(long-2, i-3)

unsigned/JJ char/NN c/NN ;/: 

(ROOT (NP (NP (JJ unsigned) (NN char) (NN c)) (: ;)))

root(ROOT-0, c-3)
amod(c-3, unsigned-1)
nn(c-3, char-2)

i/LS =/SYM 1/CD ;/: //: //: ICBasicType.isLongLong/NN (/-LRB- )/-RRB- ==/CD false/JJ c/NN =/JJ 1/CD ;/: //: //: ICBasicType.isLongLong/NN (/-LRB- )/-RRB- ==/RB true/JJ 

(ROOT (S (VP (VP (VP (LS i) (S (VP (SYM =) (NP (CD 1))))) (PRN (: ;) (S (VP (: /) (PRN (: /) (S (NP (NP (NN ICBasicType.isLongLong)) (-LRB- -LRB-) (PP (-RRB- -RRB-) (NP (CD ==) (JJ false) (NN c)))) (ADJP (JJ =) (NP-TMP (CD 1)))) (: ;)))) (: /))) (PRN (: /) (S (NP (NP (NN ICBasicType.isLongLong)) (-LRB- -LRB-) (PP (-RRB- -RRB-) (NP (RB ==)))) (ADJP (JJ true)))))))

root(ROOT-0, i-1)
dep(1-3, =-2)
ccomp(i-1, 1-3)
punct(=-13, /-5)
punct(=-13, /-6)
dep(=-13, ICBasicType.isLongLong-7)
num(c-12, ==-10)
amod(c-12, false-11)
prep(ICBasicType.isLongLong-7, c-12)
parataxis(i-1, =-13)
tmod(=-13, 1-14)
punct(=-13, /-16)
punct(true-22, /-17)
dep(true-22, ICBasicType.isLongLong-18)
prep(ICBasicType.isLongLong-18, ==-21)
parataxis(i-1, true-22)

More/JJR information/NN :/: CBasicType/NN incorrectly/RB copies/NNS from/IN the/DT ICASTSimpleDeclSpecifier/NN in/IN the/DT case/NN of/IN long/JJ long/JJ -/: a/DT simple/JJ cut/NN and/CC paste/VB error/NN ./. 

(ROOT (NP (NP (JJR More) (NN information)) (: :) (NP (NP (NP (NN CBasicType)) (RRC (ADVP (RB incorrectly)) (NP (NP (NNS copies)) (PP (IN from) (NP (NP (DT the) (NN ICASTSimpleDeclSpecifier)) (PP (IN in) (NP (NP (DT the) (NN case)) (PP (IN of) (NP (JJ long) (JJ long)))))))))) (: -) (NP (NP (DT a) (JJ simple) (NN cut)) (CC and) (NP (VB paste) (NN error)))) (. .)))

root(ROOT-0, information-2)
amod(information-2, More-1)
dep(information-2, CBasicType-4)
advmod(copies-6, incorrectly-5)
rcmod(CBasicType-4, copies-6)
det(ICASTSimpleDeclSpecifier-9, the-8)
prep_from(copies-6, ICASTSimpleDeclSpecifier-9)
det(case-12, the-11)
prep_in(ICASTSimpleDeclSpecifier-9, case-12)
amod(long-15, long-14)
prep_of(case-12, long-15)
det(cut-19, a-17)
amod(cut-19, simple-18)
dep(CBasicType-4, cut-19)
dep(error-22, paste-21)
dep(CBasicType-4, error-22)
conj_and(cut-19, error-22)

The/DT consequence/NN is/VBZ that/IN all/DT unsigned/JJ variables/NNS appear/VBP to/TO be/VB long/RB long/RB ,/, and/CC signed/VBD long/RB long/RB is/VBZ not/RB a/DT long/RB long/RB ./. 

(ROOT (S (NP (NP (DT The) (NN consequence)) (SBAR (S (VP (VBZ is) (SBAR (IN that) (S (NP (DT all) (JJ unsigned) (NNS variables)) (VP (VP (VBP appear) (S (VP (TO to) (VP (VB be) (ADVP (RB long) (RB long)))))) (, ,) (CC and) (VP (VBD signed) (ADVP (RB long) (RB long)))))))))) (VP (VBZ is) (NP (RB not) (DT a)) (ADVP (RB long) (RB long))) (. .)))

root(ROOT-0, a-20)
det(consequence-2, The-1)
nsubj(a-20, consequence-2)
rcmod(consequence-2, is-3)
mark(appear-8, that-4)
det(variables-7, all-5)
amod(variables-7, unsigned-6)
nsubj(appear-8, variables-7)
nsubj(signed-15, variables-7)
ccomp(is-3, appear-8)
aux(be-10, to-9)
xcomp(appear-8, be-10)
advmod(long-12, long-11)
advmod(be-10, long-12)
ccomp(is-3, signed-15)
conj_and(appear-8, signed-15)
advmod(long-17, long-16)
advmod(signed-15, long-17)
cop(a-20, is-18)
neg(a-20, not-19)
advmod(long-22, long-21)
advmod(a-20, long-22)

