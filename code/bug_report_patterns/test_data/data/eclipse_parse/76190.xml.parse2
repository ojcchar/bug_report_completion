20041013/CD 

(ROOT (FRAG (NP (CD 20041013))))

root(ROOT-0, 20041013-1)

The/DT body/NN of/IN an/DT EnumDeclaration/NNP is/VBZ defined/VBN as/IN 

(ROOT (S (NP (NP (DT The) (NN body)) (PP (IN of) (NP (DT an) (NNP EnumDeclaration)))) (VP (VBZ is) (VP (VBN defined) (PP (IN as))))))

root(ROOT-0, defined-7)
det(body-2, The-1)
nsubjpass(defined-7, body-2)
det(EnumDeclaration-5, an-4)
prep_of(body-2, EnumDeclaration-5)
auxpass(defined-7, is-6)
prep(defined-7, as-8)

*/SYM </JJR b/NN >/JJR {/-LRB- </JJR //: b/NN >/JJR 

(ROOT (X (X (SYM *)) (NP (NP (JJR <) (NN b)) (NP (NP (JJR >)) (-LRB- -LCB-) (NP (NP (JJR <)) (PRN (: /) (S (NP (NN b)) (ADJP (JJR >)))))))))

root(ROOT-0, b-3)
dep(b-3, *-1)
amod(b-3, <-2)
dep(b-3, >-4)
dep(>-4, <-6)
punct(>-9, /-7)
dep(>-9, b-8)
dep(<-6, >-9)

*/SYM [/-LRB- EnumConstantDeclaration/NNP {/-LRB- </JJR b/NN >/JJR ,/, </JJR //: b/NN >/JJR EnumConstantDeclaration/NNP }/-RRB- ]/-RRB- [/-LRB- 

(ROOT (X (X (SYM *)) (NP (NP (NP (-LRB- -LSB-) (NNP EnumConstantDeclaration)) (-LRB- -LCB-) (NP (NP (NP (NP (JJR <) (NN b)) (ADJP (JJR >) (, ,) (JJR <))) (PRN (: /) (S (NP (NN b)) (ADJP (JJR >))))) (NP (NNP EnumConstantDeclaration))) (-RRB- -RCB-)) (NP (-RRB- -RSB-) (-LRB- -LSB-)))))

root(ROOT-0, EnumConstantDeclaration-3)
dep(EnumConstantDeclaration-3, *-1)
punct(EnumConstantDeclaration-3, -LSB--2)
amod(b-6, <-5)
dep(EnumConstantDeclaration-3, b-6)
dep(<-9, >-7)
amod(b-6, <-9)
punct(>-12, /-10)
dep(>-12, b-11)
dep(b-6, >-12)
appos(b-6, EnumConstantDeclaration-13)
dep(EnumConstantDeclaration-3, -RSB--15)
punct(-RSB--15, -LSB--16)

</JJR b/NN >/JJR ,/, </JJR //: b/NN >/JJR ]/-RRB- 

(ROOT (S (NP (JJR <) (NN b)) (ADJP (ADJP (JJR >)) (, ,) (ADJP (ADJP (JJR <)) (PRN (: /) (S (NP (NN b)) (ADJP (JJR >)))))) (-RRB- -RSB-)))

root(ROOT-0, >-3)
amod(b-2, <-1)
dep(>-3, b-2)
dep(>-3, <-5)
punct(>-8, /-6)
dep(>-8, b-7)
dep(<-5, >-8)
punct(>-3, -RSB--9)

*/SYM [/-LRB- </JJR b/NN >/JJR ;/: </JJR //: b/NN >/JJR {/-LRB- ClassBodyDeclaration/NNP |/CD </JJR b/NN >/JJR ;/: </JJR //: b/NN >/JJR }/-RRB- ]/-RRB- 

(ROOT (FRAG (X (SYM *)) (VP (-LRB- -LSB-) (NP (JJR <) (NN b)) (NP (NP (JJR >) (PRN (: ;) (ADJP (JJR <)) (: /))) (ADJP (ADJP (NN b) (JJR >)) (PRN (-LRB- -LCB-) (NP (NP (NNP ClassBodyDeclaration)) (NP (NP (CD |) (JJR <) (NN b)) (NP (NP (JJR >) (PRN (: ;) (ADJP (JJR <)) (: /))) (ADJP (NN b) (JJR >))))) (-RRB- -RCB-))))) (-RRB- -RSB-)))

root(ROOT-0, b-4)
dep(b-4, *-1)
punct(b-4, -LSB--2)
amod(b-4, <-3)
dobj(b-4, >-5)
dep(>-5, <-7)
punct(<-7, /-8)
amod(>-5, b-9)
dep(b-9, >-10)
dep(b-9, ClassBodyDeclaration-12)
num(b-15, |-13)
amod(b-15, <-14)
dep(ClassBodyDeclaration-12, b-15)
dep(b-15, >-16)
dep(>-16, <-18)
punct(<-18, /-19)
amod(>-16, b-20)
dep(b-20, >-21)
punct(b-4, -RSB--23)

*/SYM </JJR b/NN >/JJR }/-RRB- </JJR //: b/NN >/JJR 

(ROOT (X (X (SYM *)) (S (ADJP (JJR <)) (S (VP (NN b) (VP (JJR >) (-RRB- -RCB-) (ADJP (ADJP (JJR <)) (PRN (: /) (S (NP (NN b)) (ADJP (JJR >)))))))))))

root(ROOT-0, <-6)
dep(<-6, *-1)
dep(<-6, <-2)
dep(<-6, b-3)
dep(<-6, >-4)
punct(>-9, /-7)
dep(>-9, b-8)
dep(<-6, >-9)

In/IN the/DT API/NN of/IN '/`` EnumDeclaration/NNP '/'' the/DT two/CD lists/NNS (/-LRB- constants/NNS and/CC classbody/NN declaration/NN )/-RRB- are/VBP modelled/VBN in/IN one/CD list/NN (/-LRB- body/NN declarations/NNS )/-RRB- 

(ROOT (PP (IN In) (NP (NP (DT the) (NN API)) (PP (IN of) (NP (`` `) (NP (NNP EnumDeclaration)) ('' ') (SBAR (S (NP (NP (DT the) (CD two) (NNS lists)) (PRN (-LRB- -LRB-) (NP (NP (NNS constants)) (CC and) (NP (NN classbody) (NN declaration))) (-RRB- -RRB-))) (VP (VBP are) (VP (VBN modelled) (PP (IN in) (NP (NP (CD one) (NN list)) (PRN (-LRB- -LRB-) (NP (NN body) (NNS declarations)) (-RRB- -RRB-)))))))))))))

root(ROOT-0, In-1)
det(API-3, the-2)
pobj(In-1, API-3)
prep_of(API-3, EnumDeclaration-6)
det(lists-10, the-8)
num(lists-10, two-9)
nsubjpass(modelled-18, lists-10)
dep(lists-10, constants-12)
nn(declaration-15, classbody-14)
dep(lists-10, declaration-15)
conj_and(constants-12, declaration-15)
auxpass(modelled-18, are-17)
rcmod(EnumDeclaration-6, modelled-18)
num(list-21, one-20)
prep_in(modelled-18, list-21)
nn(declarations-24, body-23)
appos(list-21, declarations-24)

Would/MD n't/RB it/PRP be/VB better/JJR to/TO have/VB this/DT is/VBZ two/CD lists/NNS ?/. 

(ROOT (SQ (MD Would) (RB n't) (NP (PRP it)) (VP (VB be) (ADJP (JJR better)) (S (VP (TO to) (VP (VB have) (S (NP (DT this)) (VP (VBZ is) (NP (CD two) (NNS lists)))))))) (. ?)))

root(ROOT-0, better-5)
aux(better-5, Would-1)
neg(better-5, n't-2)
nsubj(better-5, it-3)
cop(better-5, be-4)
aux(have-7, to-6)
xcomp(better-5, have-7)
nsubj(lists-11, this-8)
cop(lists-11, is-9)
num(lists-11, two-10)
ccomp(have-7, lists-11)

I/PRP 'm/VBP currently/RB working/VBG on/IN the/DT AST/NNP rewriter/NN and/CC this/DT gets/VBZ quite/RB tricky/JJ :/: The/DT separator/NN between/IN the/DT list/NN nodes/NNS depends/VBZ on/IN the/DT node/NN type/NN (/-LRB- separators/NNS are/VBP '/'' ,/, '/'' ,/, '/'' ;/: '/'' and/CC new/JJ lines/NNS )/-RRB- Replacing/VBG a/DT node/NN can/MD result/VB in/IN changing/VBG the/DT separator/NN before/IN and/CC after/IN the/DT node/NN ./. 

(ROOT (S (NP (PRP I)) (VP (VBP 'm) (ADVP (RB currently)) (VP (VP (VBG working) (PP (IN on) (NP (DT the) (NNP AST) (NN rewriter)))) (CC and) (PRN (S (NP (DT this)) (VP (VP (VBZ gets) (NP (NP (RB quite) (JJ tricky)) (: :) (NP (NP (DT The) (NN separator)) (PP (IN between) (NP (NP (DT the) (NN list)) (SBAR (S (NP (NNS nodes)) (VP (VBZ depends) (S (PP (IN on) (NP (DT the) (NN node) (NN type))) (-LRB- -LRB-) (NP (NNS separators)) (VP (VBP are)) ('' ')) (, ,) ('' ')) (, ,) ('' ')))))) (: ;))) ('' ') (CC and) (VP (JJ new) (NP (NNS lines))))) (-RRB- -RRB-)) (VP (VBG Replacing) (SBAR (S (NP (DT a) (NN node)) (VP (MD can) (VP (VB result) (PP (IN in) (S (VP (VBG changing) (NP (DT the) (NN separator)) (PP (IN before) (CC and) (IN after) (NP (DT the) (NN node))))))))))))) (. .)))

root(ROOT-0, working-4)
nsubj(working-4, I-1)
nsubj(Replacing-40, I-1)
aux(working-4, 'm-2)
advmod(working-4, currently-3)
det(rewriter-8, the-6)
nn(rewriter-8, AST-7)
prep_on(working-4, rewriter-8)
nsubj(gets-11, this-10)
nsubj(new-37, this-10)
parataxis(working-4, gets-11)
advmod(tricky-13, quite-12)
dobj(gets-11, tricky-13)
det(separator-16, The-15)
dep(tricky-13, separator-16)
det(list-19, the-18)
prep_between(separator-16, list-19)
nsubj(depends-21, nodes-20)
rcmod(list-19, depends-21)
det(type-25, the-23)
nn(type-25, node-24)
prep_on(are-28, type-25)
nsubj(are-28, separators-27)
ccomp(depends-21, are-28)
parataxis(working-4, new-37)
conj_and(gets-11, new-37)
dobj(new-37, lines-38)
conj_and(working-4, Replacing-40)
det(node-42, a-41)
nsubj(result-44, node-42)
aux(result-44, can-43)
ccomp(Replacing-40, result-44)
prepc_in(result-44, changing-46)
prepc_in(result-44, changing-46')
conj_and(changing-46, changing-46')
det(separator-48, the-47)
dobj(changing-46, separator-48)
det(node-53, the-52)
prep_before(changing-46, node-53)
prep_after(changing-46', node-53)

This/DT is/VBZ of/IN course/NN all/DT doable/JJ ,/, but/CC represents/VBZ a/DT special/JJ case/NN ,/, no/DT other/JJ list/NN of/IN nodes/NNS is/VBZ as/IN complicated/VBN ./. 

(ROOT (S (S (NP (DT This)) (VP (VP (VBZ is) (PP (IN of) (NP (NP (NN course)) (ADJP (DT all) (JJ doable))))) (, ,) (CC but) (VP (VBZ represents) (NP (DT a) (JJ special) (NN case))))) (, ,) (NP (NP (DT no) (JJ other) (NN list)) (PP (IN of) (NP (NNS nodes)))) (VP (VBZ is) (ADJP (ADVP (IN as)) (VBN complicated))) (. .)))

root(ROOT-0, complicated-21)
nsubj(is-2, This-1)
nsubj(represents-9, This-1)
ccomp(complicated-21, is-2)
prep_of(is-2, course-4)
det(doable-6, all-5)
amod(course-4, doable-6)
conj_but(is-2, represents-9)
ccomp(complicated-21, represents-9)
det(case-12, a-10)
amod(case-12, special-11)
dobj(represents-9, case-12)
neg(list-16, no-14)
amod(list-16, other-15)
nsubjpass(complicated-21, list-16)
prep_of(list-16, nodes-18)
auxpass(complicated-21, is-19)
advmod(complicated-21, as-20)

Any/DT chance/NN that/IN the/DT lists/NNS can/MD be/VB separated/VBN ?/. 

(ROOT (NP (DT Any) (NN chance) (SBAR (IN that) (S (NP (DT the) (NNS lists)) (VP (MD can) (VP (VB be) (VP (VBN separated)))))) (. ?)))

root(ROOT-0, chance-2)
det(chance-2, Any-1)
mark(separated-8, that-3)
det(lists-5, the-4)
nsubjpass(separated-8, lists-5)
aux(separated-8, can-6)
auxpass(separated-8, be-7)
ccomp(chance-2, separated-8)

I/PRP also/RB think/VBP the/DT merging/VBG of/IN the/DT lists/NNS is/VBZ also/RB conceptionally/RB a/DT hack/NN ./. 

(ROOT (S (NP (PRP I)) (ADVP (RB also)) (VP (VBP think) (SBAR (S (NP (NP (DT the) (VBG merging)) (PP (IN of) (NP (DT the) (NNS lists)))) (VP (VBZ is) (ADVP (RB also)) (ADVP (RB conceptionally)) (NP-TMP (DT a) (NN hack)))))) (. .)))

root(ROOT-0, think-3)
nsubj(think-3, I-1)
advmod(think-3, also-2)
nsubj(is-9, the-4)
amod(the-4, merging-5)
det(lists-8, the-7)
prep_of(the-4, lists-8)
ccomp(think-3, is-9)
advmod(is-9, also-10)
advmod(is-9, conceptionally-11)
det(hack-13, a-12)
tmod(is-9, hack-13)

