I/PRP 'm/VBP not/RB sure/JJ about/IN the/DT reproducibility/NN of/IN this/DT bug/NN ,/, so/IN I/PRP 'm/VBP only/RB marking/VBG it/PRP as/IN normal/JJ severity/NN ./. 

(ROOT (S (S (NP (PRP I)) (VP (VBP 'm) (RB not) (ADJP (JJ sure) (PP (IN about) (NP (NP (DT the) (NN reproducibility)) (PP (IN of) (NP (DT this) (NN bug)))))))) (, ,) (IN so) (S (NP (PRP I)) (VP (VBP 'm) (ADVP (RB only)) (VP (VBG marking) (NP (PRP it)) (PP (IN as) (NP (JJ normal) (NN severity)))))) (. .)))

root(ROOT-0, sure-4)
nsubj(sure-4, I-1)
cop(sure-4, 'm-2)
neg(sure-4, not-3)
det(reproducibility-7, the-6)
prep_about(sure-4, reproducibility-7)
det(bug-10, this-9)
prep_of(reproducibility-7, bug-10)
dep(sure-4, so-12)
nsubj(marking-16, I-13)
aux(marking-16, 'm-14)
advmod(marking-16, only-15)
parataxis(sure-4, marking-16)
dobj(marking-16, it-17)
amod(severity-20, normal-19)
prep_as(marking-16, severity-20)

Basically/RB ,/, the/DT RAC/NN (/-LRB- RAServer/NN process/NN )/-RRB- had/VBD been/VBN left/VBN running/VBG for/IN a/DT while/NN on/IN our/PRP$ Linux_390/NN machine/NN (/-LRB- enwlinx1/NN )/-RRB- and/CC when/WRB I/PRP went/VBD to/TO do/VB the/DT latest/JJS M9/NN testing/NN ,/, I/PRP found/VBD it/PRP in/IN an/DT extremely/RB weird/JJ state/NN ./. 

(ROOT (S (ADVP (RB Basically)) (, ,) (S (NP (NP (DT the) (NN RAC)) (PRN (-LRB- -LRB-) (NP (NN RAServer) (NN process)) (-RRB- -RRB-))) (VP (VBD had) (VP (VBN been) (VP (VBN left) (S (VP (VBG running) (PP (IN for) (NP (NP (DT a) (NN while)) (PP (IN on) (NP (NP (PRP$ our) (NN Linux_390) (NN machine)) (PRN (-LRB- -LRB-) (NP (NN enwlinx1)) (-RRB- -RRB-)))))))))))) (CC and) (S (SBAR (WHADVP (WRB when)) (S (NP (PRP I)) (VP (VBD went) (S (VP (TO to) (VP (VB do) (NP (DT the) (JJS latest) (NN M9) (NN testing)))))))) (, ,) (NP (PRP I)) (VP (VBD found) (NP (PRP it)) (PP (IN in) (NP (DT an) (ADJP (RB extremely) (JJ weird)) (NN state))))) (. .)))

root(ROOT-0, left-11)
advmod(left-11, Basically-1)
det(RAC-4, the-3)
nsubjpass(left-11, RAC-4)
nn(process-7, RAServer-6)
appos(RAC-4, process-7)
aux(left-11, had-9)
auxpass(left-11, been-10)
xcomp(left-11, running-12)
det(while-15, a-14)
prep_for(running-12, while-15)
poss(machine-19, our-17)
nn(machine-19, Linux_390-18)
prep_on(while-15, machine-19)
appos(machine-19, enwlinx1-21)
advmod(went-26, when-24)
nsubj(went-26, I-25)
advcl(found-35, went-26)
aux(do-28, to-27)
xcomp(went-26, do-28)
det(testing-32, the-29)
amod(testing-32, latest-30)
nn(testing-32, M9-31)
dobj(do-28, testing-32)
nsubj(found-35, I-34)
conj_and(left-11, found-35)
dobj(found-35, it-36)
det(state-41, an-38)
advmod(weird-40, extremely-39)
amod(state-41, weird-40)
prep_in(found-35, state-41)

If/IN you/PRP did/VBD a/DT '/`` ps/SYM -/: eaf/NN '/'' to/TO list/VB the/DT processes/NNS ,/, it/PRP was/VBD n't/RB listed/VBN in/IN there/EX by/IN name/NN ,/, but/CC was/VBD instead/RB replaced/VBN by/IN a/DT whole/JJ bunch/NN of/IN processes/NNS whose/WP$ name/NN was/VBD "/'' </JJR phi/NN >/JJR X/NN "/'' (/-LRB- where/WRB </JJR phi/NN >/JJR is/VBZ replaced/VBN by/IN the/DT ASCII/NNP extended/VBD symbol/NN for/IN phi/NN )/-RRB- ./. 

(ROOT (S (SBAR (IN If) (S (NP (PRP you)) (VP (VBD did) (NP (DT a)) (`` `) (FRAG (X (SYM ps)) (: -) (NP (NN eaf))) ('' ') (PP (TO to) (VP (VB list) (NP (DT the) (NNS processes))))))) (, ,) (NP (PRP it)) (VP (VP (VBD was) (RB n't) (VP (VBN listed) (PP (IN in) (NP (EX there))) (PP (IN by) (NP (NN name))))) (, ,) (CC but) (VP (VBD was) (VP (ADVP (RB instead)) (VBN replaced) (PP (IN by) (NP (NP (DT a) (JJ whole) (NN bunch)) (PP (IN of) (NP (NP (NNS processes)) (SBAR (WHNP (WP$ whose) (NN name)) (S (VP (VBD was)))))) ('' '') (NP (NP (JJR <) (NN phi)) (NP (NP (NP (JJR >)) (NP (NN X) ('' ''))) (PRN (-LRB- -LRB-) (SBAR (WHADVP (WRB where)) (S (NP (NP (JJR <) (NN phi)) (SBAR (S (NP (JJR >)) (VP (VBZ is) (VP (VBN replaced) (PP (IN by) (NP (DT the) (NNP ASCII)))))))) (VP (VBD extended) (NP (NN symbol)) (PP (IN for) (NP (NN phi)))))) (-RRB- -RRB-))))))))) (. .)))

root(ROOT-0, listed-18)
mark(did-3, If-1)
nsubj(did-3, you-2)
advcl(listed-18, did-3)
dobj(did-3, a-4)
dep(eaf-8, ps-6)
dep(did-3, eaf-8)
prep(did-3, to-10)
dep(to-10, list-11)
det(processes-13, the-12)
dobj(list-11, processes-13)
nsubjpass(listed-18, it-15)
nsubjpass(replaced-27, it-15)
auxpass(listed-18, was-16)
neg(listed-18, n't-17)
prep_in(listed-18, there-20)
agent(listed-18, name-22)
auxpass(replaced-27, was-25)
advmod(replaced-27, instead-26)
conj_but(listed-18, replaced-27)
det(bunch-31, a-29)
amod(bunch-31, whole-30)
agent(replaced-27, bunch-31)
prep_of(bunch-31, processes-33)
poss(name-35, whose-34)
nsubj(was-36, name-35)
rcmod(processes-33, was-36)
amod(phi-39, <-38)
dep(bunch-31, phi-39)
dep(phi-39, >-40)
dep(>-40, X-41)
advmod(extended-53, where-44)
amod(phi-46, <-45)
nsubj(extended-53, phi-46)
nsubjpass(replaced-49, >-47)
auxpass(replaced-49, is-48)
rcmod(phi-46, replaced-49)
det(ASCII-52, the-51)
agent(replaced-49, ASCII-52)
dep(>-40, extended-53)
dobj(extended-53, symbol-54)
prep_for(extended-53, phi-56)

I/PRP 'm/VBP attaching/VBG the/DT servicelog/NN (/-LRB- zipped/VBN up/RP )/-RRB- ./. 

(ROOT (S (NP (PRP I)) (VP (VBP 'm) (VP (VBG attaching) (NP (NP (DT the) (NN servicelog)) (PRN (-LRB- -LRB-) (VP (VBN zipped) (PRT (RP up))) (-RRB- -RRB-))))) (. .)))

root(ROOT-0, attaching-3)
nsubj(attaching-3, I-1)
aux(attaching-3, 'm-2)
det(servicelog-5, the-4)
dobj(attaching-3, servicelog-5)
dep(servicelog-5, zipped-7)
prt(zipped-7, up-8)

It/PRP looks/VBZ like/IN the/DT RAC/NN got/VBD into/IN some/DT infinite/JJ loop/NN given/VBN the/DT long/JJ string/NN of/IN repeated/VBN messages/NNS ./. 

(ROOT (S (NP (PRP It)) (VP (VBZ looks) (SBAR (IN like) (S (NP (DT the) (NN RAC)) (VP (VBD got) (PP (IN into) (NP (DT some) (JJ infinite) (NN loop))) (PP (VBN given) (NP (NP (DT the) (JJ long) (NN string)) (PP (IN of) (NP (VBN repeated) (NNS messages))))))))) (. .)))

root(ROOT-0, looks-2)
nsubj(looks-2, It-1)
mark(got-6, like-3)
det(RAC-5, the-4)
nsubj(got-6, RAC-5)
advcl(looks-2, got-6)
det(loop-10, some-8)
amod(loop-10, infinite-9)
prep_into(got-6, loop-10)
prep(got-6, given-11)
det(string-14, the-12)
amod(string-14, long-13)
pobj(given-11, string-14)
amod(messages-17, repeated-16)
prep_of(string-14, messages-17)

