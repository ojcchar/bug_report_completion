1/CD Create/VB the/DT default/NN executable/JJ Hello/UH World/NNP program/NN (/-LRB- Managed/NNP Make/NNP )/-RRB- ./. 

(ROOT (S (NP (CD 1)) (VP (VB Create) (NP (NP (NP (DT the) (NN default) (JJ executable)) (SBAR (S (VP (NP (INTJ (UH Hello)) (NP (NNP World) (NN program))))))) (PRN (-LRB- -LRB-) (NP (NNP Managed) (NNP Make)) (-RRB- -RRB-)))) (. .)))

root(ROOT-0, Create-2)
nsubj(Create-2, 1-1)
det(default-4, the-3)
dobj(Create-2, default-4)
amod(default-4, executable-5)
discourse(program-8, Hello-6)
nn(program-8, World-7)
rcmod(default-4, program-8)
nn(Make-11, Managed-10)
appos(default-4, Make-11)

2/CD Edit/NNP the/DT program/NN as/IN follows/VBZ :/: 

(ROOT (S (NP (CD 2) (NNP Edit)) (ADVP (NP (DT the) (NN program)) (IN as)) (VP (VBZ follows)) (: :)))

root(ROOT-0, follows-6)
num(Edit-2, 2-1)
nsubj(follows-6, Edit-2)
det(program-4, the-3)
npadvmod(as-5, program-4)
advmod(follows-6, as-5)

int/NN main/JJ (/-LRB- void/NN )/-RRB- {/-LRB- int/NN a/DT =/JJ 3/CD ;/: puts/VBZ (/-LRB- "/`` Hello/UH World/NNP "/'' )/-RRB- ;/: printf/NN (/-LRB- "/`` a/DT is/VBZ %/NN d/NN \/CD n/NN "/'' ,/, a/DT )/-RRB- ;/: return/NN 0/CD ;/: }/-RRB- 

(ROOT (S (NP (NN int)) (VP (JJ main) (NP (NP (NP (NP (-LRB- -LRB-) (NN void) (-RRB- -RRB-)) (-LRB- -LCB-) (NP (NP (NN int)) (NP (DT a) (JJ =) (CD 3))) (: ;)) (SBAR (S (VP (VBZ puts) (PRN (-LRB- -LRB-) (`` ``) (ADJP (UH Hello) (NNP World)) ('' '') (-RRB- -RRB-)))))) (: ;) (NP (NP (NN printf)) (PRN (-LRB- -LRB-) (NP (NP (`` ``) (DT a)) (SBAR (S (VP (VBZ is) (VP (NN %) (NP (NP (NP (NN d) (CD \)) (NP (NN n) ('' '')) (, ,) (NP (DT a)) (-RRB- -RRB-)) (: ;) (NP (NN return) (CD 0)) (: ;))))))) (-RRB- -RCB-)))))))

root(ROOT-0, main-2)
nsubj(main-2, int-1)
dobj(main-2, void-4)
dep(void-4, int-7)
det(3-10, a-8)
amod(3-10, =-9)
dep(int-7, 3-10)
rcmod(void-4, puts-12)
dep(puts-12, Hello-15)
dep(Hello-15, World-16)
dep(void-4, printf-20)
dep(printf-20, a-23)
aux(%-25, is-24)
rcmod(a-23, %-25)
dobj(%-25, d-26)
num(d-26, \-27)
dep(d-26, n-28)
appos(d-26, a-31)
dep(d-26, return-34)
num(return-34, 0-35)

3/CD Go/VB the/DT Project/NN -/: >/JJR Properties/NNPS -/: >/JJR C/C/NN +/CC +/CC Build/VB -/: >/JJR Settings/NNS and/CC change/VB the/DT optimization/NN 

(ROOT (FRAG (NP (CD 3)) (VP (VP (VB Go) (NP (NP (DT the) (NN Project)) (: -) (NP (ADJP (JJR >)) (NNPS Properties)))) (: -) (NP (NP (JJR >) (NN C/C)) (CC +) (S (VP (CC +) (VP (VB Build) (: -) (NP (JJR >) (NNS Settings))) (CC and) (VP (VB change) (NP (DT the) (NN optimization)))))))))

root(ROOT-0, 3-1)
dep(3-1, Go-2)
det(Project-4, the-3)
dobj(Go-2, Project-4)
amod(Properties-7, >-6)
dep(Project-4, Properties-7)
amod(C/C-10, >-9)
dobj(Go-2, C/C-10)
dobj(Go-2, Build-13)
conj_+(C/C-10, Build-13)
amod(Settings-16, >-15)
dobj(Build-13, Settings-16)
conj_+(C/C-10, change-18)
conj_and(Build-13, change-18)
det(optimization-20, the-19)
dobj(change-18, optimization-20)

level/NN to/TO -/: O2/CD instead/RB of/IN -/: O0/NN ./. 

(ROOT (NP (NP (NN level)) (PP (TO to) (NP (PRN (: -) (PP (ADVP (NP (CD O2)) (RB instead)) (IN of)) (: -)) (NN O0))) (. .)))

root(ROOT-0, level-1)
npadvmod(instead-5, O2-4)
advmod(of-6, instead-5)
prep(O0-8, of-6)
prep_to(level-1, O0-8)

4/LS Build/VB the/DT project/NN and/CC debug/NN using/VBG gdb/mi/NNS ./. 

(ROOT (S (LST (LS 4)) (VP (VB Build) (NP (NP (DT the) (NN project) (CC and) (NN debug)) (VP (VBG using) (NP (NNS gdb/mi))))) (. .)))

root(ROOT-0, Build-2)
dep(Build-2, 4-1)
det(project-4, the-3)
dobj(Build-2, project-4)
dobj(Build-2, debug-6)
conj_and(project-4, debug-6)
vmod(project-4, using-7)
dobj(using-7, gdb/mi-8)

The/DT first/JJ line/NN it/PRP can/MD stop/VB at/IN is/VBZ the/DT "/`` puts/VBZ "/'' line/NN as/IN the/DT int/NN a/DT =/JJ 3/CD line/NN is/VBZ optimized/VBN away/RB ./. 

(ROOT (S (NP (NP (DT The) (JJ first) (NN line)) (SBAR (S (NP (PRP it)) (VP (MD can) (VP (VB stop) (PP (IN at))))))) (VP (VBZ is) (NP (NP (DT the) (`` ``) (S (VP (VBZ puts))) ('' '') (NN line)) (PP (IN as) (NP (NP (DT the) (NN int)) (SBAR (S (NP (DT a) (JJ =) (CD 3) (NN line)) (VP (VBZ is) (VP (VBN optimized) (ADVP (RB away)))))))))) (. .)))

root(ROOT-0, line-13)
det(line-3, The-1)
amod(line-3, first-2)
nsubj(line-13, line-3)
nsubj(stop-6, it-4)
aux(stop-6, can-5)
rcmod(line-3, stop-6)
prep(stop-6, at-7)
cop(line-13, is-8)
det(line-13, the-9)
dep(line-13, puts-11)
det(int-16, the-15)
prep_as(line-13, int-16)
det(line-20, a-17)
amod(line-20, =-18)
num(line-20, 3-19)
nsubjpass(optimized-22, line-20)
auxpass(optimized-22, is-21)
rcmod(int-16, optimized-22)
advmod(optimized-22, away-23)

This/DT is/VBZ expected/VBN ./. 

(ROOT (S (NP (DT This)) (VP (VBZ is) (VP (VBN expected))) (. .)))

root(ROOT-0, expected-3)
nsubjpass(expected-3, This-1)
auxpass(expected-3, is-2)

Note/VB that/IN the/DT variable/NN a/DT does/VBZ not/RB appear/VB in/IN the/DT Variables/NNP window/NN ./. 

(ROOT (S (VP (VB Note) (SBAR (IN that) (S (NP (DT the) (NN variable)) (DT a) (VP (VBZ does) (RB not) (VP (VB appear) (PP (IN in) (NP (DT the) (NNP Variables) (NN window)))))))) (. .)))

root(ROOT-0, Note-1)
mark(appear-8, that-2)
det(variable-4, the-3)
nsubj(appear-8, variable-4)
dep(appear-8, a-5)
aux(appear-8, does-6)
neg(appear-8, not-7)
ccomp(Note-1, appear-8)
det(window-12, the-10)
nn(window-12, Variables-11)
prep_in(appear-8, window-12)

5/CD click/VBP on/IN the/DT gdb/NN executable/JJ and/CC in/IN the/DT Console/NNP window/NN type/NN :/: print/VB a/DT 

(ROOT (S (NP (CD 5)) (VP (VBP click) (PP (IN on) (NP (DT the) (NN gdb))) (UCP (ADJP (JJ executable)) (CC and) (PP (IN in) (NP (NP (DT the) (NNP Console) (NN window) (NN type)) (: :) (S (VP (VB print) (NP (DT a))))))))))

root(ROOT-0, click-2)
nsubj(click-2, 5-1)
det(gdb-5, the-4)
prep_on(click-2, gdb-5)
acomp(click-2, executable-6)
acomp(click-2, in-8)
conj_and(executable-6, in-8)
det(type-12, the-9)
nn(type-12, Console-10)
nn(type-12, window-11)
pobj(in-8, type-12)
dep(type-12, print-14)
dobj(print-14, a-15)

6/CD Click/VB back/RB on/IN the/DT debugging/VBG executable/JJ and/CC hover/VB over/IN the/DT variable/NN a/DT 

(ROOT (FRAG (NP (CD 6)) (VP (VP (VB Click) (ADVP (RB back)) (PP (IN on) (NP (NP (DT the) (VBG debugging)) (ADJP (JJ executable))))) (CC and) (VP (VB hover) (PP (IN over) (NP (NP (DT the) (NN variable)) (NP (DT a))))))))

root(ROOT-0, 6-1)
dep(6-1, Click-2)
advmod(Click-2, back-3)
prep_on(Click-2, the-5)
amod(the-5, debugging-6)
amod(the-5, executable-7)
dep(6-1, hover-9)
conj_and(Click-2, hover-9)
det(variable-12, the-11)
prep_over(hover-9, variable-12)
dep(variable-12, a-13)

in/IN the/DT source/NN window/NN ./. 

(ROOT (FRAG (PP (IN in) (NP (DT the) (NN source) (NN window))) (. .)))

root(ROOT-0, in-1)
det(window-4, the-2)
nn(window-4, source-3)
pobj(in-1, window-4)

7/CD Step/NN to/TO the/DT printf/NN line/NN where/WRB a/DT is/VBZ actually/RB used/VBN ./. 

(ROOT (NP (NP (CD 7) (NN Step)) (PP (TO to) (NP (NP (DT the) (NN printf) (NN line)) (SBAR (WHADVP (WRB where)) (S (NP (DT a)) (VP (VBZ is) (ADVP (RB actually)) (VP (VBN used))))))) (. .)))

root(ROOT-0, Step-2)
num(Step-2, 7-1)
det(line-6, the-4)
nn(line-6, printf-5)
prep_to(Step-2, line-6)
advmod(used-11, where-7)
nsubjpass(used-11, a-8)
auxpass(used-11, is-9)
advmod(used-11, actually-10)
rcmod(line-6, used-11)

Again/RB ,/, note/NN that/WDT 

(ROOT (X (NP (NP (RB Again)) (, ,) (PP (NN note) (NP (WDT that))))))

root(ROOT-0, Again-1)
prep(Again-1, note-3)
dep(note-3, that-4)

a/DT is/VBZ not/RB shown/VBN in/IN the/DT Variables/NNP Window/NNP ./. 

(ROOT (S (NP (DT a)) (VP (VBZ is) (RB not) (VP (VBN shown) (PP (IN in) (NP (DT the) (NNP Variables) (NNP Window))))) (. .)))

root(ROOT-0, shown-4)
nsubjpass(shown-4, a-1)
auxpass(shown-4, is-2)
neg(shown-4, not-3)
det(Window-8, the-6)
nn(Window-8, Variables-7)
prep_in(shown-4, Window-8)

In/IN steps/NNS 5/CD and/CC 6/CD ,/, gdb/NN knows/VBZ the/DT value/NN of/IN a/DT is/VBZ 3/CD and/CC so/RB does/VBZ the/DT debug/NN hover/NN somehow/RB ,/, yet/RB the/DT variable/NN a/DT never/RB gets/VBZ shown/VBN in/IN the/DT Variables/NNP window/NN ./. 

(ROOT (S (PP (IN In) (NP (NNS steps) (CD 5) (CC and) (CD 6))) (PRN (, ,) (S (NP (NN gdb)) (VP (VP (VBZ knows) (SBAR (S (NP (NP (DT the) (NN value)) (PP (IN of) (NP (DT a)))) (VP (VBZ is) (NP (CD 3)))))) (CC and) (VP (ADVP (RB so)) (VBZ does) (NP (DT the) (NN debug) (NN hover)) (ADVP (RB somehow))))) (, ,)) (NP (NP (ADVP (RB yet) (NP (DT the) (NN variable))) (DT a)) (ADVP (RB never))) (VP (VBZ gets) (VP (VBN shown) (PP (IN in) (NP (DT the) (NNP Variables) (NN window))))) (. .)))

root(ROOT-0, shown-29)
prep_in(shown-29, steps-2)
num(steps-2, 5-3)
conj_and(steps-2, 6-5)
prep_in(shown-29, 6-5)
nsubj(knows-8, gdb-7)
nsubj(does-17, gdb-7)
parataxis(shown-29, knows-8)
det(value-10, the-9)
nsubj(3-14, value-10)
prep_of(value-10, a-12)
cop(3-14, is-13)
ccomp(knows-8, 3-14)
advmod(does-17, so-16)
conj_and(knows-8, does-17)
parataxis(shown-29, does-17)
det(hover-20, the-18)
nn(hover-20, debug-19)
dobj(does-17, hover-20)
advmod(does-17, somehow-21)
advmod(a-26, yet-23)
det(variable-25, the-24)
pobj(yet-23, variable-25)
nsubjpass(shown-29, a-26)
advmod(a-26, never-27)
auxpass(shown-29, gets-28)
det(window-33, the-31)
nn(window-33, Variables-32)
prep_in(shown-29, window-33)

This/DT problem/NN was/VBD discovered/VBN by/IN the/DT Autotools/NNPS plug-in/JJ because/IN the/DT default/NN compilation/NN options/NNS chosen/VBN by/IN autotools/NNS are/VBP :/: "/'' -/: g/NN -/: O2/CD "/'' ./. 

(ROOT (S (NP (DT This) (NN problem)) (VP (VBD was) (VP (VBN discovered) (PP (IN by) (NP (NP (DT the) (NNPS Autotools)) (PP (NP (ADJP (JJ plug-in) (PP (IN because) (NP (DT the) (NN default)))) (NN compilation)) (NP (NP (NNS options)) (VP (VBN chosen) (PP (IN by) (NP (NP (NNS autotools)) (VP (VBP are))))))) (: :) ('' ''))) (: -) (NP (NP (NN g)) (: -) (NP (CD O2)) ('' '')))) (. .)))

root(ROOT-0, discovered-4)
det(problem-2, This-1)
nsubjpass(discovered-4, problem-2)
auxpass(discovered-4, was-3)
det(Autotools-7, the-6)
agent(discovered-4, Autotools-7)
amod(compilation-12, plug-in-8)
det(default-11, the-10)
prep_because(plug-in-8, default-11)
prep(Autotools-7, compilation-12)
dep(compilation-12, options-13)
vmod(options-13, chosen-14)
agent(chosen-14, autotools-16)
dep(autotools-16, are-17)
dobj(discovered-4, g-21)
dep(g-21, O2-23)

The/DT problem/NN occurs/VBZ for/IN CDI/NNP as/RB well/RB as/IN DSF/NNP so/IN the/DT problem/NN could/MD exist/VB in/IN the/DT gdb/mi/NN protocol/NN itself/PRP ./. 

(ROOT (S (NP (DT The) (NN problem)) (VP (VBZ occurs) (PP (IN for) (NP (NNP CDI) (CONJP (RB as) (RB well) (IN as)) (NNP DSF))) (SBAR (IN so) (S (NP (DT the) (NN problem)) (VP (MD could) (VP (VB exist) (PP (IN in) (NP (NP (DT the) (NN gdb/mi) (NN protocol)) (ADVP (PRP itself))))))))) (. .)))

root(ROOT-0, occurs-3)
det(problem-2, The-1)
nsubj(occurs-3, problem-2)
prep_for(occurs-3, CDI-5)
prep_for(occurs-3, DSF-9)
conj_and(CDI-5, DSF-9)
mark(exist-14, so-10)
det(problem-12, the-11)
nsubj(exist-14, problem-12)
aux(exist-14, could-13)
advcl(occurs-3, exist-14)
det(protocol-18, the-16)
nn(protocol-18, gdb/mi-17)
prep_in(exist-14, protocol-18)
advmod(protocol-18, itself-19)

It/PRP also/RB occurs/VBZ in/IN 7.0.2/CD ./. 

(ROOT (S (NP (PRP It)) (ADVP (RB also)) (VP (VBZ occurs) (PP (IN in) (NP (CD 7.0.2)))) (. .)))

root(ROOT-0, occurs-3)
nsubj(occurs-3, It-1)
advmod(occurs-3, also-2)
prep_in(occurs-3, 7.0.2-5)

