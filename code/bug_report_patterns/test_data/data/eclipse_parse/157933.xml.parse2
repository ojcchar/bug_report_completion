I/PRP have/VBP created/VBN a/DT small/JJ flash/NN animation/NN to/TO show/VB my/PRP$ workflow/NN problem/NN :/: http://www.scharf.gr/eclipse/Probmens/Mylar/ContextProblem//NN 

(ROOT (S (NP (PRP I)) (VP (VBP have) (VP (VBN created) (NP (DT a) (JJ small) (NN flash) (NN animation)) (S (VP (TO to) (VP (VB show) (NP (PRP$ my) (NN workflow) (NN problem) (: :) (NN http://www.scharf.gr/eclipse/Probmens/Mylar/ContextProblem/)))))))))

root(ROOT-0, created-3)
nsubj(created-3, I-1)
aux(created-3, have-2)
det(animation-7, a-4)
amod(animation-7, small-5)
nn(animation-7, flash-6)
dobj(created-3, animation-7)
aux(show-9, to-8)
vmod(created-3, show-9)
poss(http://www.scharf.gr/eclipse/Probmens/Mylar/ContextProblem/-14, my-10)
nn(http://www.scharf.gr/eclipse/Probmens/Mylar/ContextProblem/-14, workflow-11)
nn(http://www.scharf.gr/eclipse/Probmens/Mylar/ContextProblem/-14, problem-12)
dobj(show-9, http://www.scharf.gr/eclipse/Probmens/Mylar/ContextProblem/-14)

Here/RB 's/VBZ the/DT text/NN version/NN :/: 

(ROOT (SINV (ADVP (RB Here)) (VP (VBZ 's)) (NP (DT the) (NN text) (NN version)) (: :)))

root(ROOT-0, 's-2)
advmod('s-2, Here-1)
det(version-5, the-3)
nn(version-5, text-4)
nsubj('s-2, version-5)

-/: I/PRP work/VBP on/IN task/NN FOO/NN (/-LRB- let/VB 's/POS say/VB I/PRP implement/VB a/DT 

(ROOT (PRN (: -) (S (NP (PRP I)) (VP (VBP work) (PP (IN on) (NP (NN task) (NN FOO))) (PRN (-LRB- -LRB-) (ADVP (VB let)) (POS 's)) (S (VP (VB say) (S (NP (PRP I)) (VP (VB implement) (NP (DT a))))))))))

root(ROOT-0, work-3)
nsubj(work-3, I-2)
nn(FOO-6, task-5)
prep_on(work-3, FOO-6)
dep(work-3, let-8)
dep(let-8, 's-9)
ccomp(work-3, say-10)
nsubj(implement-12, I-11)
ccomp(say-10, implement-12)
dobj(implement-12, a-13)

feature/NN )/-RRB- 

(ROOT (NP (NN feature) (-RRB- -RRB-)))

root(ROOT-0, feature-1)

-/: Now/RB I/PRP see/VBP something/NN in/IN the/DT code/NN that/IN I/PRP think/VBP 

(ROOT (PRN (: -) (S (ADVP (RB Now)) (NP (PRP I)) (VP (VBP see) (NP (NN something)) (PP (IN in) (NP (DT the) (NN code))) (SBAR (IN that) (S (NP (PRP I)) (VP (VBP think))))))))

root(ROOT-0, see-4)
advmod(see-4, Now-2)
nsubj(see-4, I-3)
dobj(see-4, something-5)
det(code-8, the-7)
prep_in(see-4, code-8)
mark(think-11, that-9)
nsubj(think-11, I-10)
ccomp(see-4, think-11)

should/MD be/VB refactored/VBN (/-LRB- not/RB directly/RB related/JJ to/TO 

(ROOT (FRAG (VP (MD should) (VP (VB be) (VP (VBN refactored) (-LRB- -LRB-) (NP (RB not) (RB directly) (JJ related)) (PP (TO to)))))))

root(ROOT-0, refactored-3)
aux(refactored-3, should-1)
auxpass(refactored-3, be-2)
neg(related-7, not-5)
advmod(related-7, directly-6)
dobj(refactored-3, related-7)
prep(refactored-3, to-8)

FOO/NN )/-RRB- ,/, but/CC because/IN I/PRP am/VBP working/VBG on/IN FOO/NNP ,/, I/PRP create/VBP 

(ROOT (S (S (UCP (NP (NN FOO) (-RRB- -RRB-)) (, ,) (CC but) (SBAR (IN because) (S (NP (PRP I)) (VP (VBP am) (VP (VBG working) (PP (IN on) (NP (NNP FOO))))))))) (, ,) (NP (PRP I)) (VP (VBP create))))

root(ROOT-0, create-13)
ccomp(create-13, FOO-1)
mark(working-8, because-5)
nsubj(working-8, I-6)
aux(working-8, am-7)
conj_but(FOO-1, working-8)
ccomp(create-13, working-8)
prep_on(working-8, FOO-10)
nsubj(create-13, I-12)

a/DT new/JJ task/NN FIXME/NN to/TO remind/VB me/PRP to/TO do/VB this/DT ./. 

(ROOT (S (NP (DT a) (JJ new) (NN task) (NN FIXME)) (VP (TO to) (VP (VB remind) (S (NP (PRP me)) (VP (TO to) (VP (VB do) (NP (DT this))))))) (. .)))

root(ROOT-0, remind-6)
det(FIXME-4, a-1)
amod(FIXME-4, new-2)
nn(FIXME-4, task-3)
nsubj(remind-6, FIXME-4)
aux(remind-6, to-5)
dobj(remind-6, me-7)
aux(do-9, to-8)
xcomp(remind-6, do-9)
dobj(do-9, this-10)

-/: If/IN I/PRP now/RB switch/VBP to/TO the/DT newly/RB created/VBN task/NN FIXME/NN ,/, 

(ROOT (PRN (: -) (PP (IN If) (NP (NP (PRP I)) (SBAR (RB now) (S (VP (VBP switch) (PP (TO to) (NP (DT the) (ADJP (RB newly) (VBN created)) (NN task) (NN FIXME)))) (, ,)))))))

root(ROOT-0, If-2)
pobj(If-2, I-3)
advmod(switch-5, now-4)
dep(I-3, switch-5)
det(FIXME-11, the-7)
advmod(created-9, newly-8)
amod(FIXME-11, created-9)
nn(FIXME-11, task-10)
prep_to(switch-5, FIXME-11)

all/DT my/PRP$ editors/NNS get/VBP closed/VBN ./. 

(ROOT (S (NP (DT all) (PRP$ my) (NNS editors)) (VP (VBP get) (ADJP (VBN closed))) (. .)))

root(ROOT-0, closed-5)
predet(editors-3, all-1)
poss(editors-3, my-2)
nsubjpass(closed-5, editors-3)
auxpass(closed-5, get-4)

This/DT makes/VBZ sense/NN if/IN 

(ROOT (S (NP (DT This)) (VP (VBZ makes) (NP (NN sense)) (ADVP (IN if)))))

root(ROOT-0, makes-2)
nsubj(makes-2, This-1)
dobj(makes-2, sense-3)
advmod(makes-2, if-4)

I/PRP switch/VBP to/TO a/DT task/NN that/WDT has/VBZ context/NN ,/, because/IN 

(ROOT (S (NP (PRP I)) (VP (VBP switch) (PP (TO to) (NP (NP (DT a) (NN task)) (SBAR (WHNP (WDT that)) (S (VP (VBZ has) (NP (NN context)) (, ,) (PP (IN because))))))))))

root(ROOT-0, switch-2)
nsubj(switch-2, I-1)
det(task-5, a-4)
prep_to(switch-2, task-5)
nsubj(has-7, that-6)
rcmod(task-5, has-7)
dobj(has-7, context-8)
prep(has-7, because-10)

mylar/JJ puts/VBZ me/PRP in/IN that/DT context/NN ./. 

(ROOT (S (NP (JJ mylar)) (VP (VBZ puts) (NP (PRP me)) (PP (IN in) (NP (DT that) (NN context)))) (. .)))

root(ROOT-0, puts-2)
nsubj(puts-2, mylar-1)
dobj(puts-2, me-3)
det(context-6, that-5)
prep_in(puts-2, context-6)

But/CC FIXME/NNP is/VBZ 

(ROOT (S (CC But) (NP (NNP FIXME)) (VP (VBZ is))))

root(ROOT-0, is-3)
cc(is-3, But-1)
nsubj(is-3, FIXME-2)

a/DT newly/RB created/VBN task/NN without/IN context/NN and/CC I/PRP have/VBP 

(ROOT (NP (NP (DT a) (ADJP (RB newly) (VBN created)) (NN task)) (PP (IN without) (NP (NP (NN context)) (CC and) (S (NP (PRP I)) (VP (VBP have)))))))

root(ROOT-0, task-4)
det(task-4, a-1)
advmod(created-3, newly-2)
amod(task-4, created-3)
prep_without(task-4, context-6)
nsubj(have-9, I-8)
prep_without(task-4, have-9)
conj_and(context-6, have-9)

to/TO start/VB building/VBG the/DT context/NN starting/VBG from/IN zero/CD ./. 

(ROOT (S (VP (TO to) (VP (VB start) (S (VP (VBG building) (NP (DT the) (NN context)) (PP (VBG starting) (PP (IN from) (NP (CD zero)))))))) (. .)))

root(ROOT-0, start-2)
aux(start-2, to-1)
xcomp(start-2, building-3)
det(context-5, the-4)
dobj(building-3, context-5)
prep(building-3, starting-6)
pcomp(starting-6, from-7)
pobj(from-7, zero-8)

All/DT my/PRP$ editors/NNS get/VBP closed/VBN and/CC the/DT expanded/VBN tree/NN 

(ROOT (S (NP (DT All) (PRP$ my) (NNS editors)) (VP (VBP get) (NP (NP (VBN closed)) (CC and) (NP (DT the) (VBN expanded) (NN tree))))))

root(ROOT-0, get-4)
predet(editors-3, All-1)
poss(editors-3, my-2)
nsubj(get-4, editors-3)
dobj(get-4, closed-5)
det(tree-9, the-7)
amod(tree-9, expanded-8)
dobj(get-4, tree-9)
conj_and(closed-5, tree-9)

in/IN the/DT package/NN explorer/NN gets/VBZ collapsed/VBN ./. 

(ROOT (SINV (PP (IN in) (NP (DT the) (NN package) (NN explorer))) (VP (VBZ gets)) (S (VP (VBN collapsed))) (. .)))

root(ROOT-0, gets-5)
det(explorer-4, the-2)
nn(explorer-4, package-3)
prep_in(gets-5, explorer-4)
dep(gets-5, collapsed-6)

-/: This/DT is/VBZ annoying/JJ ,/, because/IN I/PRP have/VBP now/RB to/TO navigate/VB 

(ROOT (PRN (: -) (S (NP (DT This)) (VP (VBZ is) (ADJP (JJ annoying)) (, ,) (SBAR (IN because) (S (NP (PRP I)) (VP (VBP have) (ADVP (RB now)) (S (VP (TO to) (VP (VB navigate)))))))))))

root(ROOT-0, annoying-4)
nsubj(annoying-4, This-2)
cop(annoying-4, is-3)
mark(have-8, because-6)
nsubj(have-8, I-7)
advcl(annoying-4, have-8)
advmod(have-8, now-9)
aux(navigate-11, to-10)
xcomp(have-8, navigate-11)

back/RB to/TO the/DT file/NN I/PRP have/VBP found/VBN the/DT problem/NN that/WDT 

(ROOT (X (ADVP (RB back) (PP (TO to) (NP (NP (DT the) (NN file)) (SBAR (S (NP (PRP I)) (VP (VBP have) (VP (VBN found) (NP (NP (DT the) (NN problem)) (SBAR (WHNP (WDT that)))))))))))))

root(ROOT-0, back-1)
det(file-4, the-3)
prep_to(back-1, file-4)
nsubj(found-7, I-5)
aux(found-7, have-6)
rcmod(file-4, found-7)
det(problem-9, the-8)
dobj(found-7, problem-9)
rcmod(problem-9, that-10)

made/VBN me/PRP creating/VBG the/DT new/JJ task/NN FIXME/NN ./. 

(ROOT (S (VP (VBN made) (S (NP (PRP me)) (VP (VBG creating) (NP (DT the) (JJ new) (NN task) (NN FIXME))))) (. .)))

root(ROOT-0, made-1)
nsubj(creating-3, me-2)
dep(made-1, creating-3)
det(FIXME-7, the-4)
amod(FIXME-7, new-5)
nn(FIXME-7, task-6)
dobj(creating-3, FIXME-7)

-/: However/RB ./. 

(ROOT (PRN (: -) (FRAG (RB However)) (. .)))

root(ROOT-0, However-2)

If/IN I/PRP work/VBP with/IN no/DT task/NN active/JJ ,/, and/CC I/PRP 

(ROOT (SBAR (IN If) (S (NP (PRP I)) (VP (VBP work) (PP (IN with) (NP (NP (DT no) (NN task)) (UCP (ADJP (JJ active)) (, ,) (CC and) (NP (PRP I)))))))))

root(ROOT-0, work-3)
mark(work-3, If-1)
nsubj(work-3, I-2)
neg(task-6, no-5)
prep_with(work-3, task-6)
amod(task-6, active-7)
amod(task-6, I-10)
conj_and(active-7, I-10)

find/VB something/NN interesting/JJ and/CC create/VB a/DT task/NN 

(ROOT (S (VP (VP (VB find) (S (NP (NN something)) (ADJP (JJ interesting)))) (CC and) (VP (VB create) (NP (DT a) (NN task))))))

root(ROOT-0, find-1)
nsubj(interesting-3, something-2)
xcomp(find-1, interesting-3)
conj_and(find-1, create-5)
det(task-7, a-6)
dobj(create-5, task-7)

FIXME/NNP ,/, then/RB I/PRP can/MD activate/VB FIXME/NN a/DT all/DT my/PRP$ editors/NNS 

(ROOT (S (NP (NP (NNP FIXME)) (, ,) (ADVP (RB then)) (NP (PRP I))) (VP (MD can) (VP (VB activate) (NP (NP (NN FIXME)) (NP (DT a) (DT all) (PRP$ my) (NNS editors)))))))

root(ROOT-0, activate-6)
nsubj(activate-6, FIXME-1)
advmod(I-4, then-3)
appos(FIXME-1, I-4)
aux(activate-6, can-5)
dobj(activate-6, FIXME-7)
predet(editors-11, a-8)
predet(editors-11, all-9)
poss(editors-11, my-10)
dep(FIXME-7, editors-11)

remain/VB open/JJ ./. 

(ROOT (S (VP (VB remain) (ADJP (JJ open))) (. .)))

root(ROOT-0, remain-1)
acomp(remain-1, open-2)

But/CC working/VBG on/IN no/DT task/NN is/VBZ also/RB annoying/JJ ,/, 

(ROOT (X (CC But) (S (VP (VBG working) (PP (IN on) (NP (NP (DT no) (NN task)) (SBAR (S (VP (VBZ is) (ADVP (RB also)) (ADJP (JJ annoying))) (, ,)))))))))

root(ROOT-0, working-2)
cc(working-2, But-1)
neg(task-5, no-4)
prep_on(working-2, task-5)
cop(annoying-8, is-6)
advmod(annoying-8, also-7)
rcmod(task-5, annoying-8)

because/IN if/IN I/PRP work/VBP on/IN a/DT task/NN and/CC I/PRP deactivate/VBP the/DT 

(ROOT (SBAR (IN because) (IN if) (S (S (NP (PRP I)) (VP (VBP work) (PP (IN on) (NP (DT a) (NN task))))) (CC and) (S (NP (PRP I)) (VP (VBP deactivate) (NP (DT the)))))))

root(ROOT-0, work-4)
mark(work-4, because-1)
mark(work-4, if-2)
nsubj(work-4, I-3)
det(task-7, a-6)
prep_on(work-4, task-7)
nsubj(deactivate-10, I-9)
conj_and(work-4, deactivate-10)
dobj(deactivate-10, the-11)

task/NN :/: BANG/NN all/DT my/PRP$ editors/NNS get/VBP closed/VBN ./. 

(ROOT (NP (NP (NN task)) (: :) (NP (NP (NN BANG)) (SBAR (WHNP (DT all)) (S (NP (PRP$ my) (NNS editors)) (VP (VBP get) (ADJP (VBN closed)))))) (. .)))

root(ROOT-0, task-1)
dep(task-1, BANG-3)
dobj(closed-8, all-4)
poss(editors-6, my-5)
nsubjpass(closed-8, editors-6)
auxpass(closed-8, get-7)
rcmod(BANG-3, closed-8)

Possible/JJ solutions/NNS :/: 

(ROOT (NP (JJ Possible) (NNS solutions) (: :)))

root(ROOT-0, solutions-2)
amod(solutions-2, Possible-1)

1/CD When/WRB switching/VBG off/RP a/DT task/NN (/-LRB- going/VBG into/IN normal/JJ 

(ROOT (X (NP (CD 1)) (SBAR (WHADVP (WRB When)) (S (S (VP (VBG switching) (PRT (RP off)) (NP (DT a) (NN task)))) (-LRB- -LRB-) (S (VP (VBG going) (PP (IN into) (ADJP (JJ normal)))))))))

root(ROOT-0, 1-1)
advmod(switching-3, When-2)
dep(1-1, switching-3)
prt(switching-3, off-4)
det(task-6, a-5)
dobj(switching-3, task-6)
parataxis(switching-3, going-8)
prep_into(going-8, normal-10)

mode/NN )/-RRB- ,/, do/VBP n't/RB clear/VB the/DT context/NN ./. 

(ROOT (S (NP (NN mode) (-RRB- -RRB-)) (, ,) (VP (VBP do) (RB n't) (VP (VB clear) (NP (DT the) (NN context)))) (. .)))

root(ROOT-0, clear-6)
nsubj(clear-6, mode-1)
aux(clear-6, do-4)
neg(clear-6, n't-5)
det(context-8, the-7)
dobj(clear-6, context-8)

Have/VBP an/DT action/NN 

(ROOT (SINV (VP (VBP Have)) (NP (DT an) (NN action))))

root(ROOT-0, Have-1)
det(action-3, an-2)
nsubj(Have-1, action-3)

clean/JJ everything/NN when/WRB no/DT task/NN is/VBZ active/JJ ./. 

(ROOT (S (NP (JJ clean) (NN everything)) (SBAR (WHADVP (WRB when)) (S (NP (DT no) (NN task)) (VP (VBZ is) (ADJP (JJ active))))) (. .)))

root(ROOT-0, active-7)
amod(everything-2, clean-1)
dep(active-7, everything-2)
advmod(active-7, when-3)
neg(task-5, no-4)
nsubj(active-7, task-5)
cop(active-7, is-6)

This/DT 

(ROOT (FRAG (NP (DT This))))

root(ROOT-0, This-1)

could/MD be/VB done/VBN in/IN the/DT active/JJ task/NN context/NN menu/NN :/: 

(ROOT (FRAG (VP (MD could) (VP (VB be) (VP (VBN done) (PP (IN in) (NP (NP (DT the) (JJ active) (NN task) (NN context) (NN menu)) (: :))))))))

root(ROOT-0, done-3)
aux(done-3, could-1)
auxpass(done-3, be-2)
det(menu-9, the-5)
amod(menu-9, active-6)
nn(menu-9, task-7)
nn(menu-9, context-8)
prep_in(done-3, menu-9)

"/`` Deactivate/VB without/IN closing/VBG editors/NNS "/'' ./. 

(ROOT (S (`` ``) (VP (VB Deactivate) (PP (IN without) (S (VP (VBG closing) (NP (NNS editors) ('' '')))))) (. .)))

root(ROOT-0, Deactivate-2)
prepc_without(Deactivate-2, closing-4)
dobj(closing-4, editors-5)

I/PRP could/MD 

(ROOT (S (NP (PRP I)) (VP (MD could))))

root(ROOT-0, could-2)
nsubj(could-2, I-1)

close/RB the/DT stuff/NN I/PRP do/VBP n't/RB want/VB ,/, before/IN I/PRP activate/VBP 

(ROOT (FRAG (ADVP (RB close)) (NP (DT the) (NN stuff) (SBAR (S (NP (PRP I)) (VP (VBP do) (RB n't) (VP (VB want) (, ,) (SBAR (IN before) (S (NP (PRP I)) (VP (VBP activate)))))))))))

root(ROOT-0, stuff-3)
dep(stuff-3, close-1)
det(stuff-3, the-2)
nsubj(want-7, I-4)
aux(want-7, do-5)
neg(want-7, n't-6)
ccomp(stuff-3, want-7)
mark(activate-11, before-9)
nsubj(activate-11, I-10)
advcl(want-7, activate-11)

my/PRP$ new/JJ empty/JJ Task/NNP ./. 

(ROOT (NP (NP (PRP$ my) (JJ new) (JJ empty)) (NP (NNP Task)) (. .)))

root(ROOT-0, empty-3)
poss(empty-3, my-1)
amod(empty-3, new-2)
appos(empty-3, Task-4)

2/CD Have/VBP a/DT button/NN deactivate/VBP the/DT current/JJ task/NN 

(ROOT (S (NP (CD 2)) (VP (VBP Have) (NP (NP (DT a) (NN button)) (SBAR (S (VP (VBP deactivate) (NP (DT the) (JJ current) (NN task)))))))))

root(ROOT-0, Have-2)
nsubj(Have-2, 2-1)
det(button-4, a-3)
dobj(Have-2, button-4)
rcmod(button-4, deactivate-5)
det(task-8, the-6)
amod(task-8, current-7)
dobj(deactivate-5, task-8)

without/IN closing/VBG all/DT editors/NNS ./. 

(ROOT (PP (IN without) (S (VP (VBG closing) (NP (DT all) (NNS editors)))) (. .)))

root(ROOT-0, without-1)
pcomp(without-1, closing-2)
det(editors-4, all-3)
dobj(closing-2, editors-4)

This/DT could/MD be/VB 

(ROOT (S (NP (DT This)) (VP (MD could) (VP (VB be)))))

root(ROOT-0, be-3)
nsubj(be-3, This-1)
aux(be-3, could-2)

done/VBN by/IN a/DT stop/NN button/NN in/IN the/DT task/NN list/NN ./. 

(ROOT (S (VP (VBN done) (PP (IN by) (NP (NP (DT a) (NN stop) (NN button)) (PP (IN in) (NP (DT the) (NN task) (NN list)))))) (. .)))

root(ROOT-0, done-1)
det(button-5, a-3)
nn(button-5, stop-4)
prep_by(done-1, button-5)
det(list-9, the-7)
nn(list-9, task-8)
prep_in(button-5, list-9)

The/DT 

(ROOT (FRAG (DT The)))

root(ROOT-0, The-1)

only/RB difference/NN is/VBZ that/IN it/PRP deactivates/VBZ the/DT 

(ROOT (S (NP (RB only) (NN difference)) (VP (VBZ is) (SBAR (IN that) (S (NP (PRP it)) (VP (VBZ deactivates) (NP (DT the))))))))

root(ROOT-0, is-3)
advmod(difference-2, only-1)
nsubj(is-3, difference-2)
mark(deactivates-6, that-4)
nsubj(deactivates-6, it-5)
ccomp(is-3, deactivates-6)
dobj(deactivates-6, the-7)

current/JJ task/NN and/CC does/VBZ not/RB close/VB the/DT open/JJ 

(ROOT (UCP (NP (JJ current) (NN task)) (CC and) (S (VP (VBZ does) (RB not) (VP (VB close) (NP (DT the) (JJ open)))))))

root(ROOT-0, task-2)
amod(task-2, current-1)
aux(close-6, does-4)
neg(close-6, not-5)
conj_and(task-2, close-6)
det(open-8, the-7)
dobj(close-6, open-8)

editors/NNS and/CC the/DT expanded/VBN items/NNS in/IN the/DT package/NN 

(ROOT (S (NP (NP (NNS editors)) (CC and) (NP (DT the) (VBN expanded) (NNS items)) (PP (IN in) (NP (DT the) (NN package))))))

root(ROOT-0, editors-1)
det(items-5, the-3)
amod(items-5, expanded-4)
conj_and(editors-1, items-5)
det(package-8, the-7)
prep_in(editors-1, package-8)

explorer/NN ./. 

(ROOT (NP (NN explorer) (. .)))

root(ROOT-0, explorer-1)

Again/RB ,/, now/RB I/PRP could/MD close/VB the/DT stuff/NN 

(ROOT (S (ADVP (RB Again)) (, ,) (NP (RB now) (PRP I)) (VP (MD could) (VP (VB close) (NP (DT the) (NN stuff))))))

root(ROOT-0, close-6)
advmod(close-6, Again-1)
advmod(I-4, now-3)
nsubj(close-6, I-4)
aux(close-6, could-5)
det(stuff-8, the-7)
dobj(close-6, stuff-8)

I/PRP do/VBP n't/RB want/VB ,/, before/IN I/PRP activate/VBP my/PRP$ new/JJ empty/JJ Task/NNP ./. 

(ROOT (S (NP (PRP I)) (VP (VBP do) (RB n't) (VP (VB want) (, ,) (SBAR (IN before) (S (NP (PRP I)) (VP (VBP activate) (NP (NP (PRP$ my) (JJ new) (JJ empty)) (NP (NNP Task)))))))) (. .)))

root(ROOT-0, want-4)
nsubj(want-4, I-1)
aux(want-4, do-2)
neg(want-4, n't-3)
mark(activate-8, before-6)
nsubj(activate-8, I-7)
advcl(want-4, activate-8)
poss(empty-11, my-9)
amod(empty-11, new-10)
dobj(activate-8, empty-11)
appos(empty-11, Task-12)

2/CD Switching/VBG to/TO tasks/NNS without/IN context/NN never/RB cleans/VBZ 

(ROOT (S (NP (NP (CD 2)) (VP (VBG Switching) (PP (TO to) (NP (NNS tasks))) (PP (IN without) (NP (NN context))) (ADVP (RB never)))) (VP (VBZ cleans))))

root(ROOT-0, cleans-8)
nsubj(cleans-8, 2-1)
vmod(2-1, Switching-2)
prep_to(Switching-2, tasks-4)
prep_without(Switching-2, context-6)
neg(Switching-2, never-7)

the/DT context/NN (/-LRB- like/IN it/PRP does/VBZ if/IN you/PRP have/VBP no/DT task/NN 

(ROOT (S (NP (NP (DT the) (NN context)) (-LRB- -LRB-) (PP (IN like) (NP (PRP it)))) (VP (VBZ does) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP have) (NP (DT no) (NN task))))))))

root(ROOT-0, does-6)
det(context-2, the-1)
nsubj(does-6, context-2)
prep_like(context-2, it-5)
mark(have-9, if-7)
nsubj(have-9, you-8)
advcl(does-6, have-9)
neg(task-11, no-10)
dobj(have-9, task-11)

active/JJ )/-RRB- 

(ROOT (NP (JJ active) (-RRB- -RRB-)))

root(ROOT-0, active-1)

3/CD Copy/VB the/DT context/NN from/IN the/DT old/JJ task/NN to/TO the/DT new/JJ 

(ROOT (FRAG (NP (CD 3)) (VP (VB Copy) (NP (DT the) (NN context)) (PP (IN from) (NP (DT the) (JJ old) (NN task))) (PP (TO to) (NP (DT the) (JJ new))))))

root(ROOT-0, 3-1)
dep(3-1, Copy-2)
det(context-4, the-3)
dobj(Copy-2, context-4)
det(task-8, the-6)
amod(task-8, old-7)
prep_from(Copy-2, task-8)
det(new-11, the-10)
prep_to(Copy-2, new-11)

task/NN ./. 

(ROOT (NP (NN task) (. .)))

root(ROOT-0, task-1)

My/PRP$ favorite/JJ is/VBZ (/-LRB- 1/LS )/-RRB- ./. 

(ROOT (S (NP (PRP$ My) (JJ favorite)) (VP (VBZ is) (PRN (-LRB- -LRB-) (NP (LS 1)) (-RRB- -RRB-))) (. .)))

root(ROOT-0, is-3)
poss(favorite-2, My-1)
nsubj(is-3, favorite-2)
dep(is-3, 1-5)

Solution/NN (/-LRB- 20/CD is/VBZ also/RB good/JJ ./. 

(ROOT (NP (NP (NN Solution)) (SBAR (S (-LRB- -LRB-) (NP (CD 20)) (VP (VBZ is) (ADVP (RB also)) (ADJP (JJ good))))) (. .)))

root(ROOT-0, Solution-1)
nsubj(good-6, 20-3)
cop(good-6, is-4)
advmod(good-6, also-5)
rcmod(Solution-1, good-6)

Solution/NN 

(ROOT (NP (NN Solution)))

root(ROOT-0, Solution-1)

(/-LRB- 3/CD would/MD impact/VB current/JJ users/NNS and/CC solution/NN (/-LRB- 4/CD )/-RRB- is/VBZ 

(ROOT (S (-LRB- -LRB-) (NP (CD 3)) (VP (MD would) (VP (VB impact) (NP (NP (JJ current) (NNS users)) (CC and) (NP (NP (NN solution)) (PRN (-LRB- -LRB-) (NP (CD 4)) (-RRB- -RRB-)))))) (VBZ is)))

root(ROOT-0, impact-4)
nsubj(impact-4, 3-2)
aux(impact-4, would-3)
amod(users-6, current-5)
dobj(impact-4, users-6)
dobj(impact-4, solution-8)
conj_and(users-6, solution-8)
appos(solution-8, 4-10)
dep(impact-4, is-12)

not/RB really/RB helpful/JJ ,/, because/IN the/DT I/PRP do/VBP n't/RB want/VB the/DT 

(ROOT (FRAG (NP (NP (RB not) (RB really) (JJ helpful)) (, ,) (SBAR (IN because) (S (NP (DT the) (PRP I)) (VP (VBP do) (RB n't) (VP (VB want) (NP (DT the)))))))))

root(ROOT-0, helpful-3)
neg(helpful-3, not-1)
advmod(helpful-3, really-2)
mark(want-10, because-5)
det(I-7, the-6)
nsubj(want-10, I-7)
aux(want-10, do-8)
neg(want-10, n't-9)
dep(helpful-3, want-10)
dobj(want-10, the-11)

heritage/NN of/IN another/DT task/NN . . ./: 

(ROOT (NP (NP (NN heritage)) (PP (IN of) (NP (DT another) (NN task))) (: ...)))

root(ROOT-0, heritage-1)
det(task-4, another-3)
prep_of(heritage-1, task-4)

Michael/NNP 

(ROOT (NP (NNP Michael)))

root(ROOT-0, Michael-1)

