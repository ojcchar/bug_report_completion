If/IN you/PRP call/VBP IFileStore.move/NN and/CC pass/NN in/IN the/DT SHALLOW/NNP flag/NN ,/, it/PRP should/MD be/VB ignored/VBN ./. 

(ROOT (S (SBAR (IN If) (S (NP (PRP you)) (VP (VBP call) (NP (NP (NN IFileStore.move) (CC and) (NN pass)) (PP (IN in) (NP (DT the) (NNP SHALLOW) (NN flag))))))) (, ,) (NP (PRP it)) (VP (MD should) (VP (VB be) (VP (VBN ignored)))) (. .)))

root(ROOT-0, ignored-15)
mark(call-3, If-1)
nsubj(call-3, you-2)
advcl(ignored-15, call-3)
dobj(call-3, IFileStore.move-4)
dobj(call-3, pass-6)
conj_and(IFileStore.move-4, pass-6)
det(flag-10, the-8)
nn(flag-10, SHALLOW-9)
prep_in(IFileStore.move-4, flag-10)
nsubjpass(ignored-15, it-12)
aux(ignored-15, should-13)
auxpass(ignored-15, be-14)

The/DT LocalFile/NNP implementation/NN of/IN move/NN sometimes/RB calls/VBZ super.copy/JJ and/CC passes/VBZ through/IN the/DT same/JJ arguments/NNS ,/, so/IN it/PRP 's/VBZ possible/JJ to/TO get/VB SHALLOW/JJ semantics/NNS during/IN a/DT copy/NN ./. 

(ROOT (S (S (NP (NP (DT The) (NNP LocalFile) (NN implementation)) (PP (IN of) (NP (NN move)))) (VP (VP (ADVP (RB sometimes)) (VBZ calls) (ADJP (JJ super.copy))) (CC and) (VP (VBZ passes) (PP (IN through) (NP (DT the) (JJ same) (NNS arguments)))))) (, ,) (IN so) (S (NP (PRP it)) (VP (VBZ 's) (ADJP (JJ possible) (S (VP (TO to) (VP (VB get) (NP (JJ SHALLOW) (NNS semantics)) (PP (IN during) (NP (DT a) (NN copy))))))))) (. .)))

root(ROOT-0, calls-7)
det(implementation-3, The-1)
nn(implementation-3, LocalFile-2)
nsubj(calls-7, implementation-3)
nsubj(passes-10, implementation-3)
prep_of(implementation-3, move-5)
advmod(calls-7, sometimes-6)
acomp(calls-7, super.copy-8)
conj_and(calls-7, passes-10)
det(arguments-14, the-12)
amod(arguments-14, same-13)
prep_through(passes-10, arguments-14)
dep(calls-7, so-16)
nsubj(possible-19, it-17)
cop(possible-19, 's-18)
parataxis(calls-7, possible-19)
aux(get-21, to-20)
xcomp(possible-19, get-21)
amod(semantics-23, SHALLOW-22)
dobj(get-21, semantics-23)
det(copy-26, a-25)
prep_during(get-21, copy-26)

The/DT shallow/JJ flag/NN should/MD not/RB be/VB propagated/VBN from/IN move/NN because/IN it/PRP is/VBZ not/RB a/DT valid/JJ parameter/NN for/IN the/DT move/NN method/NN ./. 

(ROOT (S (NP (DT The) (JJ shallow) (NN flag)) (VP (MD should) (RB not) (VP (VB be) (VP (VBN propagated) (PP (IN from) (NP (NN move))) (SBAR (IN because) (S (NP (PRP it)) (VP (VBZ is) (RB not) (NP (NP (DT a) (JJ valid) (NN parameter)) (PP (IN for) (NP (DT the) (NN move) (NN method)))))))))) (. .)))

root(ROOT-0, propagated-7)
det(flag-3, The-1)
amod(flag-3, shallow-2)
nsubjpass(propagated-7, flag-3)
aux(propagated-7, should-4)
neg(propagated-7, not-5)
auxpass(propagated-7, be-6)
prep_from(propagated-7, move-9)
mark(parameter-16, because-10)
nsubj(parameter-16, it-11)
cop(parameter-16, is-12)
neg(parameter-16, not-13)
det(parameter-16, a-14)
amod(parameter-16, valid-15)
advcl(propagated-7, parameter-16)
det(method-20, the-18)
nn(method-20, move-19)
prep_for(parameter-16, method-20)

