Build/VB :/: 3.5/CD ./. 

(ROOT (S (VP (VB Build) (: :) (ADVP (CD 3.5))) (. .)))

root(ROOT-0, Build-1)
advmod(Build-1, 3.5-3)

If/IN I/PRP move/VBP or/CC rename/VBP my/PRP$ component/NN definition/NN file/NN ,/, the/DT "/`` Service-Component/JJ "/'' header/NN in/IN MANIFEST.MF/NN is/VBZ not/RB updated/VBN ./. 

(ROOT (S (SBAR (IN If) (S (NP (PRP I)) (VP (VBP move) (CC or) (VBP rename) (NP (PRP$ my) (NN component) (NN definition) (NN file))))) (, ,) (NP (NP (DT the) (`` ``) (JJ Service-Component) ('' '') (NN header)) (PP (IN in) (NP (NN MANIFEST.MF)))) (VP (VBZ is) (RB not) (VP (VBN updated))) (. .)))

root(ROOT-0, updated-20)
mark(move-3, If-1)
nsubj(move-3, I-2)
nsubj(rename-5, I-2)
advcl(updated-20, move-3)
conj_or(move-3, rename-5)
advcl(updated-20, rename-5)
poss(file-9, my-6)
nn(file-9, component-7)
nn(file-9, definition-8)
dobj(move-3, file-9)
det(header-15, the-11)
amod(header-15, Service-Component-13)
nsubjpass(updated-20, header-15)
prep_in(header-15, MANIFEST.MF-17)
auxpass(updated-20, is-18)
neg(updated-20, not-19)

It/PRP should/MD hook/NN into/IN the/DT ltk/NN refactoring/VBG support/NN to/TO update/VB the/DT header/NN when/WRB the/DT component/NN file/NN is/VBZ moved/VBN ./. 

(ROOT (S (NP (PRP It)) (VP (MD should) (VP (NP (NN hook)) (PP (IN into) (NP (NP (DT the) (NN ltk)) (VP (VBG refactoring) (NP (NN support)) (S (VP (TO to) (VP (VB update) (NP (DT the) (NN header)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN component) (NN file)) (VP (VBZ is) (VP (VBN moved))))))))))))) (. .)))

root(ROOT-0, hook-3)
nsubj(hook-3, It-1)
aux(hook-3, should-2)
det(ltk-6, the-5)
prep_into(hook-3, ltk-6)
vmod(ltk-6, refactoring-7)
dobj(refactoring-7, support-8)
aux(update-10, to-9)
vmod(refactoring-7, update-10)
det(header-12, the-11)
dobj(update-10, header-12)
advmod(moved-18, when-13)
det(file-16, the-14)
nn(file-16, component-15)
nsubjpass(moved-18, file-16)
auxpass(moved-18, is-17)
advcl(update-10, moved-18)

