<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bug>
    <id>TRUNK-3683</id>
    <title>Concept Map Types in the standard test dataset have the wrong uuids</title>
    <description>
        <paragraph id="1">
            <sentence id="1.1">There are a few concept_map_type rows defined in standardTestDataset.xml, however these are not consistant with the ones we actually distribute with OpenMRS.</sentence>
        </paragraph>
        <paragraph id="2">
            <sentence id="2.1">For example in the test dataset the uuid for SAME-AS is f40555f0-49d5-11e0-8fed-18a905e044dc but in actual production databases it is 35543629-7d8c-11e1-909d-c80aa9edcf4e.</sentence>
        </paragraph>
        <paragraph id="3">
            <sentence id="3.1">We should change the concept_map_type rows in standardTestDataset.xml to be consistent (at least in their name and uuid) with what we actually distribute with OpenMRS.</sentence>
        </paragraph>
        <paragraph id="4">
            <sentence id="4.1">I ran into this error because I'm trying to import a Metadata Sharing package that contains a concept (and a mapping) in a unit test, and it fails because it's trying to create duplicate ConceptMapTypes with the name SAME-AS. Some of the stack trace:</sentence>
            <sentence id="4.2">{code}</sentence>
            <sentence id="4.3">Caused by: org.openmrs.api.APIException: 'SAME-AS' failed to validate with reason: name: ConceptMapType.duplicate.name</sentence>
            <sentence id="4.4">	at org.openmrs.validator.ValidateUtil.validate(ValidateUtil.java:85)</sentence>
            <sentence id="4.5">	at org.openmrs.aop.RequiredDataAdvice.before(RequiredDataAdvice.java:137)</sentence>
            <sentence id="4.6">	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:49)</sentence>
            <sentence id="4.7">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)</sentence>
            <sentence id="4.8">	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:50)</sentence>
            <sentence id="4.9">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)</sentence>
            <sentence id="4.10">	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)</sentence>
            <sentence id="4.11">	at $Proxy32.saveConceptMapType(Unknown Source)</sentence>
            <sentence id="4.12">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</sentence>
            <sentence id="4.13">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</sentence>
            <sentence id="4.14">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</sentence>
            <sentence id="4.15">	at java.lang.reflect.Method.invoke(Method.java:597)</sentence>
            <sentence id="4.16">	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)</sentence>
            <sentence id="4.17">	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)</sentence>
            <sentence id="4.18">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)</sentence>
            <sentence id="4.19">	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)</sentence>
            <sentence id="4.20">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)</sentence>
            <sentence id="4.21">	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)</sentence>
            <sentence id="4.22">	at $Proxy32.saveConceptMapType(Unknown Source)</sentence>
            <sentence id="4.23">	... 94 more</sentence>
        </paragraph>
        <paragraph id="5">
            <sentence id="5.1">	at org.openmrs.module.metadatasharing.reflection.OpenmrsClassScanner.invokeServiceSaveItem(OpenmrsClassScanner.java:291)</sentence>
            <sentence id="5.2">	at org.openmrs.module.metadatasharing.reflection.OpenmrsClassScanner.serviceSaveItem(OpenmrsClassScanner.java:183)</sentence>
            <sentence id="5.3">	at org.openmrs.module.metadatasharing.handler.impl.OpenmrsObjectHandler.saveItem(OpenmrsObjectHandler.java:112)</sentence>
            <sentence id="5.4">	... 87 more</sentence>
            <sentence id="5.5">{code}</sentence>
        </paragraph>
        <paragraph id="6">
            <sentence id="6.1">The workaround for me is to not use the standard test dataset.</sentence>
        </paragraph>
    </description>
</bug>
