<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bug>
    <id>HHH-5001</id>
    <title>Polymorphism not always supported for queries and associations when using interface proxies</title>
    <description>
        <paragraph id="1">
            <sentence id="1.1">On our project we have started using Hibernate inheritance widely and we are facing issues when we map entities in the inheritance hierarchies as lazy=true at the class level and when we map polymorphic, single-ended associations (many-to-one and one-to-one).</sentence>
        </paragraph>
        <paragraph id="2">
            <sentence id="2.1">Originally we were relying on the default Hibernate-generated proxies.</sentence>
            <sentence id="2.2">We were loading objects polymorphically using iterate or load.</sentence>
            <sentence id="2.3">In the HQL statement or the parameter to the load method we would specify the superclass type.</sentence>
            <sentence id="2.4">Also, for polymorphic, single-ended associations we were declaring the property to be of the superclass type.</sentence>
            <sentence id="2.5">The end result was when we try to downcast an object which should be a subclass into its subclass we get a ClassCastException.</sentence>
        </paragraph>
        <paragraph id="3">
            <sentence id="3.1">This behavior is well documented in section "19.1.3.</sentence>
            <sentence id="3.2">Single-ended association proxies" of the Hibernate documentation.</sentence>
            <sentence id="3.3">In that section it describes a solution using proxy interfaces.</sentence>
            <sentence id="3.4">So, we created a parallel hierarchy of proxy interfaces for our inheritance hierarchy.</sentence>
            <sentence id="3.5">There are still issues with this approach.</sentence>
            <sentence id="3.6">I will summarize the most serious issues we have documented so far:</sentence>
        </paragraph>
        <paragraph id="4">
            <sentence id="4.1">1 If the superclass is mapped as lazy=true and the subclass is mapped as lazy=true the subclass objects will not exhibit proper behavior when loaded polymorphically with iterate or load.</sentence>
            <sentence id="4.2">All possible interfaces are proxied, both correct interfaces and incorrect interfaces.</sentence>
            <sentence id="4.3">This makes instanceof operations unreliable.</sentence>
            <sentence id="4.4">The ClassCastException is simply deferred to the time when a method from the wrong subclass interface is invoked.</sentence>
        </paragraph>
        <paragraph id="5">
            <sentence id="5.1">2 If the superclass is mapped as lazy=true and the subclass is mapped as lazy=true the subclass objects will not exhibit proper behavior when loaded via single-ended associations (many-to-one or one-to-one).</sentence>
            <sentence id="5.2">Same behavior as bullet point #1.</sentence>
        </paragraph>
        <paragraph id="6">
            <sentence id="6.1">3 If the superclass is mapped as lazy=true and the subclass is mapped as lazy=false the subclass objects will not exhibit proper behavior when loaded polymorphically with iterate or load.</sentence>
            <sentence id="6.2">The object cannot be downcast to its subclass.</sentence>
        </paragraph>
        <paragraph id="7">
            <sentence id="7.1">Changing all class-level mappings for all classes in the inheritance hierarchy to lazy=false AND changing all single-ended associations to eager fetch seems to resolve the issue.</sentence>
            <sentence id="7.2">However, we do not desire to eager fetch all these objects.</sentence>
        </paragraph>
        <paragraph id="8">
            <sentence id="8.1">Another possible "fix" is to always use the exact subclass when loading the objects (in the HQL query or as a parameter to the load) but this eliminates polymorphism completely.</sentence>
            <sentence id="8.2">Also, it would be impossible to map polymorphic associations...all associations would need to declare a specific subclass.</sentence>
        </paragraph>
        <paragraph id="9">
            <sentence id="9.1">I have uploaded an entire Eclipse project which demonstrates the issues with the proxy interface approach.</sentence>
            <sentence id="9.2">To run the tests in the project you need to do the following steps:</sentence>
        </paragraph>
        <paragraph id="10">
            <sentence id="10.1">1 Import the project into Eclipse</sentence>
            <sentence id="10.2">2 Setup your DB connection properties in src/main/resources/local.properties</sentence>
            <sentence id="10.3">3 Run the script in DB.txt against your target schema</sentence>
        </paragraph>
        <paragraph id="11">
            <sentence id="11.1">On a final note I spent a fair amount of time going through the JIRA issues that mentioned polymorphism.</sentence>
            <sentence id="11.2">This topic seems to have been touched several times and rejected quickly with a brief not to "read the documentation".</sentence>
            <sentence id="11.3">I assure you I have read the documentation many times searching for clues on how to accomplish this and I am at a dead end.</sentence>
            <sentence id="11.4">If there is a simple way to do this please take the time to provide a few sentences to lead us in the right direction.</sentence>
            <sentence id="11.5">Your help is appreciated!</sentence>
        </paragraph>
        <paragraph id="12">
            <sentence id="12.1">Related JIRA issues?</sentence>
            <sentence id="12.2">http://opensource.atlassian.com/projects/hibernate/browse/HHH-2927
http://opensource.atlassian.com/projects/hibernate/browse/HHH-2921
http://opensource.atlassian.com/projects/hibernate/browse/HHH-1347
http://opensource.atlassian.com/projects/hibernate/browse/HHH-1288
http://opensource.atlassian.com/projects/hibernate/browse/HHH-4511
http://opensource.atlassian.com/projects/hibernate/browse/HB-382</sentence>
        </paragraph>
    </description>
</bug>
