<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bug>
    <id>HHH-7139</id>
    <title>java.sql.SQLException: Invalid argument in JDBC call: parameter index out of range when trying to persist an entity mapped with insertable = false, updatable = false on @Column</title>
    <description>
        <paragraph id="1">
            <sentence id="1.1">The following mappings are all JPA 1.0 compatible (no derived identifiers):</sentence>
        </paragraph>
        <paragraph id="2">
            <sentence id="2.1">{code:Company.java}
@Entity
@Table(name = "Companies")
public class Company
{
    @Id
    @Column
    private Integer id;</sentence>
        </paragraph>
        <paragraph id="3">
            <sentence id="3.1">@Column
    private String name;</sentence>
        </paragraph>
        <paragraph id="4">
            <sentence id="4.1">...
}
{code}</sentence>
        </paragraph>
        <paragraph id="5">
            <sentence id="5.1">{code:PQ.java}
@Entity
@Table(name = "PQs")
public class PQ implements Serializable
{
    @Id
    @Column
    private Integer id;</sentence>
        </paragraph>
        <paragraph id="6">
            <sentence id="6.1">@Column
    private String name;</sentence>
        </paragraph>
        <paragraph id="7">
            <sentence id="7.1">...
}
{code}</sentence>
        </paragraph>
        <paragraph id="8">
            <sentence id="8.1">{code:Partnership.java}
@Entity
@Table(name = "Partnerships")
@IdClass(value = PartnershipId.class)
public class Partnership implements Serializable
{
    @Id
    @Column(name = "pq_id", insertable = false, updatable = false)
    private Integer pqId;</sentence>
        </paragraph>
        <paragraph id="9">
            <sentence id="9.1">@Id
    @Column(name = "company_id", insertable = false, updatable = false)
    private Integer companyId;</sentence>
        </paragraph>
        <paragraph id="10">
            <sentence id="10.1">@Column(name = "ordinal_nbr")
    private Integer ordinalNbr;</sentence>
        </paragraph>
        <paragraph id="11">
            <sentence id="11.1">@ManyToOne
    @JoinColumn(name = "pq_id", referencedColumnName = "id")
    private PQ pq;</sentence>
        </paragraph>
        <paragraph id="12">
            <sentence id="12.1">@ManyToOne
    @JoinColumn(name = "company_id", referencedColumnName = "id")
    private Company company;</sentence>
        </paragraph>
        <paragraph id="13">
            <sentence id="13.1">...
}
{code}</sentence>
        </paragraph>
        <paragraph id="14">
            <sentence id="14.1">{code:PartnershipId.java}
public class PartnershipId implements Serializable
{
    private Integer pqId;</sentence>
        </paragraph>
        <paragraph id="15">
            <sentence id="15.1">private Integer companyId;</sentence>
        </paragraph>
        <paragraph id="16">
            <sentence id="16.1">public PartnershipId()
    {
    }</sentence>
        </paragraph>
        <paragraph id="17">
            <sentence id="17.1">public PartnershipId(Integer pqId, Integer companyId)
    {
        this.pqId = pqId;
        this.companyId = companyId;
    }</sentence>
        </paragraph>
        <paragraph id="18">
            <sentence id="18.1">...
}
{code}</sentence>
        </paragraph>
        <paragraph id="19">
            <sentence id="19.1">Note, the insertable = false, updatable = false on @JoinColumn relationships.</sentence>
        </paragraph>
        <paragraph id="20">
            <sentence id="20.1">Running the following test code</sentence>
        </paragraph>
        <paragraph id="21">
            <sentence id="21.1">{code:Main.java}
public class Main
{
    private static String PERSISTENCE_UNIT_NAME = "standalonePu";</sentence>
        </paragraph>
        <paragraph id="22">
            <sentence id="22.1">private static EntityManagerFactory emf;
    private static EntityManager em;
    private static EntityTransaction trans;</sentence>
        </paragraph>
        <paragraph id="23">
            <sentence id="23.1">public static void main(String[] args)
    {
        setUp(PERSISTENCE_UNIT_NAME);
        trans.begin();</sentence>
        </paragraph>
        <paragraph id="24">
            <sentence id="24.1">        PQ detachedPq = new PQ(1, "Test PQ");</sentence>
            <sentence id="24.2">        Company detachedCompany = new Company(1, "Test Company");</sentence>
            <sentence id="24.3">        PQ pq = em.merge(detachedPq);</sentence>
            <sentence id="24.4">        Company company = em.merge(detachedCompany);</sentence>
            <sentence id="24.5">        Partnership detachedPartnership = new Partnership(1, 1, 1);</sentence>
            <sentence id="24.6">        detachedPartnership.setPQ(pq);</sentence>
            <sentence id="24.7">        detachedPartnership.setCompany(company);</sentence>
            <sentence id="24.8">        Partnership partnership = em.merge(detachedPartnership);</sentence>
            <sentence id="24.9">        partnership = em.find(Partnership.class, new PartnershipId(1, 1));</sentence>
            <sentence id="24.10">        System.out.println("Persistent partnership = ("</sentence>
            <sentence id="24.11">            + partnership.getPQId() + ", "</sentence>
            <sentence id="24.12">            + partnership.getCompanyId() + ", "</sentence>
            <sentence id="24.13">            + partnership.getOrdinalNbr() + ")");</sentence>
            <sentence id="24.14">        trans.commit();</sentence>
            <sentence id="24.15">        close();</sentence>
            <sentence id="24.16">    }</sentence>
        </paragraph>
        <paragraph id="25">
            <sentence id="25.1">private static void setUp(String puName)
    {
        emf = Persistence.createEntityManagerFactory(puName);
        em = emf.createEntityManager();
        trans = em.getTransaction();
    }</sentence>
        </paragraph>
        <paragraph id="26">
            <sentence id="26.1">private static void close()
    {
        em.close();
        emf.close();
    }
}
{code}</sentence>
        </paragraph>
        <paragraph id="27">
            <sentence id="27.1">fails with a really strange exception:</sentence>
        </paragraph>
        <paragraph id="28">
            <sentence id="28.1">    ERROR: Invalid argument in JDBC call: parameter index out of range: 4</sentence>
            <sentence id="28.2">    Exception in thread "main" javax.persistence.RollbackException: Error while committing the transaction</sentence>
            <sentence id="28.3">        at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:90)</sentence>
            <sentence id="28.4">        at main.Main.main(Main.java:44)</sentence>
            <sentence id="28.5">    Caused by: javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Invalid argument in JDBC call: parameter index out of range: 4</sentence>
            <sentence id="28.6">        at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1347)</sentence>
            <sentence id="28.7">        at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1280)</sentence>
            <sentence id="28.8">        at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:78)</sentence>
            <sentence id="28.9">        ... 1 more</sentence>
            <sentence id="28.10">    Caused by: org.hibernate.exception.GenericJDBCException: Invalid argument in JDBC call: parameter index out of range: 4</sentence>
            <sentence id="28.11">        at org.hibernate.exception.internal.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:148)</sentence>
            <sentence id="28.12">        at org.hibernate.exception.internal.SQLStateConverter.convert(SQLStateConverter.java:136)</sentence>
            <sentence id="28.13">        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:124)</sentence>
            <sentence id="28.14">        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)</sentence>
            <sentence id="28.15">        at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:131)</sentence>
            <sentence id="28.16">        at org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:80)</sentence>
            <sentence id="28.17">        at $Proxy12.setInt(Unknown Source)</sentence>
            <sentence id="28.18">        at org.hibernate.type.descriptor.sql.IntegerTypeDescriptor$1.doBind(IntegerTypeDescriptor.java:57)</sentence>
            <sentence id="28.19">        at org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:82)</sentence>
            <sentence id="28.20">        at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:305)</sentence>
            <sentence id="28.21">        at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:300)</sentence>
            <sentence id="28.22">        at org.hibernate.type.ComponentType.nullSafeSet(ComponentType.java:358)</sentence>
            <sentence id="28.23">        at org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2599)</sentence>
            <sentence id="28.24">        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2836)</sentence>
            <sentence id="28.25">        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3276)</sentence>
            <sentence id="28.26">        at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:80)</sentence>
            <sentence id="28.27">        at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:273)</sentence>
            <sentence id="28.28">        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:265)</sentence>
            <sentence id="28.29">        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:186)</sentence>
            <sentence id="28.30">        at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)</sentence>
            <sentence id="28.31">        at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:50)</sentence>
            <sentence id="28.32">        at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1084)</sentence>
            <sentence id="28.33">        at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:319)</sentence>
            <sentence id="28.34">        at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.beforeTransactionCommit(JdbcTransaction.java:100)</sentence>
            <sentence id="28.35">        at org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173)</sentence>
            <sentence id="28.36">        at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:73)</sentence>
            <sentence id="28.37">        ... 1 more</sentence>
            <sentence id="28.38">    Caused by: java.sql.SQLException: Invalid argument in JDBC call: parameter index out of range: 4</sentence>
            <sentence id="28.39">        at org.hsqldb.jdbc.Util.sqlException(Unknown Source)</sentence>
            <sentence id="28.40">        at org.hsqldb.jdbc.Util.sqlException(Unknown Source)</sentence>
            <sentence id="28.41">        at org.hsqldb.jdbc.Util.sqlException(Unknown Source)</sentence>
            <sentence id="28.42">        at org.hsqldb.jdbc.Util.outOfRangeArgument(Unknown Source)</sentence>
            <sentence id="28.43">        at org.hsqldb.jdbc.JDBCPreparedStatement.checkSetParameterIndex(Unknown Source)</sentence>
            <sentence id="28.44">        at org.hsqldb.jdbc.JDBCPreparedStatement.setInt(Unknown Source)</sentence>
            <sentence id="28.45">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</sentence>
            <sentence id="28.46">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</sentence>
            <sentence id="28.47">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</sentence>
            <sentence id="28.48">        at java.lang.reflect.Method.invoke(Method.java:601)</sentence>
            <sentence id="28.49">        at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:124)</sentence>
            <sentence id="28.50">        ... 22 more</sentence>
            <sentence id="28.51">    Caused by: org.hsqldb.HsqlException: Invalid argument in JDBC call: parameter index out of range: 4</sentence>
            <sentence id="28.52">        at org.hsqldb.error.Error.error(Unknown Source)</sentence>
            <sentence id="28.53">        ... 31 more</sentence>
            <sentence id="28.54">I've also tested this with MySQL with the same JDBC exception.</sentence>
        </paragraph>
        <paragraph id="29">
            <sentence id="29.1">Note the workaround to resolve this is to put '..., insertable = false, updatable = false' onto the relationships' '@JoinColumn's (but it's not really what I want).</sentence>
        </paragraph>
        <paragraph id="30">
            <sentence id="30.1">Please fix.</sentence>
        </paragraph>
    </description>
</bug>
